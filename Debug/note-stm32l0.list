
note-stm32l0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08009990  08009990  00019990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a14c  0800a14c  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a14c  0800a14c  0001a14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a154  0800a154  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a154  0800a154  0001a154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a158  0800a158  0001a158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800a15c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  2000022c  0800a388  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0800a388  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e09  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003397  00000000  00000000  0003505d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001340  00000000  00000000  000383f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  00039738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015fc5  00000000  00000000  0003a980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f89d  00000000  00000000  00050945  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f163  00000000  00000000  000601e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df345  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d8  00000000  00000000  000df3c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000022c 	.word	0x2000022c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009974 	.word	0x08009974

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000230 	.word	0x20000230
 8000104:	08009974 	.word	0x08009974

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fff1 	bl	8001410 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 ff49 	bl	80012d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ffe3 	bl	8001410 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffd9 	bl	8001410 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff6b 	bl	8001348 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff61 	bl	8001348 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_uldivmod>:
 8000494:	2b00      	cmp	r3, #0
 8000496:	d111      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 8000498:	2a00      	cmp	r2, #0
 800049a:	d10f      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 800049c:	2900      	cmp	r1, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_uldivmod+0xe>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d002      	beq.n	80004aa <__aeabi_uldivmod+0x16>
 80004a4:	2100      	movs	r1, #0
 80004a6:	43c9      	mvns	r1, r1
 80004a8:	1c08      	adds	r0, r1, #0
 80004aa:	b407      	push	{r0, r1, r2}
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <__aeabi_uldivmod+0x24>)
 80004ae:	a102      	add	r1, pc, #8	; (adr r1, 80004b8 <__aeabi_uldivmod+0x24>)
 80004b0:	1840      	adds	r0, r0, r1
 80004b2:	9002      	str	r0, [sp, #8]
 80004b4:	bd03      	pop	{r0, r1, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	ffffff5d 	.word	0xffffff5d
 80004bc:	b403      	push	{r0, r1}
 80004be:	4668      	mov	r0, sp
 80004c0:	b501      	push	{r0, lr}
 80004c2:	9802      	ldr	r0, [sp, #8]
 80004c4:	f000 f824 	bl	8000510 <__udivmoddi4>
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	469e      	mov	lr, r3
 80004cc:	b002      	add	sp, #8
 80004ce:	bc0c      	pop	{r2, r3}
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__aeabi_d2uiz>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	2200      	movs	r2, #0
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <__aeabi_d2uiz+0x38>)
 80004da:	0004      	movs	r4, r0
 80004dc:	000d      	movs	r5, r1
 80004de:	f7ff ffcf 	bl	8000480 <__aeabi_dcmpge>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d104      	bne.n	80004f0 <__aeabi_d2uiz+0x1c>
 80004e6:	0020      	movs	r0, r4
 80004e8:	0029      	movs	r1, r5
 80004ea:	f001 fdb3 	bl	8002054 <__aeabi_d2iz>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <__aeabi_d2uiz+0x38>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0020      	movs	r0, r4
 80004f6:	0029      	movs	r1, r5
 80004f8:	f001 fa64 	bl	80019c4 <__aeabi_dsub>
 80004fc:	f001 fdaa 	bl	8002054 <__aeabi_d2iz>
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	469c      	mov	ip, r3
 8000506:	4460      	add	r0, ip
 8000508:	e7f1      	b.n	80004ee <__aeabi_d2uiz+0x1a>
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	41e00000 	.word	0x41e00000

08000510 <__udivmoddi4>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	464f      	mov	r7, r9
 8000514:	4646      	mov	r6, r8
 8000516:	46d6      	mov	lr, sl
 8000518:	b5c0      	push	{r6, r7, lr}
 800051a:	0004      	movs	r4, r0
 800051c:	b082      	sub	sp, #8
 800051e:	000d      	movs	r5, r1
 8000520:	4691      	mov	r9, r2
 8000522:	4698      	mov	r8, r3
 8000524:	428b      	cmp	r3, r1
 8000526:	d82f      	bhi.n	8000588 <__udivmoddi4+0x78>
 8000528:	d02c      	beq.n	8000584 <__udivmoddi4+0x74>
 800052a:	4641      	mov	r1, r8
 800052c:	4648      	mov	r0, r9
 800052e:	f001 fe51 	bl	80021d4 <__clzdi2>
 8000532:	0029      	movs	r1, r5
 8000534:	0006      	movs	r6, r0
 8000536:	0020      	movs	r0, r4
 8000538:	f001 fe4c 	bl	80021d4 <__clzdi2>
 800053c:	1a33      	subs	r3, r6, r0
 800053e:	469c      	mov	ip, r3
 8000540:	3b20      	subs	r3, #32
 8000542:	469a      	mov	sl, r3
 8000544:	d500      	bpl.n	8000548 <__udivmoddi4+0x38>
 8000546:	e076      	b.n	8000636 <__udivmoddi4+0x126>
 8000548:	464b      	mov	r3, r9
 800054a:	4652      	mov	r2, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001f      	movs	r7, r3
 8000550:	464b      	mov	r3, r9
 8000552:	4662      	mov	r2, ip
 8000554:	4093      	lsls	r3, r2
 8000556:	001e      	movs	r6, r3
 8000558:	42af      	cmp	r7, r5
 800055a:	d828      	bhi.n	80005ae <__udivmoddi4+0x9e>
 800055c:	d025      	beq.n	80005aa <__udivmoddi4+0x9a>
 800055e:	4653      	mov	r3, sl
 8000560:	1ba4      	subs	r4, r4, r6
 8000562:	41bd      	sbcs	r5, r7
 8000564:	2b00      	cmp	r3, #0
 8000566:	da00      	bge.n	800056a <__udivmoddi4+0x5a>
 8000568:	e07b      	b.n	8000662 <__udivmoddi4+0x152>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	4652      	mov	r2, sl
 8000576:	4093      	lsls	r3, r2
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	4662      	mov	r2, ip
 800057e:	4093      	lsls	r3, r2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	e018      	b.n	80005b6 <__udivmoddi4+0xa6>
 8000584:	4282      	cmp	r2, r0
 8000586:	d9d0      	bls.n	800052a <__udivmoddi4+0x1a>
 8000588:	2200      	movs	r2, #0
 800058a:	2300      	movs	r3, #0
 800058c:	9200      	str	r2, [sp, #0]
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <__udivmoddi4+0x8a>
 8000596:	601c      	str	r4, [r3, #0]
 8000598:	605d      	str	r5, [r3, #4]
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	b002      	add	sp, #8
 80005a0:	bc1c      	pop	{r2, r3, r4}
 80005a2:	4690      	mov	r8, r2
 80005a4:	4699      	mov	r9, r3
 80005a6:	46a2      	mov	sl, r4
 80005a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d9d7      	bls.n	800055e <__udivmoddi4+0x4e>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	4663      	mov	r3, ip
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e9      	beq.n	8000590 <__udivmoddi4+0x80>
 80005bc:	07fb      	lsls	r3, r7, #31
 80005be:	4698      	mov	r8, r3
 80005c0:	4641      	mov	r1, r8
 80005c2:	0872      	lsrs	r2, r6, #1
 80005c4:	430a      	orrs	r2, r1
 80005c6:	087b      	lsrs	r3, r7, #1
 80005c8:	4666      	mov	r6, ip
 80005ca:	e00e      	b.n	80005ea <__udivmoddi4+0xda>
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d101      	bne.n	80005d4 <__udivmoddi4+0xc4>
 80005d0:	42a2      	cmp	r2, r4
 80005d2:	d80c      	bhi.n	80005ee <__udivmoddi4+0xde>
 80005d4:	1aa4      	subs	r4, r4, r2
 80005d6:	419d      	sbcs	r5, r3
 80005d8:	2001      	movs	r0, #1
 80005da:	1924      	adds	r4, r4, r4
 80005dc:	416d      	adcs	r5, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	3e01      	subs	r6, #1
 80005e2:	1824      	adds	r4, r4, r0
 80005e4:	414d      	adcs	r5, r1
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d006      	beq.n	80005f8 <__udivmoddi4+0xe8>
 80005ea:	42ab      	cmp	r3, r5
 80005ec:	d9ee      	bls.n	80005cc <__udivmoddi4+0xbc>
 80005ee:	3e01      	subs	r6, #1
 80005f0:	1924      	adds	r4, r4, r4
 80005f2:	416d      	adcs	r5, r5
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d1f8      	bne.n	80005ea <__udivmoddi4+0xda>
 80005f8:	9800      	ldr	r0, [sp, #0]
 80005fa:	9901      	ldr	r1, [sp, #4]
 80005fc:	4653      	mov	r3, sl
 80005fe:	1900      	adds	r0, r0, r4
 8000600:	4169      	adcs	r1, r5
 8000602:	2b00      	cmp	r3, #0
 8000604:	db23      	blt.n	800064e <__udivmoddi4+0x13e>
 8000606:	002b      	movs	r3, r5
 8000608:	4652      	mov	r2, sl
 800060a:	40d3      	lsrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4664      	mov	r4, ip
 8000610:	40e2      	lsrs	r2, r4
 8000612:	001c      	movs	r4, r3
 8000614:	4653      	mov	r3, sl
 8000616:	0015      	movs	r5, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	db2d      	blt.n	8000678 <__udivmoddi4+0x168>
 800061c:	0026      	movs	r6, r4
 800061e:	4657      	mov	r7, sl
 8000620:	40be      	lsls	r6, r7
 8000622:	0033      	movs	r3, r6
 8000624:	0026      	movs	r6, r4
 8000626:	4667      	mov	r7, ip
 8000628:	40be      	lsls	r6, r7
 800062a:	0032      	movs	r2, r6
 800062c:	1a80      	subs	r0, r0, r2
 800062e:	4199      	sbcs	r1, r3
 8000630:	9000      	str	r0, [sp, #0]
 8000632:	9101      	str	r1, [sp, #4]
 8000634:	e7ac      	b.n	8000590 <__udivmoddi4+0x80>
 8000636:	4662      	mov	r2, ip
 8000638:	2320      	movs	r3, #32
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	464a      	mov	r2, r9
 800063e:	40da      	lsrs	r2, r3
 8000640:	4661      	mov	r1, ip
 8000642:	0013      	movs	r3, r2
 8000644:	4642      	mov	r2, r8
 8000646:	408a      	lsls	r2, r1
 8000648:	0017      	movs	r7, r2
 800064a:	431f      	orrs	r7, r3
 800064c:	e780      	b.n	8000550 <__udivmoddi4+0x40>
 800064e:	4662      	mov	r2, ip
 8000650:	2320      	movs	r3, #32
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	002a      	movs	r2, r5
 8000656:	4666      	mov	r6, ip
 8000658:	409a      	lsls	r2, r3
 800065a:	0023      	movs	r3, r4
 800065c:	40f3      	lsrs	r3, r6
 800065e:	4313      	orrs	r3, r2
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0xfc>
 8000662:	4662      	mov	r2, ip
 8000664:	2320      	movs	r3, #32
 8000666:	2100      	movs	r1, #0
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	2200      	movs	r2, #0
 800066c:	9100      	str	r1, [sp, #0]
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	2201      	movs	r2, #1
 8000672:	40da      	lsrs	r2, r3
 8000674:	9201      	str	r2, [sp, #4]
 8000676:	e780      	b.n	800057a <__udivmoddi4+0x6a>
 8000678:	2320      	movs	r3, #32
 800067a:	4662      	mov	r2, ip
 800067c:	0026      	movs	r6, r4
 800067e:	1a9b      	subs	r3, r3, r2
 8000680:	40de      	lsrs	r6, r3
 8000682:	002f      	movs	r7, r5
 8000684:	46b0      	mov	r8, r6
 8000686:	4666      	mov	r6, ip
 8000688:	40b7      	lsls	r7, r6
 800068a:	4646      	mov	r6, r8
 800068c:	003b      	movs	r3, r7
 800068e:	4333      	orrs	r3, r6
 8000690:	e7c8      	b.n	8000624 <__udivmoddi4+0x114>
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <__aeabi_dadd>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	464f      	mov	r7, r9
 8000698:	4646      	mov	r6, r8
 800069a:	46d6      	mov	lr, sl
 800069c:	000c      	movs	r4, r1
 800069e:	0309      	lsls	r1, r1, #12
 80006a0:	b5c0      	push	{r6, r7, lr}
 80006a2:	0a49      	lsrs	r1, r1, #9
 80006a4:	0f47      	lsrs	r7, r0, #29
 80006a6:	005e      	lsls	r6, r3, #1
 80006a8:	4339      	orrs	r1, r7
 80006aa:	031f      	lsls	r7, r3, #12
 80006ac:	0fdb      	lsrs	r3, r3, #31
 80006ae:	469c      	mov	ip, r3
 80006b0:	0065      	lsls	r5, r4, #1
 80006b2:	0a7b      	lsrs	r3, r7, #9
 80006b4:	0f57      	lsrs	r7, r2, #29
 80006b6:	431f      	orrs	r7, r3
 80006b8:	0d6d      	lsrs	r5, r5, #21
 80006ba:	0fe4      	lsrs	r4, r4, #31
 80006bc:	0d76      	lsrs	r6, r6, #21
 80006be:	46a1      	mov	r9, r4
 80006c0:	00c0      	lsls	r0, r0, #3
 80006c2:	46b8      	mov	r8, r7
 80006c4:	00d2      	lsls	r2, r2, #3
 80006c6:	1bab      	subs	r3, r5, r6
 80006c8:	4564      	cmp	r4, ip
 80006ca:	d07b      	beq.n	80007c4 <__aeabi_dadd+0x130>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dd5f      	ble.n	8000790 <__aeabi_dadd+0xfc>
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_dadd+0x42>
 80006d4:	e0a4      	b.n	8000820 <__aeabi_dadd+0x18c>
 80006d6:	003e      	movs	r6, r7
 80006d8:	4316      	orrs	r6, r2
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x4a>
 80006dc:	e112      	b.n	8000904 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x52>
 80006e4:	e19e      	b.n	8000a24 <__aeabi_dadd+0x390>
 80006e6:	1a87      	subs	r7, r0, r2
 80006e8:	4643      	mov	r3, r8
 80006ea:	42b8      	cmp	r0, r7
 80006ec:	4180      	sbcs	r0, r0
 80006ee:	2501      	movs	r5, #1
 80006f0:	1ac9      	subs	r1, r1, r3
 80006f2:	4240      	negs	r0, r0
 80006f4:	1a09      	subs	r1, r1, r0
 80006f6:	020b      	lsls	r3, r1, #8
 80006f8:	d400      	bmi.n	80006fc <__aeabi_dadd+0x68>
 80006fa:	e131      	b.n	8000960 <__aeabi_dadd+0x2cc>
 80006fc:	0249      	lsls	r1, r1, #9
 80006fe:	0a4e      	lsrs	r6, r1, #9
 8000700:	2e00      	cmp	r6, #0
 8000702:	d100      	bne.n	8000706 <__aeabi_dadd+0x72>
 8000704:	e16e      	b.n	80009e4 <__aeabi_dadd+0x350>
 8000706:	0030      	movs	r0, r6
 8000708:	f001 fd46 	bl	8002198 <__clzsi2>
 800070c:	0003      	movs	r3, r0
 800070e:	3b08      	subs	r3, #8
 8000710:	2b1f      	cmp	r3, #31
 8000712:	dd00      	ble.n	8000716 <__aeabi_dadd+0x82>
 8000714:	e161      	b.n	80009da <__aeabi_dadd+0x346>
 8000716:	2220      	movs	r2, #32
 8000718:	0039      	movs	r1, r7
 800071a:	1ad2      	subs	r2, r2, r3
 800071c:	409e      	lsls	r6, r3
 800071e:	40d1      	lsrs	r1, r2
 8000720:	409f      	lsls	r7, r3
 8000722:	430e      	orrs	r6, r1
 8000724:	429d      	cmp	r5, r3
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x96>
 8000728:	e151      	b.n	80009ce <__aeabi_dadd+0x33a>
 800072a:	1b5d      	subs	r5, r3, r5
 800072c:	1c6b      	adds	r3, r5, #1
 800072e:	2b1f      	cmp	r3, #31
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0xa0>
 8000732:	e17c      	b.n	8000a2e <__aeabi_dadd+0x39a>
 8000734:	2120      	movs	r1, #32
 8000736:	1ac9      	subs	r1, r1, r3
 8000738:	003d      	movs	r5, r7
 800073a:	0030      	movs	r0, r6
 800073c:	408f      	lsls	r7, r1
 800073e:	4088      	lsls	r0, r1
 8000740:	40dd      	lsrs	r5, r3
 8000742:	1e79      	subs	r1, r7, #1
 8000744:	418f      	sbcs	r7, r1
 8000746:	0031      	movs	r1, r6
 8000748:	2207      	movs	r2, #7
 800074a:	4328      	orrs	r0, r5
 800074c:	40d9      	lsrs	r1, r3
 800074e:	2500      	movs	r5, #0
 8000750:	4307      	orrs	r7, r0
 8000752:	403a      	ands	r2, r7
 8000754:	2a00      	cmp	r2, #0
 8000756:	d009      	beq.n	800076c <__aeabi_dadd+0xd8>
 8000758:	230f      	movs	r3, #15
 800075a:	403b      	ands	r3, r7
 800075c:	2b04      	cmp	r3, #4
 800075e:	d005      	beq.n	800076c <__aeabi_dadd+0xd8>
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	42bb      	cmp	r3, r7
 8000764:	41bf      	sbcs	r7, r7
 8000766:	427f      	negs	r7, r7
 8000768:	19c9      	adds	r1, r1, r7
 800076a:	001f      	movs	r7, r3
 800076c:	020b      	lsls	r3, r1, #8
 800076e:	d400      	bmi.n	8000772 <__aeabi_dadd+0xde>
 8000770:	e226      	b.n	8000bc0 <__aeabi_dadd+0x52c>
 8000772:	1c6a      	adds	r2, r5, #1
 8000774:	4bc6      	ldr	r3, [pc, #792]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000776:	0555      	lsls	r5, r2, #21
 8000778:	0d6d      	lsrs	r5, r5, #21
 800077a:	429a      	cmp	r2, r3
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0xec>
 800077e:	e106      	b.n	800098e <__aeabi_dadd+0x2fa>
 8000780:	4ac4      	ldr	r2, [pc, #784]	; (8000a94 <__aeabi_dadd+0x400>)
 8000782:	08ff      	lsrs	r7, r7, #3
 8000784:	400a      	ands	r2, r1
 8000786:	0753      	lsls	r3, r2, #29
 8000788:	0252      	lsls	r2, r2, #9
 800078a:	433b      	orrs	r3, r7
 800078c:	0b12      	lsrs	r2, r2, #12
 800078e:	e08e      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000790:	2b00      	cmp	r3, #0
 8000792:	d000      	beq.n	8000796 <__aeabi_dadd+0x102>
 8000794:	e0b8      	b.n	8000908 <__aeabi_dadd+0x274>
 8000796:	1c6b      	adds	r3, r5, #1
 8000798:	055b      	lsls	r3, r3, #21
 800079a:	0d5b      	lsrs	r3, r3, #21
 800079c:	2b01      	cmp	r3, #1
 800079e:	dc00      	bgt.n	80007a2 <__aeabi_dadd+0x10e>
 80007a0:	e130      	b.n	8000a04 <__aeabi_dadd+0x370>
 80007a2:	1a87      	subs	r7, r0, r2
 80007a4:	4643      	mov	r3, r8
 80007a6:	42b8      	cmp	r0, r7
 80007a8:	41b6      	sbcs	r6, r6
 80007aa:	1acb      	subs	r3, r1, r3
 80007ac:	4276      	negs	r6, r6
 80007ae:	1b9e      	subs	r6, r3, r6
 80007b0:	0233      	lsls	r3, r6, #8
 80007b2:	d500      	bpl.n	80007b6 <__aeabi_dadd+0x122>
 80007b4:	e14c      	b.n	8000a50 <__aeabi_dadd+0x3bc>
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	d1a1      	bne.n	8000700 <__aeabi_dadd+0x6c>
 80007bc:	2200      	movs	r2, #0
 80007be:	2400      	movs	r4, #0
 80007c0:	2500      	movs	r5, #0
 80007c2:	e070      	b.n	80008a6 <__aeabi_dadd+0x212>
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_dadd+0x136>
 80007c8:	e0e5      	b.n	8000996 <__aeabi_dadd+0x302>
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_dadd+0x13c>
 80007ce:	e083      	b.n	80008d8 <__aeabi_dadd+0x244>
 80007d0:	4eaf      	ldr	r6, [pc, #700]	; (8000a90 <__aeabi_dadd+0x3fc>)
 80007d2:	42b5      	cmp	r5, r6
 80007d4:	d060      	beq.n	8000898 <__aeabi_dadd+0x204>
 80007d6:	2680      	movs	r6, #128	; 0x80
 80007d8:	0436      	lsls	r6, r6, #16
 80007da:	4337      	orrs	r7, r6
 80007dc:	46b8      	mov	r8, r7
 80007de:	2b38      	cmp	r3, #56	; 0x38
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_dadd+0x150>
 80007e2:	e13e      	b.n	8000a62 <__aeabi_dadd+0x3ce>
 80007e4:	4643      	mov	r3, r8
 80007e6:	4313      	orrs	r3, r2
 80007e8:	001f      	movs	r7, r3
 80007ea:	1e7a      	subs	r2, r7, #1
 80007ec:	4197      	sbcs	r7, r2
 80007ee:	183f      	adds	r7, r7, r0
 80007f0:	4287      	cmp	r7, r0
 80007f2:	4180      	sbcs	r0, r0
 80007f4:	4240      	negs	r0, r0
 80007f6:	1809      	adds	r1, r1, r0
 80007f8:	020b      	lsls	r3, r1, #8
 80007fa:	d400      	bmi.n	80007fe <__aeabi_dadd+0x16a>
 80007fc:	e0b0      	b.n	8000960 <__aeabi_dadd+0x2cc>
 80007fe:	4ba4      	ldr	r3, [pc, #656]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000800:	3501      	adds	r5, #1
 8000802:	429d      	cmp	r5, r3
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x174>
 8000806:	e0c3      	b.n	8000990 <__aeabi_dadd+0x2fc>
 8000808:	4aa2      	ldr	r2, [pc, #648]	; (8000a94 <__aeabi_dadd+0x400>)
 800080a:	087b      	lsrs	r3, r7, #1
 800080c:	400a      	ands	r2, r1
 800080e:	2101      	movs	r1, #1
 8000810:	400f      	ands	r7, r1
 8000812:	431f      	orrs	r7, r3
 8000814:	0851      	lsrs	r1, r2, #1
 8000816:	07d3      	lsls	r3, r2, #31
 8000818:	2207      	movs	r2, #7
 800081a:	431f      	orrs	r7, r3
 800081c:	403a      	ands	r2, r7
 800081e:	e799      	b.n	8000754 <__aeabi_dadd+0xc0>
 8000820:	4e9b      	ldr	r6, [pc, #620]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000822:	42b5      	cmp	r5, r6
 8000824:	d038      	beq.n	8000898 <__aeabi_dadd+0x204>
 8000826:	2680      	movs	r6, #128	; 0x80
 8000828:	0436      	lsls	r6, r6, #16
 800082a:	4337      	orrs	r7, r6
 800082c:	46b8      	mov	r8, r7
 800082e:	2b38      	cmp	r3, #56	; 0x38
 8000830:	dd00      	ble.n	8000834 <__aeabi_dadd+0x1a0>
 8000832:	e0dc      	b.n	80009ee <__aeabi_dadd+0x35a>
 8000834:	2b1f      	cmp	r3, #31
 8000836:	dc00      	bgt.n	800083a <__aeabi_dadd+0x1a6>
 8000838:	e130      	b.n	8000a9c <__aeabi_dadd+0x408>
 800083a:	001e      	movs	r6, r3
 800083c:	4647      	mov	r7, r8
 800083e:	3e20      	subs	r6, #32
 8000840:	40f7      	lsrs	r7, r6
 8000842:	46bc      	mov	ip, r7
 8000844:	2b20      	cmp	r3, #32
 8000846:	d004      	beq.n	8000852 <__aeabi_dadd+0x1be>
 8000848:	2640      	movs	r6, #64	; 0x40
 800084a:	1af3      	subs	r3, r6, r3
 800084c:	4646      	mov	r6, r8
 800084e:	409e      	lsls	r6, r3
 8000850:	4332      	orrs	r2, r6
 8000852:	0017      	movs	r7, r2
 8000854:	4663      	mov	r3, ip
 8000856:	1e7a      	subs	r2, r7, #1
 8000858:	4197      	sbcs	r7, r2
 800085a:	431f      	orrs	r7, r3
 800085c:	e0cc      	b.n	80009f8 <__aeabi_dadd+0x364>
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_dadd+0x1d0>
 8000862:	e204      	b.n	8000c6e <__aeabi_dadd+0x5da>
 8000864:	4643      	mov	r3, r8
 8000866:	4313      	orrs	r3, r2
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x1d8>
 800086a:	e159      	b.n	8000b20 <__aeabi_dadd+0x48c>
 800086c:	074b      	lsls	r3, r1, #29
 800086e:	08c0      	lsrs	r0, r0, #3
 8000870:	4318      	orrs	r0, r3
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	08c9      	lsrs	r1, r1, #3
 8000876:	031b      	lsls	r3, r3, #12
 8000878:	4219      	tst	r1, r3
 800087a:	d008      	beq.n	800088e <__aeabi_dadd+0x1fa>
 800087c:	4645      	mov	r5, r8
 800087e:	08ed      	lsrs	r5, r5, #3
 8000880:	421d      	tst	r5, r3
 8000882:	d104      	bne.n	800088e <__aeabi_dadd+0x1fa>
 8000884:	4643      	mov	r3, r8
 8000886:	08d0      	lsrs	r0, r2, #3
 8000888:	0759      	lsls	r1, r3, #29
 800088a:	4308      	orrs	r0, r1
 800088c:	0029      	movs	r1, r5
 800088e:	0f42      	lsrs	r2, r0, #29
 8000890:	00c9      	lsls	r1, r1, #3
 8000892:	4d7f      	ldr	r5, [pc, #508]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000894:	4311      	orrs	r1, r2
 8000896:	00c0      	lsls	r0, r0, #3
 8000898:	074b      	lsls	r3, r1, #29
 800089a:	08ca      	lsrs	r2, r1, #3
 800089c:	497c      	ldr	r1, [pc, #496]	; (8000a90 <__aeabi_dadd+0x3fc>)
 800089e:	08c0      	lsrs	r0, r0, #3
 80008a0:	4303      	orrs	r3, r0
 80008a2:	428d      	cmp	r5, r1
 80008a4:	d068      	beq.n	8000978 <__aeabi_dadd+0x2e4>
 80008a6:	0312      	lsls	r2, r2, #12
 80008a8:	056d      	lsls	r5, r5, #21
 80008aa:	0b12      	lsrs	r2, r2, #12
 80008ac:	0d6d      	lsrs	r5, r5, #21
 80008ae:	2100      	movs	r1, #0
 80008b0:	0312      	lsls	r2, r2, #12
 80008b2:	0018      	movs	r0, r3
 80008b4:	0b13      	lsrs	r3, r2, #12
 80008b6:	0d0a      	lsrs	r2, r1, #20
 80008b8:	0512      	lsls	r2, r2, #20
 80008ba:	431a      	orrs	r2, r3
 80008bc:	4b76      	ldr	r3, [pc, #472]	; (8000a98 <__aeabi_dadd+0x404>)
 80008be:	052d      	lsls	r5, r5, #20
 80008c0:	4013      	ands	r3, r2
 80008c2:	432b      	orrs	r3, r5
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	07e4      	lsls	r4, r4, #31
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	4323      	orrs	r3, r4
 80008cc:	0019      	movs	r1, r3
 80008ce:	bc1c      	pop	{r2, r3, r4}
 80008d0:	4690      	mov	r8, r2
 80008d2:	4699      	mov	r9, r3
 80008d4:	46a2      	mov	sl, r4
 80008d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d8:	003e      	movs	r6, r7
 80008da:	4316      	orrs	r6, r2
 80008dc:	d012      	beq.n	8000904 <__aeabi_dadd+0x270>
 80008de:	1e5e      	subs	r6, r3, #1
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x252>
 80008e4:	e100      	b.n	8000ae8 <__aeabi_dadd+0x454>
 80008e6:	1887      	adds	r7, r0, r2
 80008e8:	4287      	cmp	r7, r0
 80008ea:	4180      	sbcs	r0, r0
 80008ec:	4441      	add	r1, r8
 80008ee:	4240      	negs	r0, r0
 80008f0:	1809      	adds	r1, r1, r0
 80008f2:	2501      	movs	r5, #1
 80008f4:	020b      	lsls	r3, r1, #8
 80008f6:	d533      	bpl.n	8000960 <__aeabi_dadd+0x2cc>
 80008f8:	2502      	movs	r5, #2
 80008fa:	e785      	b.n	8000808 <__aeabi_dadd+0x174>
 80008fc:	4664      	mov	r4, ip
 80008fe:	0033      	movs	r3, r6
 8000900:	4641      	mov	r1, r8
 8000902:	0010      	movs	r0, r2
 8000904:	001d      	movs	r5, r3
 8000906:	e7c7      	b.n	8000898 <__aeabi_dadd+0x204>
 8000908:	2d00      	cmp	r5, #0
 800090a:	d000      	beq.n	800090e <__aeabi_dadd+0x27a>
 800090c:	e0da      	b.n	8000ac4 <__aeabi_dadd+0x430>
 800090e:	000c      	movs	r4, r1
 8000910:	4304      	orrs	r4, r0
 8000912:	d0f3      	beq.n	80008fc <__aeabi_dadd+0x268>
 8000914:	1c5c      	adds	r4, r3, #1
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x286>
 8000918:	e19f      	b.n	8000c5a <__aeabi_dadd+0x5c6>
 800091a:	4c5d      	ldr	r4, [pc, #372]	; (8000a90 <__aeabi_dadd+0x3fc>)
 800091c:	42a6      	cmp	r6, r4
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x28e>
 8000920:	e12f      	b.n	8000b82 <__aeabi_dadd+0x4ee>
 8000922:	43db      	mvns	r3, r3
 8000924:	2b38      	cmp	r3, #56	; 0x38
 8000926:	dd00      	ble.n	800092a <__aeabi_dadd+0x296>
 8000928:	e166      	b.n	8000bf8 <__aeabi_dadd+0x564>
 800092a:	2b1f      	cmp	r3, #31
 800092c:	dd00      	ble.n	8000930 <__aeabi_dadd+0x29c>
 800092e:	e183      	b.n	8000c38 <__aeabi_dadd+0x5a4>
 8000930:	2420      	movs	r4, #32
 8000932:	0005      	movs	r5, r0
 8000934:	1ae4      	subs	r4, r4, r3
 8000936:	000f      	movs	r7, r1
 8000938:	40dd      	lsrs	r5, r3
 800093a:	40d9      	lsrs	r1, r3
 800093c:	40a0      	lsls	r0, r4
 800093e:	4643      	mov	r3, r8
 8000940:	40a7      	lsls	r7, r4
 8000942:	1a5b      	subs	r3, r3, r1
 8000944:	1e44      	subs	r4, r0, #1
 8000946:	41a0      	sbcs	r0, r4
 8000948:	4698      	mov	r8, r3
 800094a:	432f      	orrs	r7, r5
 800094c:	4338      	orrs	r0, r7
 800094e:	1a17      	subs	r7, r2, r0
 8000950:	42ba      	cmp	r2, r7
 8000952:	4192      	sbcs	r2, r2
 8000954:	4643      	mov	r3, r8
 8000956:	4252      	negs	r2, r2
 8000958:	1a99      	subs	r1, r3, r2
 800095a:	4664      	mov	r4, ip
 800095c:	0035      	movs	r5, r6
 800095e:	e6ca      	b.n	80006f6 <__aeabi_dadd+0x62>
 8000960:	2207      	movs	r2, #7
 8000962:	403a      	ands	r2, r7
 8000964:	2a00      	cmp	r2, #0
 8000966:	d000      	beq.n	800096a <__aeabi_dadd+0x2d6>
 8000968:	e6f6      	b.n	8000758 <__aeabi_dadd+0xc4>
 800096a:	074b      	lsls	r3, r1, #29
 800096c:	08ca      	lsrs	r2, r1, #3
 800096e:	4948      	ldr	r1, [pc, #288]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000970:	08ff      	lsrs	r7, r7, #3
 8000972:	433b      	orrs	r3, r7
 8000974:	428d      	cmp	r5, r1
 8000976:	d196      	bne.n	80008a6 <__aeabi_dadd+0x212>
 8000978:	0019      	movs	r1, r3
 800097a:	4311      	orrs	r1, r2
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2ec>
 800097e:	e19e      	b.n	8000cbe <__aeabi_dadd+0x62a>
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0309      	lsls	r1, r1, #12
 8000984:	430a      	orrs	r2, r1
 8000986:	0312      	lsls	r2, r2, #12
 8000988:	0b12      	lsrs	r2, r2, #12
 800098a:	4d41      	ldr	r5, [pc, #260]	; (8000a90 <__aeabi_dadd+0x3fc>)
 800098c:	e78f      	b.n	80008ae <__aeabi_dadd+0x21a>
 800098e:	0015      	movs	r5, r2
 8000990:	2200      	movs	r2, #0
 8000992:	2300      	movs	r3, #0
 8000994:	e78b      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d000      	beq.n	800099c <__aeabi_dadd+0x308>
 800099a:	e0c7      	b.n	8000b2c <__aeabi_dadd+0x498>
 800099c:	1c6b      	adds	r3, r5, #1
 800099e:	055f      	lsls	r7, r3, #21
 80009a0:	0d7f      	lsrs	r7, r7, #21
 80009a2:	2f01      	cmp	r7, #1
 80009a4:	dc00      	bgt.n	80009a8 <__aeabi_dadd+0x314>
 80009a6:	e0f1      	b.n	8000b8c <__aeabi_dadd+0x4f8>
 80009a8:	4d39      	ldr	r5, [pc, #228]	; (8000a90 <__aeabi_dadd+0x3fc>)
 80009aa:	42ab      	cmp	r3, r5
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dadd+0x31c>
 80009ae:	e0b9      	b.n	8000b24 <__aeabi_dadd+0x490>
 80009b0:	1885      	adds	r5, r0, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	4285      	cmp	r5, r0
 80009b6:	4189      	sbcs	r1, r1
 80009b8:	4442      	add	r2, r8
 80009ba:	4249      	negs	r1, r1
 80009bc:	1851      	adds	r1, r2, r1
 80009be:	2207      	movs	r2, #7
 80009c0:	07cf      	lsls	r7, r1, #31
 80009c2:	086d      	lsrs	r5, r5, #1
 80009c4:	432f      	orrs	r7, r5
 80009c6:	0849      	lsrs	r1, r1, #1
 80009c8:	403a      	ands	r2, r7
 80009ca:	001d      	movs	r5, r3
 80009cc:	e6c2      	b.n	8000754 <__aeabi_dadd+0xc0>
 80009ce:	2207      	movs	r2, #7
 80009d0:	4930      	ldr	r1, [pc, #192]	; (8000a94 <__aeabi_dadd+0x400>)
 80009d2:	1aed      	subs	r5, r5, r3
 80009d4:	4031      	ands	r1, r6
 80009d6:	403a      	ands	r2, r7
 80009d8:	e6bc      	b.n	8000754 <__aeabi_dadd+0xc0>
 80009da:	003e      	movs	r6, r7
 80009dc:	3828      	subs	r0, #40	; 0x28
 80009de:	4086      	lsls	r6, r0
 80009e0:	2700      	movs	r7, #0
 80009e2:	e69f      	b.n	8000724 <__aeabi_dadd+0x90>
 80009e4:	0038      	movs	r0, r7
 80009e6:	f001 fbd7 	bl	8002198 <__clzsi2>
 80009ea:	3020      	adds	r0, #32
 80009ec:	e68e      	b.n	800070c <__aeabi_dadd+0x78>
 80009ee:	4643      	mov	r3, r8
 80009f0:	4313      	orrs	r3, r2
 80009f2:	001f      	movs	r7, r3
 80009f4:	1e7a      	subs	r2, r7, #1
 80009f6:	4197      	sbcs	r7, r2
 80009f8:	1bc7      	subs	r7, r0, r7
 80009fa:	42b8      	cmp	r0, r7
 80009fc:	4180      	sbcs	r0, r0
 80009fe:	4240      	negs	r0, r0
 8000a00:	1a09      	subs	r1, r1, r0
 8000a02:	e678      	b.n	80006f6 <__aeabi_dadd+0x62>
 8000a04:	000e      	movs	r6, r1
 8000a06:	003b      	movs	r3, r7
 8000a08:	4306      	orrs	r6, r0
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	2d00      	cmp	r5, #0
 8000a0e:	d161      	bne.n	8000ad4 <__aeabi_dadd+0x440>
 8000a10:	2e00      	cmp	r6, #0
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dadd+0x382>
 8000a14:	e0f4      	b.n	8000c00 <__aeabi_dadd+0x56c>
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dadd+0x388>
 8000a1a:	e11b      	b.n	8000c54 <__aeabi_dadd+0x5c0>
 8000a1c:	4664      	mov	r4, ip
 8000a1e:	0039      	movs	r1, r7
 8000a20:	0010      	movs	r0, r2
 8000a22:	e739      	b.n	8000898 <__aeabi_dadd+0x204>
 8000a24:	4f1a      	ldr	r7, [pc, #104]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000a26:	42bb      	cmp	r3, r7
 8000a28:	d07a      	beq.n	8000b20 <__aeabi_dadd+0x48c>
 8000a2a:	0033      	movs	r3, r6
 8000a2c:	e6ff      	b.n	800082e <__aeabi_dadd+0x19a>
 8000a2e:	0030      	movs	r0, r6
 8000a30:	3d1f      	subs	r5, #31
 8000a32:	40e8      	lsrs	r0, r5
 8000a34:	2b20      	cmp	r3, #32
 8000a36:	d003      	beq.n	8000a40 <__aeabi_dadd+0x3ac>
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	1acb      	subs	r3, r1, r3
 8000a3c:	409e      	lsls	r6, r3
 8000a3e:	4337      	orrs	r7, r6
 8000a40:	1e7b      	subs	r3, r7, #1
 8000a42:	419f      	sbcs	r7, r3
 8000a44:	2207      	movs	r2, #7
 8000a46:	4307      	orrs	r7, r0
 8000a48:	403a      	ands	r2, r7
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2500      	movs	r5, #0
 8000a4e:	e789      	b.n	8000964 <__aeabi_dadd+0x2d0>
 8000a50:	1a17      	subs	r7, r2, r0
 8000a52:	4643      	mov	r3, r8
 8000a54:	42ba      	cmp	r2, r7
 8000a56:	41b6      	sbcs	r6, r6
 8000a58:	1a59      	subs	r1, r3, r1
 8000a5a:	4276      	negs	r6, r6
 8000a5c:	1b8e      	subs	r6, r1, r6
 8000a5e:	4664      	mov	r4, ip
 8000a60:	e64e      	b.n	8000700 <__aeabi_dadd+0x6c>
 8000a62:	2b1f      	cmp	r3, #31
 8000a64:	dd00      	ble.n	8000a68 <__aeabi_dadd+0x3d4>
 8000a66:	e0ad      	b.n	8000bc4 <__aeabi_dadd+0x530>
 8000a68:	2620      	movs	r6, #32
 8000a6a:	4647      	mov	r7, r8
 8000a6c:	1af6      	subs	r6, r6, r3
 8000a6e:	40b7      	lsls	r7, r6
 8000a70:	46b9      	mov	r9, r7
 8000a72:	0017      	movs	r7, r2
 8000a74:	46b2      	mov	sl, r6
 8000a76:	40df      	lsrs	r7, r3
 8000a78:	464e      	mov	r6, r9
 8000a7a:	433e      	orrs	r6, r7
 8000a7c:	0037      	movs	r7, r6
 8000a7e:	4656      	mov	r6, sl
 8000a80:	40b2      	lsls	r2, r6
 8000a82:	1e56      	subs	r6, r2, #1
 8000a84:	41b2      	sbcs	r2, r6
 8000a86:	4317      	orrs	r7, r2
 8000a88:	4642      	mov	r2, r8
 8000a8a:	40da      	lsrs	r2, r3
 8000a8c:	1889      	adds	r1, r1, r2
 8000a8e:	e6ae      	b.n	80007ee <__aeabi_dadd+0x15a>
 8000a90:	000007ff 	.word	0x000007ff
 8000a94:	ff7fffff 	.word	0xff7fffff
 8000a98:	800fffff 	.word	0x800fffff
 8000a9c:	2620      	movs	r6, #32
 8000a9e:	4647      	mov	r7, r8
 8000aa0:	1af6      	subs	r6, r6, r3
 8000aa2:	40b7      	lsls	r7, r6
 8000aa4:	46b9      	mov	r9, r7
 8000aa6:	0017      	movs	r7, r2
 8000aa8:	46b2      	mov	sl, r6
 8000aaa:	40df      	lsrs	r7, r3
 8000aac:	464e      	mov	r6, r9
 8000aae:	433e      	orrs	r6, r7
 8000ab0:	0037      	movs	r7, r6
 8000ab2:	4656      	mov	r6, sl
 8000ab4:	40b2      	lsls	r2, r6
 8000ab6:	1e56      	subs	r6, r2, #1
 8000ab8:	41b2      	sbcs	r2, r6
 8000aba:	4317      	orrs	r7, r2
 8000abc:	4642      	mov	r2, r8
 8000abe:	40da      	lsrs	r2, r3
 8000ac0:	1a89      	subs	r1, r1, r2
 8000ac2:	e799      	b.n	80009f8 <__aeabi_dadd+0x364>
 8000ac4:	4c7f      	ldr	r4, [pc, #508]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000ac6:	42a6      	cmp	r6, r4
 8000ac8:	d05b      	beq.n	8000b82 <__aeabi_dadd+0x4ee>
 8000aca:	2480      	movs	r4, #128	; 0x80
 8000acc:	0424      	lsls	r4, r4, #16
 8000ace:	425b      	negs	r3, r3
 8000ad0:	4321      	orrs	r1, r4
 8000ad2:	e727      	b.n	8000924 <__aeabi_dadd+0x290>
 8000ad4:	2e00      	cmp	r6, #0
 8000ad6:	d10c      	bne.n	8000af2 <__aeabi_dadd+0x45e>
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x44a>
 8000adc:	e0cb      	b.n	8000c76 <__aeabi_dadd+0x5e2>
 8000ade:	4664      	mov	r4, ip
 8000ae0:	0039      	movs	r1, r7
 8000ae2:	0010      	movs	r0, r2
 8000ae4:	4d77      	ldr	r5, [pc, #476]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000ae6:	e6d7      	b.n	8000898 <__aeabi_dadd+0x204>
 8000ae8:	4f76      	ldr	r7, [pc, #472]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000aea:	42bb      	cmp	r3, r7
 8000aec:	d018      	beq.n	8000b20 <__aeabi_dadd+0x48c>
 8000aee:	0033      	movs	r3, r6
 8000af0:	e675      	b.n	80007de <__aeabi_dadd+0x14a>
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d014      	beq.n	8000b20 <__aeabi_dadd+0x48c>
 8000af6:	074b      	lsls	r3, r1, #29
 8000af8:	08c0      	lsrs	r0, r0, #3
 8000afa:	4318      	orrs	r0, r3
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	08c9      	lsrs	r1, r1, #3
 8000b00:	031b      	lsls	r3, r3, #12
 8000b02:	4219      	tst	r1, r3
 8000b04:	d007      	beq.n	8000b16 <__aeabi_dadd+0x482>
 8000b06:	08fc      	lsrs	r4, r7, #3
 8000b08:	421c      	tst	r4, r3
 8000b0a:	d104      	bne.n	8000b16 <__aeabi_dadd+0x482>
 8000b0c:	0779      	lsls	r1, r7, #29
 8000b0e:	08d0      	lsrs	r0, r2, #3
 8000b10:	4308      	orrs	r0, r1
 8000b12:	46e1      	mov	r9, ip
 8000b14:	0021      	movs	r1, r4
 8000b16:	464c      	mov	r4, r9
 8000b18:	0f42      	lsrs	r2, r0, #29
 8000b1a:	00c9      	lsls	r1, r1, #3
 8000b1c:	4311      	orrs	r1, r2
 8000b1e:	00c0      	lsls	r0, r0, #3
 8000b20:	4d68      	ldr	r5, [pc, #416]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000b22:	e6b9      	b.n	8000898 <__aeabi_dadd+0x204>
 8000b24:	001d      	movs	r5, r3
 8000b26:	2200      	movs	r2, #0
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e6c0      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d15b      	bne.n	8000be8 <__aeabi_dadd+0x554>
 8000b30:	000d      	movs	r5, r1
 8000b32:	4305      	orrs	r5, r0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x4a4>
 8000b36:	e6e2      	b.n	80008fe <__aeabi_dadd+0x26a>
 8000b38:	1c5d      	adds	r5, r3, #1
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x4aa>
 8000b3c:	e0b0      	b.n	8000ca0 <__aeabi_dadd+0x60c>
 8000b3e:	4d61      	ldr	r5, [pc, #388]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000b40:	42ae      	cmp	r6, r5
 8000b42:	d01f      	beq.n	8000b84 <__aeabi_dadd+0x4f0>
 8000b44:	43db      	mvns	r3, r3
 8000b46:	2b38      	cmp	r3, #56	; 0x38
 8000b48:	dc71      	bgt.n	8000c2e <__aeabi_dadd+0x59a>
 8000b4a:	2b1f      	cmp	r3, #31
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dadd+0x4bc>
 8000b4e:	e096      	b.n	8000c7e <__aeabi_dadd+0x5ea>
 8000b50:	2520      	movs	r5, #32
 8000b52:	000f      	movs	r7, r1
 8000b54:	1aed      	subs	r5, r5, r3
 8000b56:	40af      	lsls	r7, r5
 8000b58:	46b9      	mov	r9, r7
 8000b5a:	0007      	movs	r7, r0
 8000b5c:	46aa      	mov	sl, r5
 8000b5e:	40df      	lsrs	r7, r3
 8000b60:	464d      	mov	r5, r9
 8000b62:	433d      	orrs	r5, r7
 8000b64:	002f      	movs	r7, r5
 8000b66:	4655      	mov	r5, sl
 8000b68:	40a8      	lsls	r0, r5
 8000b6a:	40d9      	lsrs	r1, r3
 8000b6c:	1e45      	subs	r5, r0, #1
 8000b6e:	41a8      	sbcs	r0, r5
 8000b70:	4488      	add	r8, r1
 8000b72:	4307      	orrs	r7, r0
 8000b74:	18bf      	adds	r7, r7, r2
 8000b76:	4297      	cmp	r7, r2
 8000b78:	4192      	sbcs	r2, r2
 8000b7a:	4251      	negs	r1, r2
 8000b7c:	4441      	add	r1, r8
 8000b7e:	0035      	movs	r5, r6
 8000b80:	e63a      	b.n	80007f8 <__aeabi_dadd+0x164>
 8000b82:	4664      	mov	r4, ip
 8000b84:	0035      	movs	r5, r6
 8000b86:	4641      	mov	r1, r8
 8000b88:	0010      	movs	r0, r2
 8000b8a:	e685      	b.n	8000898 <__aeabi_dadd+0x204>
 8000b8c:	000b      	movs	r3, r1
 8000b8e:	4303      	orrs	r3, r0
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d000      	beq.n	8000b96 <__aeabi_dadd+0x502>
 8000b94:	e663      	b.n	800085e <__aeabi_dadd+0x1ca>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f5      	beq.n	8000b86 <__aeabi_dadd+0x4f2>
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x50e>
 8000ba0:	e67a      	b.n	8000898 <__aeabi_dadd+0x204>
 8000ba2:	1887      	adds	r7, r0, r2
 8000ba4:	4287      	cmp	r7, r0
 8000ba6:	4180      	sbcs	r0, r0
 8000ba8:	2207      	movs	r2, #7
 8000baa:	4441      	add	r1, r8
 8000bac:	4240      	negs	r0, r0
 8000bae:	1809      	adds	r1, r1, r0
 8000bb0:	403a      	ands	r2, r7
 8000bb2:	020b      	lsls	r3, r1, #8
 8000bb4:	d400      	bmi.n	8000bb8 <__aeabi_dadd+0x524>
 8000bb6:	e6d5      	b.n	8000964 <__aeabi_dadd+0x2d0>
 8000bb8:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <__aeabi_dadd+0x634>)
 8000bba:	3501      	adds	r5, #1
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	e5c9      	b.n	8000754 <__aeabi_dadd+0xc0>
 8000bc0:	0038      	movs	r0, r7
 8000bc2:	e669      	b.n	8000898 <__aeabi_dadd+0x204>
 8000bc4:	001e      	movs	r6, r3
 8000bc6:	4647      	mov	r7, r8
 8000bc8:	3e20      	subs	r6, #32
 8000bca:	40f7      	lsrs	r7, r6
 8000bcc:	46bc      	mov	ip, r7
 8000bce:	2b20      	cmp	r3, #32
 8000bd0:	d004      	beq.n	8000bdc <__aeabi_dadd+0x548>
 8000bd2:	2640      	movs	r6, #64	; 0x40
 8000bd4:	1af3      	subs	r3, r6, r3
 8000bd6:	4646      	mov	r6, r8
 8000bd8:	409e      	lsls	r6, r3
 8000bda:	4332      	orrs	r2, r6
 8000bdc:	0017      	movs	r7, r2
 8000bde:	4663      	mov	r3, ip
 8000be0:	1e7a      	subs	r2, r7, #1
 8000be2:	4197      	sbcs	r7, r2
 8000be4:	431f      	orrs	r7, r3
 8000be6:	e602      	b.n	80007ee <__aeabi_dadd+0x15a>
 8000be8:	4d36      	ldr	r5, [pc, #216]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000bea:	42ae      	cmp	r6, r5
 8000bec:	d0ca      	beq.n	8000b84 <__aeabi_dadd+0x4f0>
 8000bee:	2580      	movs	r5, #128	; 0x80
 8000bf0:	042d      	lsls	r5, r5, #16
 8000bf2:	425b      	negs	r3, r3
 8000bf4:	4329      	orrs	r1, r5
 8000bf6:	e7a6      	b.n	8000b46 <__aeabi_dadd+0x4b2>
 8000bf8:	4308      	orrs	r0, r1
 8000bfa:	1e41      	subs	r1, r0, #1
 8000bfc:	4188      	sbcs	r0, r1
 8000bfe:	e6a6      	b.n	800094e <__aeabi_dadd+0x2ba>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x572>
 8000c04:	e648      	b.n	8000898 <__aeabi_dadd+0x204>
 8000c06:	1a87      	subs	r7, r0, r2
 8000c08:	4643      	mov	r3, r8
 8000c0a:	42b8      	cmp	r0, r7
 8000c0c:	41b6      	sbcs	r6, r6
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	4276      	negs	r6, r6
 8000c12:	1b9e      	subs	r6, r3, r6
 8000c14:	0233      	lsls	r3, r6, #8
 8000c16:	d54b      	bpl.n	8000cb0 <__aeabi_dadd+0x61c>
 8000c18:	1a17      	subs	r7, r2, r0
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	42ba      	cmp	r2, r7
 8000c1e:	4192      	sbcs	r2, r2
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	4252      	negs	r2, r2
 8000c24:	1a89      	subs	r1, r1, r2
 8000c26:	2207      	movs	r2, #7
 8000c28:	4664      	mov	r4, ip
 8000c2a:	403a      	ands	r2, r7
 8000c2c:	e592      	b.n	8000754 <__aeabi_dadd+0xc0>
 8000c2e:	4301      	orrs	r1, r0
 8000c30:	000f      	movs	r7, r1
 8000c32:	1e79      	subs	r1, r7, #1
 8000c34:	418f      	sbcs	r7, r1
 8000c36:	e79d      	b.n	8000b74 <__aeabi_dadd+0x4e0>
 8000c38:	001c      	movs	r4, r3
 8000c3a:	000f      	movs	r7, r1
 8000c3c:	3c20      	subs	r4, #32
 8000c3e:	40e7      	lsrs	r7, r4
 8000c40:	2b20      	cmp	r3, #32
 8000c42:	d003      	beq.n	8000c4c <__aeabi_dadd+0x5b8>
 8000c44:	2440      	movs	r4, #64	; 0x40
 8000c46:	1ae3      	subs	r3, r4, r3
 8000c48:	4099      	lsls	r1, r3
 8000c4a:	4308      	orrs	r0, r1
 8000c4c:	1e41      	subs	r1, r0, #1
 8000c4e:	4188      	sbcs	r0, r1
 8000c50:	4338      	orrs	r0, r7
 8000c52:	e67c      	b.n	800094e <__aeabi_dadd+0x2ba>
 8000c54:	2200      	movs	r2, #0
 8000c56:	2400      	movs	r4, #0
 8000c58:	e625      	b.n	80008a6 <__aeabi_dadd+0x212>
 8000c5a:	1a17      	subs	r7, r2, r0
 8000c5c:	4643      	mov	r3, r8
 8000c5e:	42ba      	cmp	r2, r7
 8000c60:	4192      	sbcs	r2, r2
 8000c62:	1a59      	subs	r1, r3, r1
 8000c64:	4252      	negs	r2, r2
 8000c66:	1a89      	subs	r1, r1, r2
 8000c68:	4664      	mov	r4, ip
 8000c6a:	0035      	movs	r5, r6
 8000c6c:	e543      	b.n	80006f6 <__aeabi_dadd+0x62>
 8000c6e:	4641      	mov	r1, r8
 8000c70:	0010      	movs	r0, r2
 8000c72:	4d14      	ldr	r5, [pc, #80]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000c74:	e610      	b.n	8000898 <__aeabi_dadd+0x204>
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	2400      	movs	r4, #0
 8000c7a:	0312      	lsls	r2, r2, #12
 8000c7c:	e680      	b.n	8000980 <__aeabi_dadd+0x2ec>
 8000c7e:	001d      	movs	r5, r3
 8000c80:	000f      	movs	r7, r1
 8000c82:	3d20      	subs	r5, #32
 8000c84:	40ef      	lsrs	r7, r5
 8000c86:	46bc      	mov	ip, r7
 8000c88:	2b20      	cmp	r3, #32
 8000c8a:	d003      	beq.n	8000c94 <__aeabi_dadd+0x600>
 8000c8c:	2540      	movs	r5, #64	; 0x40
 8000c8e:	1aeb      	subs	r3, r5, r3
 8000c90:	4099      	lsls	r1, r3
 8000c92:	4308      	orrs	r0, r1
 8000c94:	0007      	movs	r7, r0
 8000c96:	4663      	mov	r3, ip
 8000c98:	1e78      	subs	r0, r7, #1
 8000c9a:	4187      	sbcs	r7, r0
 8000c9c:	431f      	orrs	r7, r3
 8000c9e:	e769      	b.n	8000b74 <__aeabi_dadd+0x4e0>
 8000ca0:	1887      	adds	r7, r0, r2
 8000ca2:	4297      	cmp	r7, r2
 8000ca4:	419b      	sbcs	r3, r3
 8000ca6:	4441      	add	r1, r8
 8000ca8:	425b      	negs	r3, r3
 8000caa:	18c9      	adds	r1, r1, r3
 8000cac:	0035      	movs	r5, r6
 8000cae:	e5a3      	b.n	80007f8 <__aeabi_dadd+0x164>
 8000cb0:	003b      	movs	r3, r7
 8000cb2:	4333      	orrs	r3, r6
 8000cb4:	d0ce      	beq.n	8000c54 <__aeabi_dadd+0x5c0>
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	0031      	movs	r1, r6
 8000cba:	403a      	ands	r2, r7
 8000cbc:	e652      	b.n	8000964 <__aeabi_dadd+0x2d0>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	e5f4      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000cc4:	000007ff 	.word	0x000007ff
 8000cc8:	ff7fffff 	.word	0xff7fffff

08000ccc <__aeabi_ddiv>:
 8000ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cce:	4657      	mov	r7, sl
 8000cd0:	46de      	mov	lr, fp
 8000cd2:	464e      	mov	r6, r9
 8000cd4:	4645      	mov	r5, r8
 8000cd6:	b5e0      	push	{r5, r6, r7, lr}
 8000cd8:	4683      	mov	fp, r0
 8000cda:	0007      	movs	r7, r0
 8000cdc:	030e      	lsls	r6, r1, #12
 8000cde:	0048      	lsls	r0, r1, #1
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	4692      	mov	sl, r2
 8000ce4:	001c      	movs	r4, r3
 8000ce6:	0b36      	lsrs	r6, r6, #12
 8000ce8:	0d40      	lsrs	r0, r0, #21
 8000cea:	0fcd      	lsrs	r5, r1, #31
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_ddiv+0x26>
 8000cf0:	e09d      	b.n	8000e2e <__aeabi_ddiv+0x162>
 8000cf2:	4b95      	ldr	r3, [pc, #596]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000cf4:	4298      	cmp	r0, r3
 8000cf6:	d039      	beq.n	8000d6c <__aeabi_ddiv+0xa0>
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	00f6      	lsls	r6, r6, #3
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	431e      	orrs	r6, r3
 8000d00:	4a92      	ldr	r2, [pc, #584]	; (8000f4c <__aeabi_ddiv+0x280>)
 8000d02:	0f7b      	lsrs	r3, r7, #29
 8000d04:	4333      	orrs	r3, r6
 8000d06:	4699      	mov	r9, r3
 8000d08:	4694      	mov	ip, r2
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	4463      	add	r3, ip
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2300      	movs	r3, #0
 8000d12:	2600      	movs	r6, #0
 8000d14:	00ff      	lsls	r7, r7, #3
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	0323      	lsls	r3, r4, #12
 8000d1a:	0b1b      	lsrs	r3, r3, #12
 8000d1c:	4698      	mov	r8, r3
 8000d1e:	0063      	lsls	r3, r4, #1
 8000d20:	0fe4      	lsrs	r4, r4, #31
 8000d22:	4652      	mov	r2, sl
 8000d24:	0d5b      	lsrs	r3, r3, #21
 8000d26:	9401      	str	r4, [sp, #4]
 8000d28:	d100      	bne.n	8000d2c <__aeabi_ddiv+0x60>
 8000d2a:	e0b3      	b.n	8000e94 <__aeabi_ddiv+0x1c8>
 8000d2c:	4986      	ldr	r1, [pc, #536]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d100      	bne.n	8000d34 <__aeabi_ddiv+0x68>
 8000d32:	e09e      	b.n	8000e72 <__aeabi_ddiv+0x1a6>
 8000d34:	4642      	mov	r2, r8
 8000d36:	00d1      	lsls	r1, r2, #3
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	0412      	lsls	r2, r2, #16
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	4651      	mov	r1, sl
 8000d40:	0f49      	lsrs	r1, r1, #29
 8000d42:	4311      	orrs	r1, r2
 8000d44:	468b      	mov	fp, r1
 8000d46:	4981      	ldr	r1, [pc, #516]	; (8000f4c <__aeabi_ddiv+0x280>)
 8000d48:	4652      	mov	r2, sl
 8000d4a:	468c      	mov	ip, r1
 8000d4c:	9900      	ldr	r1, [sp, #0]
 8000d4e:	4463      	add	r3, ip
 8000d50:	1acb      	subs	r3, r1, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	00d2      	lsls	r2, r2, #3
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	002b      	movs	r3, r5
 8000d5a:	4063      	eors	r3, r4
 8000d5c:	469a      	mov	sl, r3
 8000d5e:	2e0f      	cmp	r6, #15
 8000d60:	d900      	bls.n	8000d64 <__aeabi_ddiv+0x98>
 8000d62:	e105      	b.n	8000f70 <__aeabi_ddiv+0x2a4>
 8000d64:	4b7a      	ldr	r3, [pc, #488]	; (8000f50 <__aeabi_ddiv+0x284>)
 8000d66:	00b6      	lsls	r6, r6, #2
 8000d68:	599b      	ldr	r3, [r3, r6]
 8000d6a:	469f      	mov	pc, r3
 8000d6c:	465b      	mov	r3, fp
 8000d6e:	4333      	orrs	r3, r6
 8000d70:	4699      	mov	r9, r3
 8000d72:	d000      	beq.n	8000d76 <__aeabi_ddiv+0xaa>
 8000d74:	e0b8      	b.n	8000ee8 <__aeabi_ddiv+0x21c>
 8000d76:	2302      	movs	r3, #2
 8000d78:	2608      	movs	r6, #8
 8000d7a:	2700      	movs	r7, #0
 8000d7c:	9000      	str	r0, [sp, #0]
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	e7ca      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000d82:	46cb      	mov	fp, r9
 8000d84:	003a      	movs	r2, r7
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	9501      	str	r5, [sp, #4]
 8000d8a:	9b01      	ldr	r3, [sp, #4]
 8000d8c:	469a      	mov	sl, r3
 8000d8e:	2902      	cmp	r1, #2
 8000d90:	d027      	beq.n	8000de2 <__aeabi_ddiv+0x116>
 8000d92:	2903      	cmp	r1, #3
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0xcc>
 8000d96:	e280      	b.n	800129a <__aeabi_ddiv+0x5ce>
 8000d98:	2901      	cmp	r1, #1
 8000d9a:	d044      	beq.n	8000e26 <__aeabi_ddiv+0x15a>
 8000d9c:	496d      	ldr	r1, [pc, #436]	; (8000f54 <__aeabi_ddiv+0x288>)
 8000d9e:	9b00      	ldr	r3, [sp, #0]
 8000da0:	468c      	mov	ip, r1
 8000da2:	4463      	add	r3, ip
 8000da4:	001c      	movs	r4, r3
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	dd38      	ble.n	8000e1c <__aeabi_ddiv+0x150>
 8000daa:	0753      	lsls	r3, r2, #29
 8000dac:	d000      	beq.n	8000db0 <__aeabi_ddiv+0xe4>
 8000dae:	e213      	b.n	80011d8 <__aeabi_ddiv+0x50c>
 8000db0:	08d2      	lsrs	r2, r2, #3
 8000db2:	465b      	mov	r3, fp
 8000db4:	01db      	lsls	r3, r3, #7
 8000db6:	d509      	bpl.n	8000dcc <__aeabi_ddiv+0x100>
 8000db8:	4659      	mov	r1, fp
 8000dba:	4b67      	ldr	r3, [pc, #412]	; (8000f58 <__aeabi_ddiv+0x28c>)
 8000dbc:	4019      	ands	r1, r3
 8000dbe:	468b      	mov	fp, r1
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	00c9      	lsls	r1, r1, #3
 8000dc4:	468c      	mov	ip, r1
 8000dc6:	9b00      	ldr	r3, [sp, #0]
 8000dc8:	4463      	add	r3, ip
 8000dca:	001c      	movs	r4, r3
 8000dcc:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <__aeabi_ddiv+0x290>)
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	dc07      	bgt.n	8000de2 <__aeabi_ddiv+0x116>
 8000dd2:	465b      	mov	r3, fp
 8000dd4:	0564      	lsls	r4, r4, #21
 8000dd6:	075f      	lsls	r7, r3, #29
 8000dd8:	025b      	lsls	r3, r3, #9
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	0b1b      	lsrs	r3, r3, #12
 8000dde:	0d62      	lsrs	r2, r4, #21
 8000de0:	e002      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000de2:	2300      	movs	r3, #0
 8000de4:	2700      	movs	r7, #0
 8000de6:	4a58      	ldr	r2, [pc, #352]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000de8:	2100      	movs	r1, #0
 8000dea:	031b      	lsls	r3, r3, #12
 8000dec:	0b1c      	lsrs	r4, r3, #12
 8000dee:	0d0b      	lsrs	r3, r1, #20
 8000df0:	051b      	lsls	r3, r3, #20
 8000df2:	4323      	orrs	r3, r4
 8000df4:	0514      	lsls	r4, r2, #20
 8000df6:	4a5a      	ldr	r2, [pc, #360]	; (8000f60 <__aeabi_ddiv+0x294>)
 8000df8:	0038      	movs	r0, r7
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	431c      	orrs	r4, r3
 8000dfe:	4653      	mov	r3, sl
 8000e00:	0064      	lsls	r4, r4, #1
 8000e02:	07db      	lsls	r3, r3, #31
 8000e04:	0864      	lsrs	r4, r4, #1
 8000e06:	431c      	orrs	r4, r3
 8000e08:	0021      	movs	r1, r4
 8000e0a:	b005      	add	sp, #20
 8000e0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000e0e:	4690      	mov	r8, r2
 8000e10:	4699      	mov	r9, r3
 8000e12:	46a2      	mov	sl, r4
 8000e14:	46ab      	mov	fp, r5
 8000e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4252      	negs	r2, r2
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	1b1b      	subs	r3, r3, r4
 8000e20:	2b38      	cmp	r3, #56	; 0x38
 8000e22:	dc00      	bgt.n	8000e26 <__aeabi_ddiv+0x15a>
 8000e24:	e1ad      	b.n	8001182 <__aeabi_ddiv+0x4b6>
 8000e26:	2200      	movs	r2, #0
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2700      	movs	r7, #0
 8000e2c:	e7dc      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000e2e:	465b      	mov	r3, fp
 8000e30:	4333      	orrs	r3, r6
 8000e32:	4699      	mov	r9, r3
 8000e34:	d05e      	beq.n	8000ef4 <__aeabi_ddiv+0x228>
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x170>
 8000e3a:	e18a      	b.n	8001152 <__aeabi_ddiv+0x486>
 8000e3c:	0030      	movs	r0, r6
 8000e3e:	f001 f9ab 	bl	8002198 <__clzsi2>
 8000e42:	0003      	movs	r3, r0
 8000e44:	3b0b      	subs	r3, #11
 8000e46:	2b1c      	cmp	r3, #28
 8000e48:	dd00      	ble.n	8000e4c <__aeabi_ddiv+0x180>
 8000e4a:	e17b      	b.n	8001144 <__aeabi_ddiv+0x478>
 8000e4c:	221d      	movs	r2, #29
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	465a      	mov	r2, fp
 8000e52:	0001      	movs	r1, r0
 8000e54:	40da      	lsrs	r2, r3
 8000e56:	3908      	subs	r1, #8
 8000e58:	408e      	lsls	r6, r1
 8000e5a:	0013      	movs	r3, r2
 8000e5c:	465f      	mov	r7, fp
 8000e5e:	4333      	orrs	r3, r6
 8000e60:	4699      	mov	r9, r3
 8000e62:	408f      	lsls	r7, r1
 8000e64:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <__aeabi_ddiv+0x298>)
 8000e66:	2600      	movs	r6, #0
 8000e68:	1a1b      	subs	r3, r3, r0
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	e752      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000e72:	4641      	mov	r1, r8
 8000e74:	4653      	mov	r3, sl
 8000e76:	430b      	orrs	r3, r1
 8000e78:	493b      	ldr	r1, [pc, #236]	; (8000f68 <__aeabi_ddiv+0x29c>)
 8000e7a:	469b      	mov	fp, r3
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	9b00      	ldr	r3, [sp, #0]
 8000e80:	4463      	add	r3, ip
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	465b      	mov	r3, fp
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d13b      	bne.n	8000f02 <__aeabi_ddiv+0x236>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	2102      	movs	r1, #2
 8000e92:	e761      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000e94:	4643      	mov	r3, r8
 8000e96:	4313      	orrs	r3, r2
 8000e98:	469b      	mov	fp, r3
 8000e9a:	d037      	beq.n	8000f0c <__aeabi_ddiv+0x240>
 8000e9c:	4643      	mov	r3, r8
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x1d8>
 8000ea2:	e162      	b.n	800116a <__aeabi_ddiv+0x49e>
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	f001 f977 	bl	8002198 <__clzsi2>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	3b0b      	subs	r3, #11
 8000eae:	2b1c      	cmp	r3, #28
 8000eb0:	dd00      	ble.n	8000eb4 <__aeabi_ddiv+0x1e8>
 8000eb2:	e153      	b.n	800115c <__aeabi_ddiv+0x490>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	4641      	mov	r1, r8
 8000eb8:	3a08      	subs	r2, #8
 8000eba:	4091      	lsls	r1, r2
 8000ebc:	4688      	mov	r8, r1
 8000ebe:	211d      	movs	r1, #29
 8000ec0:	1acb      	subs	r3, r1, r3
 8000ec2:	4651      	mov	r1, sl
 8000ec4:	40d9      	lsrs	r1, r3
 8000ec6:	000b      	movs	r3, r1
 8000ec8:	4641      	mov	r1, r8
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	469b      	mov	fp, r3
 8000ece:	4653      	mov	r3, sl
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	9b00      	ldr	r3, [sp, #0]
 8000ed6:	4925      	ldr	r1, [pc, #148]	; (8000f6c <__aeabi_ddiv+0x2a0>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	4460      	add	r0, ip
 8000edc:	0003      	movs	r3, r0
 8000ede:	468c      	mov	ip, r1
 8000ee0:	4463      	add	r3, ip
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e737      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000ee8:	2303      	movs	r3, #3
 8000eea:	46b1      	mov	r9, r6
 8000eec:	9000      	str	r0, [sp, #0]
 8000eee:	260c      	movs	r6, #12
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	e711      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	2604      	movs	r6, #4
 8000efc:	2700      	movs	r7, #0
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	e70a      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000f02:	2303      	movs	r3, #3
 8000f04:	46c3      	mov	fp, r8
 8000f06:	431e      	orrs	r6, r3
 8000f08:	2103      	movs	r1, #3
 8000f0a:	e725      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	431e      	orrs	r6, r3
 8000f10:	2200      	movs	r2, #0
 8000f12:	2101      	movs	r1, #1
 8000f14:	e720      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000f16:	2300      	movs	r3, #0
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	2700      	movs	r7, #0
 8000f1e:	031b      	lsls	r3, r3, #12
 8000f20:	4a09      	ldr	r2, [pc, #36]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000f22:	e761      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	4649      	mov	r1, r9
 8000f28:	031b      	lsls	r3, r3, #12
 8000f2a:	4219      	tst	r1, r3
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_ddiv+0x264>
 8000f2e:	e0e2      	b.n	80010f6 <__aeabi_ddiv+0x42a>
 8000f30:	4659      	mov	r1, fp
 8000f32:	4219      	tst	r1, r3
 8000f34:	d000      	beq.n	8000f38 <__aeabi_ddiv+0x26c>
 8000f36:	e0de      	b.n	80010f6 <__aeabi_ddiv+0x42a>
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	031b      	lsls	r3, r3, #12
 8000f3c:	0017      	movs	r7, r2
 8000f3e:	0b1b      	lsrs	r3, r3, #12
 8000f40:	46a2      	mov	sl, r4
 8000f42:	4a01      	ldr	r2, [pc, #4]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000f44:	e750      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	000007ff 	.word	0x000007ff
 8000f4c:	fffffc01 	.word	0xfffffc01
 8000f50:	08009cbc 	.word	0x08009cbc
 8000f54:	000003ff 	.word	0x000003ff
 8000f58:	feffffff 	.word	0xfeffffff
 8000f5c:	000007fe 	.word	0x000007fe
 8000f60:	800fffff 	.word	0x800fffff
 8000f64:	fffffc0d 	.word	0xfffffc0d
 8000f68:	fffff801 	.word	0xfffff801
 8000f6c:	000003f3 	.word	0x000003f3
 8000f70:	45d9      	cmp	r9, fp
 8000f72:	d900      	bls.n	8000f76 <__aeabi_ddiv+0x2aa>
 8000f74:	e0cb      	b.n	800110e <__aeabi_ddiv+0x442>
 8000f76:	d100      	bne.n	8000f7a <__aeabi_ddiv+0x2ae>
 8000f78:	e0c6      	b.n	8001108 <__aeabi_ddiv+0x43c>
 8000f7a:	003c      	movs	r4, r7
 8000f7c:	4648      	mov	r0, r9
 8000f7e:	2700      	movs	r7, #0
 8000f80:	9b00      	ldr	r3, [sp, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	465b      	mov	r3, fp
 8000f88:	0e16      	lsrs	r6, r2, #24
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	0213      	lsls	r3, r2, #8
 8000f90:	4698      	mov	r8, r3
 8000f92:	0433      	lsls	r3, r6, #16
 8000f94:	0c1b      	lsrs	r3, r3, #16
 8000f96:	4699      	mov	r9, r3
 8000f98:	0c31      	lsrs	r1, r6, #16
 8000f9a:	9101      	str	r1, [sp, #4]
 8000f9c:	f7ff f94c 	bl	8000238 <__aeabi_uidivmod>
 8000fa0:	464a      	mov	r2, r9
 8000fa2:	4342      	muls	r2, r0
 8000fa4:	040b      	lsls	r3, r1, #16
 8000fa6:	0c21      	lsrs	r1, r4, #16
 8000fa8:	0005      	movs	r5, r0
 8000faa:	4319      	orrs	r1, r3
 8000fac:	428a      	cmp	r2, r1
 8000fae:	d907      	bls.n	8000fc0 <__aeabi_ddiv+0x2f4>
 8000fb0:	1989      	adds	r1, r1, r6
 8000fb2:	3d01      	subs	r5, #1
 8000fb4:	428e      	cmp	r6, r1
 8000fb6:	d803      	bhi.n	8000fc0 <__aeabi_ddiv+0x2f4>
 8000fb8:	428a      	cmp	r2, r1
 8000fba:	d901      	bls.n	8000fc0 <__aeabi_ddiv+0x2f4>
 8000fbc:	1e85      	subs	r5, r0, #2
 8000fbe:	1989      	adds	r1, r1, r6
 8000fc0:	1a88      	subs	r0, r1, r2
 8000fc2:	9901      	ldr	r1, [sp, #4]
 8000fc4:	f7ff f938 	bl	8000238 <__aeabi_uidivmod>
 8000fc8:	0409      	lsls	r1, r1, #16
 8000fca:	468c      	mov	ip, r1
 8000fcc:	464a      	mov	r2, r9
 8000fce:	0421      	lsls	r1, r4, #16
 8000fd0:	4664      	mov	r4, ip
 8000fd2:	4342      	muls	r2, r0
 8000fd4:	0c09      	lsrs	r1, r1, #16
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	4321      	orrs	r1, r4
 8000fda:	428a      	cmp	r2, r1
 8000fdc:	d904      	bls.n	8000fe8 <__aeabi_ddiv+0x31c>
 8000fde:	1989      	adds	r1, r1, r6
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	428e      	cmp	r6, r1
 8000fe4:	d800      	bhi.n	8000fe8 <__aeabi_ddiv+0x31c>
 8000fe6:	e0f1      	b.n	80011cc <__aeabi_ddiv+0x500>
 8000fe8:	042d      	lsls	r5, r5, #16
 8000fea:	431d      	orrs	r5, r3
 8000fec:	46ab      	mov	fp, r5
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1a89      	subs	r1, r1, r2
 8000ff2:	4642      	mov	r2, r8
 8000ff4:	0c28      	lsrs	r0, r5, #16
 8000ff6:	0412      	lsls	r2, r2, #16
 8000ff8:	0c1d      	lsrs	r5, r3, #16
 8000ffa:	465b      	mov	r3, fp
 8000ffc:	0c14      	lsrs	r4, r2, #16
 8000ffe:	0022      	movs	r2, r4
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	0c1b      	lsrs	r3, r3, #16
 8001004:	435a      	muls	r2, r3
 8001006:	9403      	str	r4, [sp, #12]
 8001008:	436b      	muls	r3, r5
 800100a:	4344      	muls	r4, r0
 800100c:	9502      	str	r5, [sp, #8]
 800100e:	4368      	muls	r0, r5
 8001010:	191b      	adds	r3, r3, r4
 8001012:	0c15      	lsrs	r5, r2, #16
 8001014:	18eb      	adds	r3, r5, r3
 8001016:	429c      	cmp	r4, r3
 8001018:	d903      	bls.n	8001022 <__aeabi_ddiv+0x356>
 800101a:	2480      	movs	r4, #128	; 0x80
 800101c:	0264      	lsls	r4, r4, #9
 800101e:	46a4      	mov	ip, r4
 8001020:	4460      	add	r0, ip
 8001022:	0c1c      	lsrs	r4, r3, #16
 8001024:	0415      	lsls	r5, r2, #16
 8001026:	041b      	lsls	r3, r3, #16
 8001028:	0c2d      	lsrs	r5, r5, #16
 800102a:	1820      	adds	r0, r4, r0
 800102c:	195d      	adds	r5, r3, r5
 800102e:	4281      	cmp	r1, r0
 8001030:	d377      	bcc.n	8001122 <__aeabi_ddiv+0x456>
 8001032:	d073      	beq.n	800111c <__aeabi_ddiv+0x450>
 8001034:	1a0c      	subs	r4, r1, r0
 8001036:	4aa2      	ldr	r2, [pc, #648]	; (80012c0 <__aeabi_ddiv+0x5f4>)
 8001038:	1b7d      	subs	r5, r7, r5
 800103a:	42af      	cmp	r7, r5
 800103c:	41bf      	sbcs	r7, r7
 800103e:	4694      	mov	ip, r2
 8001040:	9b00      	ldr	r3, [sp, #0]
 8001042:	427f      	negs	r7, r7
 8001044:	4463      	add	r3, ip
 8001046:	1be0      	subs	r0, r4, r7
 8001048:	001c      	movs	r4, r3
 800104a:	4286      	cmp	r6, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x384>
 800104e:	e0db      	b.n	8001208 <__aeabi_ddiv+0x53c>
 8001050:	9901      	ldr	r1, [sp, #4]
 8001052:	f7ff f8f1 	bl	8000238 <__aeabi_uidivmod>
 8001056:	464a      	mov	r2, r9
 8001058:	4342      	muls	r2, r0
 800105a:	040b      	lsls	r3, r1, #16
 800105c:	0c29      	lsrs	r1, r5, #16
 800105e:	0007      	movs	r7, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d907      	bls.n	8001076 <__aeabi_ddiv+0x3aa>
 8001066:	1989      	adds	r1, r1, r6
 8001068:	3f01      	subs	r7, #1
 800106a:	428e      	cmp	r6, r1
 800106c:	d803      	bhi.n	8001076 <__aeabi_ddiv+0x3aa>
 800106e:	428a      	cmp	r2, r1
 8001070:	d901      	bls.n	8001076 <__aeabi_ddiv+0x3aa>
 8001072:	1e87      	subs	r7, r0, #2
 8001074:	1989      	adds	r1, r1, r6
 8001076:	1a88      	subs	r0, r1, r2
 8001078:	9901      	ldr	r1, [sp, #4]
 800107a:	f7ff f8dd 	bl	8000238 <__aeabi_uidivmod>
 800107e:	0409      	lsls	r1, r1, #16
 8001080:	464a      	mov	r2, r9
 8001082:	4689      	mov	r9, r1
 8001084:	0429      	lsls	r1, r5, #16
 8001086:	464d      	mov	r5, r9
 8001088:	4342      	muls	r2, r0
 800108a:	0c09      	lsrs	r1, r1, #16
 800108c:	0003      	movs	r3, r0
 800108e:	4329      	orrs	r1, r5
 8001090:	428a      	cmp	r2, r1
 8001092:	d907      	bls.n	80010a4 <__aeabi_ddiv+0x3d8>
 8001094:	1989      	adds	r1, r1, r6
 8001096:	3b01      	subs	r3, #1
 8001098:	428e      	cmp	r6, r1
 800109a:	d803      	bhi.n	80010a4 <__aeabi_ddiv+0x3d8>
 800109c:	428a      	cmp	r2, r1
 800109e:	d901      	bls.n	80010a4 <__aeabi_ddiv+0x3d8>
 80010a0:	1e83      	subs	r3, r0, #2
 80010a2:	1989      	adds	r1, r1, r6
 80010a4:	043f      	lsls	r7, r7, #16
 80010a6:	1a89      	subs	r1, r1, r2
 80010a8:	003a      	movs	r2, r7
 80010aa:	9f03      	ldr	r7, [sp, #12]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	0038      	movs	r0, r7
 80010b0:	0413      	lsls	r3, r2, #16
 80010b2:	0c1b      	lsrs	r3, r3, #16
 80010b4:	4358      	muls	r0, r3
 80010b6:	4681      	mov	r9, r0
 80010b8:	9802      	ldr	r0, [sp, #8]
 80010ba:	0c15      	lsrs	r5, r2, #16
 80010bc:	436f      	muls	r7, r5
 80010be:	4343      	muls	r3, r0
 80010c0:	4345      	muls	r5, r0
 80010c2:	4648      	mov	r0, r9
 80010c4:	0c00      	lsrs	r0, r0, #16
 80010c6:	4684      	mov	ip, r0
 80010c8:	19db      	adds	r3, r3, r7
 80010ca:	4463      	add	r3, ip
 80010cc:	429f      	cmp	r7, r3
 80010ce:	d903      	bls.n	80010d8 <__aeabi_ddiv+0x40c>
 80010d0:	2080      	movs	r0, #128	; 0x80
 80010d2:	0240      	lsls	r0, r0, #9
 80010d4:	4684      	mov	ip, r0
 80010d6:	4465      	add	r5, ip
 80010d8:	4648      	mov	r0, r9
 80010da:	0c1f      	lsrs	r7, r3, #16
 80010dc:	0400      	lsls	r0, r0, #16
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	0c00      	lsrs	r0, r0, #16
 80010e2:	197d      	adds	r5, r7, r5
 80010e4:	1818      	adds	r0, r3, r0
 80010e6:	42a9      	cmp	r1, r5
 80010e8:	d200      	bcs.n	80010ec <__aeabi_ddiv+0x420>
 80010ea:	e084      	b.n	80011f6 <__aeabi_ddiv+0x52a>
 80010ec:	d100      	bne.n	80010f0 <__aeabi_ddiv+0x424>
 80010ee:	e07f      	b.n	80011f0 <__aeabi_ddiv+0x524>
 80010f0:	2301      	movs	r3, #1
 80010f2:	431a      	orrs	r2, r3
 80010f4:	e657      	b.n	8000da6 <__aeabi_ddiv+0xda>
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	464a      	mov	r2, r9
 80010fa:	031b      	lsls	r3, r3, #12
 80010fc:	4313      	orrs	r3, r2
 80010fe:	031b      	lsls	r3, r3, #12
 8001100:	0b1b      	lsrs	r3, r3, #12
 8001102:	46aa      	mov	sl, r5
 8001104:	4a6f      	ldr	r2, [pc, #444]	; (80012c4 <__aeabi_ddiv+0x5f8>)
 8001106:	e66f      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8001108:	42ba      	cmp	r2, r7
 800110a:	d900      	bls.n	800110e <__aeabi_ddiv+0x442>
 800110c:	e735      	b.n	8000f7a <__aeabi_ddiv+0x2ae>
 800110e:	464b      	mov	r3, r9
 8001110:	07dc      	lsls	r4, r3, #31
 8001112:	0858      	lsrs	r0, r3, #1
 8001114:	087b      	lsrs	r3, r7, #1
 8001116:	431c      	orrs	r4, r3
 8001118:	07ff      	lsls	r7, r7, #31
 800111a:	e734      	b.n	8000f86 <__aeabi_ddiv+0x2ba>
 800111c:	2400      	movs	r4, #0
 800111e:	42af      	cmp	r7, r5
 8001120:	d289      	bcs.n	8001036 <__aeabi_ddiv+0x36a>
 8001122:	4447      	add	r7, r8
 8001124:	4547      	cmp	r7, r8
 8001126:	41a4      	sbcs	r4, r4
 8001128:	465b      	mov	r3, fp
 800112a:	4264      	negs	r4, r4
 800112c:	19a4      	adds	r4, r4, r6
 800112e:	1864      	adds	r4, r4, r1
 8001130:	3b01      	subs	r3, #1
 8001132:	42a6      	cmp	r6, r4
 8001134:	d21e      	bcs.n	8001174 <__aeabi_ddiv+0x4a8>
 8001136:	42a0      	cmp	r0, r4
 8001138:	d86d      	bhi.n	8001216 <__aeabi_ddiv+0x54a>
 800113a:	d100      	bne.n	800113e <__aeabi_ddiv+0x472>
 800113c:	e0b6      	b.n	80012ac <__aeabi_ddiv+0x5e0>
 800113e:	1a24      	subs	r4, r4, r0
 8001140:	469b      	mov	fp, r3
 8001142:	e778      	b.n	8001036 <__aeabi_ddiv+0x36a>
 8001144:	0003      	movs	r3, r0
 8001146:	465a      	mov	r2, fp
 8001148:	3b28      	subs	r3, #40	; 0x28
 800114a:	409a      	lsls	r2, r3
 800114c:	2700      	movs	r7, #0
 800114e:	4691      	mov	r9, r2
 8001150:	e688      	b.n	8000e64 <__aeabi_ddiv+0x198>
 8001152:	4658      	mov	r0, fp
 8001154:	f001 f820 	bl	8002198 <__clzsi2>
 8001158:	3020      	adds	r0, #32
 800115a:	e672      	b.n	8000e42 <__aeabi_ddiv+0x176>
 800115c:	0003      	movs	r3, r0
 800115e:	4652      	mov	r2, sl
 8001160:	3b28      	subs	r3, #40	; 0x28
 8001162:	409a      	lsls	r2, r3
 8001164:	4693      	mov	fp, r2
 8001166:	2200      	movs	r2, #0
 8001168:	e6b4      	b.n	8000ed4 <__aeabi_ddiv+0x208>
 800116a:	4650      	mov	r0, sl
 800116c:	f001 f814 	bl	8002198 <__clzsi2>
 8001170:	3020      	adds	r0, #32
 8001172:	e69a      	b.n	8000eaa <__aeabi_ddiv+0x1de>
 8001174:	42a6      	cmp	r6, r4
 8001176:	d1e2      	bne.n	800113e <__aeabi_ddiv+0x472>
 8001178:	45b8      	cmp	r8, r7
 800117a:	d9dc      	bls.n	8001136 <__aeabi_ddiv+0x46a>
 800117c:	1a34      	subs	r4, r6, r0
 800117e:	469b      	mov	fp, r3
 8001180:	e759      	b.n	8001036 <__aeabi_ddiv+0x36a>
 8001182:	2b1f      	cmp	r3, #31
 8001184:	dc65      	bgt.n	8001252 <__aeabi_ddiv+0x586>
 8001186:	4c50      	ldr	r4, [pc, #320]	; (80012c8 <__aeabi_ddiv+0x5fc>)
 8001188:	9900      	ldr	r1, [sp, #0]
 800118a:	46a4      	mov	ip, r4
 800118c:	465c      	mov	r4, fp
 800118e:	4461      	add	r1, ip
 8001190:	0008      	movs	r0, r1
 8001192:	408c      	lsls	r4, r1
 8001194:	0011      	movs	r1, r2
 8001196:	4082      	lsls	r2, r0
 8001198:	40d9      	lsrs	r1, r3
 800119a:	1e50      	subs	r0, r2, #1
 800119c:	4182      	sbcs	r2, r0
 800119e:	430c      	orrs	r4, r1
 80011a0:	4314      	orrs	r4, r2
 80011a2:	465a      	mov	r2, fp
 80011a4:	40da      	lsrs	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	0762      	lsls	r2, r4, #29
 80011aa:	d009      	beq.n	80011c0 <__aeabi_ddiv+0x4f4>
 80011ac:	220f      	movs	r2, #15
 80011ae:	4022      	ands	r2, r4
 80011b0:	2a04      	cmp	r2, #4
 80011b2:	d005      	beq.n	80011c0 <__aeabi_ddiv+0x4f4>
 80011b4:	0022      	movs	r2, r4
 80011b6:	1d14      	adds	r4, r2, #4
 80011b8:	4294      	cmp	r4, r2
 80011ba:	4189      	sbcs	r1, r1
 80011bc:	4249      	negs	r1, r1
 80011be:	185b      	adds	r3, r3, r1
 80011c0:	021a      	lsls	r2, r3, #8
 80011c2:	d562      	bpl.n	800128a <__aeabi_ddiv+0x5be>
 80011c4:	2201      	movs	r2, #1
 80011c6:	2300      	movs	r3, #0
 80011c8:	2700      	movs	r7, #0
 80011ca:	e60d      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 80011cc:	428a      	cmp	r2, r1
 80011ce:	d800      	bhi.n	80011d2 <__aeabi_ddiv+0x506>
 80011d0:	e70a      	b.n	8000fe8 <__aeabi_ddiv+0x31c>
 80011d2:	1e83      	subs	r3, r0, #2
 80011d4:	1989      	adds	r1, r1, r6
 80011d6:	e707      	b.n	8000fe8 <__aeabi_ddiv+0x31c>
 80011d8:	230f      	movs	r3, #15
 80011da:	4013      	ands	r3, r2
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0x516>
 80011e0:	e5e6      	b.n	8000db0 <__aeabi_ddiv+0xe4>
 80011e2:	1d17      	adds	r7, r2, #4
 80011e4:	4297      	cmp	r7, r2
 80011e6:	4192      	sbcs	r2, r2
 80011e8:	4253      	negs	r3, r2
 80011ea:	449b      	add	fp, r3
 80011ec:	08fa      	lsrs	r2, r7, #3
 80011ee:	e5e0      	b.n	8000db2 <__aeabi_ddiv+0xe6>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_ddiv+0x52a>
 80011f4:	e5d7      	b.n	8000da6 <__aeabi_ddiv+0xda>
 80011f6:	1871      	adds	r1, r6, r1
 80011f8:	1e53      	subs	r3, r2, #1
 80011fa:	42b1      	cmp	r1, r6
 80011fc:	d327      	bcc.n	800124e <__aeabi_ddiv+0x582>
 80011fe:	42a9      	cmp	r1, r5
 8001200:	d315      	bcc.n	800122e <__aeabi_ddiv+0x562>
 8001202:	d058      	beq.n	80012b6 <__aeabi_ddiv+0x5ea>
 8001204:	001a      	movs	r2, r3
 8001206:	e773      	b.n	80010f0 <__aeabi_ddiv+0x424>
 8001208:	2b00      	cmp	r3, #0
 800120a:	dc00      	bgt.n	800120e <__aeabi_ddiv+0x542>
 800120c:	e604      	b.n	8000e18 <__aeabi_ddiv+0x14c>
 800120e:	2301      	movs	r3, #1
 8001210:	2200      	movs	r2, #0
 8001212:	449b      	add	fp, r3
 8001214:	e5cd      	b.n	8000db2 <__aeabi_ddiv+0xe6>
 8001216:	2302      	movs	r3, #2
 8001218:	4447      	add	r7, r8
 800121a:	4547      	cmp	r7, r8
 800121c:	4189      	sbcs	r1, r1
 800121e:	425b      	negs	r3, r3
 8001220:	469c      	mov	ip, r3
 8001222:	4249      	negs	r1, r1
 8001224:	1989      	adds	r1, r1, r6
 8001226:	190c      	adds	r4, r1, r4
 8001228:	44e3      	add	fp, ip
 800122a:	1a24      	subs	r4, r4, r0
 800122c:	e703      	b.n	8001036 <__aeabi_ddiv+0x36a>
 800122e:	4643      	mov	r3, r8
 8001230:	005f      	lsls	r7, r3, #1
 8001232:	4547      	cmp	r7, r8
 8001234:	419b      	sbcs	r3, r3
 8001236:	46b8      	mov	r8, r7
 8001238:	425b      	negs	r3, r3
 800123a:	199e      	adds	r6, r3, r6
 800123c:	3a02      	subs	r2, #2
 800123e:	1989      	adds	r1, r1, r6
 8001240:	42a9      	cmp	r1, r5
 8001242:	d000      	beq.n	8001246 <__aeabi_ddiv+0x57a>
 8001244:	e754      	b.n	80010f0 <__aeabi_ddiv+0x424>
 8001246:	4540      	cmp	r0, r8
 8001248:	d000      	beq.n	800124c <__aeabi_ddiv+0x580>
 800124a:	e751      	b.n	80010f0 <__aeabi_ddiv+0x424>
 800124c:	e5ab      	b.n	8000da6 <__aeabi_ddiv+0xda>
 800124e:	001a      	movs	r2, r3
 8001250:	e7f6      	b.n	8001240 <__aeabi_ddiv+0x574>
 8001252:	211f      	movs	r1, #31
 8001254:	465f      	mov	r7, fp
 8001256:	4249      	negs	r1, r1
 8001258:	1b0c      	subs	r4, r1, r4
 800125a:	40e7      	lsrs	r7, r4
 800125c:	2b20      	cmp	r3, #32
 800125e:	d007      	beq.n	8001270 <__aeabi_ddiv+0x5a4>
 8001260:	491a      	ldr	r1, [pc, #104]	; (80012cc <__aeabi_ddiv+0x600>)
 8001262:	9b00      	ldr	r3, [sp, #0]
 8001264:	468c      	mov	ip, r1
 8001266:	4463      	add	r3, ip
 8001268:	0018      	movs	r0, r3
 800126a:	465b      	mov	r3, fp
 800126c:	4083      	lsls	r3, r0
 800126e:	431a      	orrs	r2, r3
 8001270:	1e50      	subs	r0, r2, #1
 8001272:	4182      	sbcs	r2, r0
 8001274:	433a      	orrs	r2, r7
 8001276:	2707      	movs	r7, #7
 8001278:	2300      	movs	r3, #0
 800127a:	4017      	ands	r7, r2
 800127c:	d009      	beq.n	8001292 <__aeabi_ddiv+0x5c6>
 800127e:	210f      	movs	r1, #15
 8001280:	2300      	movs	r3, #0
 8001282:	4011      	ands	r1, r2
 8001284:	0014      	movs	r4, r2
 8001286:	2904      	cmp	r1, #4
 8001288:	d195      	bne.n	80011b6 <__aeabi_ddiv+0x4ea>
 800128a:	0022      	movs	r2, r4
 800128c:	075f      	lsls	r7, r3, #29
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	0b1b      	lsrs	r3, r3, #12
 8001292:	08d2      	lsrs	r2, r2, #3
 8001294:	4317      	orrs	r7, r2
 8001296:	2200      	movs	r2, #0
 8001298:	e5a6      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	4659      	mov	r1, fp
 800129e:	031b      	lsls	r3, r3, #12
 80012a0:	430b      	orrs	r3, r1
 80012a2:	031b      	lsls	r3, r3, #12
 80012a4:	0017      	movs	r7, r2
 80012a6:	0b1b      	lsrs	r3, r3, #12
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <__aeabi_ddiv+0x5f8>)
 80012aa:	e59d      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 80012ac:	42bd      	cmp	r5, r7
 80012ae:	d8b2      	bhi.n	8001216 <__aeabi_ddiv+0x54a>
 80012b0:	469b      	mov	fp, r3
 80012b2:	2400      	movs	r4, #0
 80012b4:	e6bf      	b.n	8001036 <__aeabi_ddiv+0x36a>
 80012b6:	4580      	cmp	r8, r0
 80012b8:	d3b9      	bcc.n	800122e <__aeabi_ddiv+0x562>
 80012ba:	001a      	movs	r2, r3
 80012bc:	e7c3      	b.n	8001246 <__aeabi_ddiv+0x57a>
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	000003ff 	.word	0x000003ff
 80012c4:	000007ff 	.word	0x000007ff
 80012c8:	0000041e 	.word	0x0000041e
 80012cc:	0000043e 	.word	0x0000043e

080012d0 <__eqdf2>:
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d2:	464f      	mov	r7, r9
 80012d4:	4646      	mov	r6, r8
 80012d6:	46d6      	mov	lr, sl
 80012d8:	4684      	mov	ip, r0
 80012da:	b5c0      	push	{r6, r7, lr}
 80012dc:	4680      	mov	r8, r0
 80012de:	4e19      	ldr	r6, [pc, #100]	; (8001344 <__eqdf2+0x74>)
 80012e0:	0318      	lsls	r0, r3, #12
 80012e2:	030f      	lsls	r7, r1, #12
 80012e4:	004d      	lsls	r5, r1, #1
 80012e6:	0b00      	lsrs	r0, r0, #12
 80012e8:	005c      	lsls	r4, r3, #1
 80012ea:	4682      	mov	sl, r0
 80012ec:	0b3f      	lsrs	r7, r7, #12
 80012ee:	0d6d      	lsrs	r5, r5, #21
 80012f0:	0fc9      	lsrs	r1, r1, #31
 80012f2:	4691      	mov	r9, r2
 80012f4:	0d64      	lsrs	r4, r4, #21
 80012f6:	0fdb      	lsrs	r3, r3, #31
 80012f8:	2001      	movs	r0, #1
 80012fa:	42b5      	cmp	r5, r6
 80012fc:	d00a      	beq.n	8001314 <__eqdf2+0x44>
 80012fe:	42b4      	cmp	r4, r6
 8001300:	d003      	beq.n	800130a <__eqdf2+0x3a>
 8001302:	42a5      	cmp	r5, r4
 8001304:	d101      	bne.n	800130a <__eqdf2+0x3a>
 8001306:	4557      	cmp	r7, sl
 8001308:	d00c      	beq.n	8001324 <__eqdf2+0x54>
 800130a:	bc1c      	pop	{r2, r3, r4}
 800130c:	4690      	mov	r8, r2
 800130e:	4699      	mov	r9, r3
 8001310:	46a2      	mov	sl, r4
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	4666      	mov	r6, ip
 8001316:	433e      	orrs	r6, r7
 8001318:	d1f7      	bne.n	800130a <__eqdf2+0x3a>
 800131a:	42ac      	cmp	r4, r5
 800131c:	d1f5      	bne.n	800130a <__eqdf2+0x3a>
 800131e:	4654      	mov	r4, sl
 8001320:	4314      	orrs	r4, r2
 8001322:	d1f2      	bne.n	800130a <__eqdf2+0x3a>
 8001324:	2001      	movs	r0, #1
 8001326:	45c8      	cmp	r8, r9
 8001328:	d1ef      	bne.n	800130a <__eqdf2+0x3a>
 800132a:	4299      	cmp	r1, r3
 800132c:	d007      	beq.n	800133e <__eqdf2+0x6e>
 800132e:	2d00      	cmp	r5, #0
 8001330:	d1eb      	bne.n	800130a <__eqdf2+0x3a>
 8001332:	4663      	mov	r3, ip
 8001334:	431f      	orrs	r7, r3
 8001336:	0038      	movs	r0, r7
 8001338:	1e47      	subs	r7, r0, #1
 800133a:	41b8      	sbcs	r0, r7
 800133c:	e7e5      	b.n	800130a <__eqdf2+0x3a>
 800133e:	2000      	movs	r0, #0
 8001340:	e7e3      	b.n	800130a <__eqdf2+0x3a>
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	000007ff 	.word	0x000007ff

08001348 <__gedf2>:
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134a:	464f      	mov	r7, r9
 800134c:	4646      	mov	r6, r8
 800134e:	46d6      	mov	lr, sl
 8001350:	004d      	lsls	r5, r1, #1
 8001352:	b5c0      	push	{r6, r7, lr}
 8001354:	030e      	lsls	r6, r1, #12
 8001356:	0fc9      	lsrs	r1, r1, #31
 8001358:	468a      	mov	sl, r1
 800135a:	492c      	ldr	r1, [pc, #176]	; (800140c <__gedf2+0xc4>)
 800135c:	031f      	lsls	r7, r3, #12
 800135e:	005c      	lsls	r4, r3, #1
 8001360:	4680      	mov	r8, r0
 8001362:	0b36      	lsrs	r6, r6, #12
 8001364:	0d6d      	lsrs	r5, r5, #21
 8001366:	4691      	mov	r9, r2
 8001368:	0b3f      	lsrs	r7, r7, #12
 800136a:	0d64      	lsrs	r4, r4, #21
 800136c:	0fdb      	lsrs	r3, r3, #31
 800136e:	428d      	cmp	r5, r1
 8001370:	d01e      	beq.n	80013b0 <__gedf2+0x68>
 8001372:	428c      	cmp	r4, r1
 8001374:	d016      	beq.n	80013a4 <__gedf2+0x5c>
 8001376:	2d00      	cmp	r5, #0
 8001378:	d11e      	bne.n	80013b8 <__gedf2+0x70>
 800137a:	4330      	orrs	r0, r6
 800137c:	4684      	mov	ip, r0
 800137e:	2c00      	cmp	r4, #0
 8001380:	d101      	bne.n	8001386 <__gedf2+0x3e>
 8001382:	433a      	orrs	r2, r7
 8001384:	d023      	beq.n	80013ce <__gedf2+0x86>
 8001386:	4662      	mov	r2, ip
 8001388:	2a00      	cmp	r2, #0
 800138a:	d01a      	beq.n	80013c2 <__gedf2+0x7a>
 800138c:	459a      	cmp	sl, r3
 800138e:	d029      	beq.n	80013e4 <__gedf2+0x9c>
 8001390:	4651      	mov	r1, sl
 8001392:	2002      	movs	r0, #2
 8001394:	3901      	subs	r1, #1
 8001396:	4008      	ands	r0, r1
 8001398:	3801      	subs	r0, #1
 800139a:	bc1c      	pop	{r2, r3, r4}
 800139c:	4690      	mov	r8, r2
 800139e:	4699      	mov	r9, r3
 80013a0:	46a2      	mov	sl, r4
 80013a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a4:	0039      	movs	r1, r7
 80013a6:	4311      	orrs	r1, r2
 80013a8:	d0e5      	beq.n	8001376 <__gedf2+0x2e>
 80013aa:	2002      	movs	r0, #2
 80013ac:	4240      	negs	r0, r0
 80013ae:	e7f4      	b.n	800139a <__gedf2+0x52>
 80013b0:	4330      	orrs	r0, r6
 80013b2:	d1fa      	bne.n	80013aa <__gedf2+0x62>
 80013b4:	42ac      	cmp	r4, r5
 80013b6:	d00f      	beq.n	80013d8 <__gedf2+0x90>
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d10f      	bne.n	80013dc <__gedf2+0x94>
 80013bc:	433a      	orrs	r2, r7
 80013be:	d0e7      	beq.n	8001390 <__gedf2+0x48>
 80013c0:	e00c      	b.n	80013dc <__gedf2+0x94>
 80013c2:	2201      	movs	r2, #1
 80013c4:	3b01      	subs	r3, #1
 80013c6:	4393      	bics	r3, r2
 80013c8:	0018      	movs	r0, r3
 80013ca:	3001      	adds	r0, #1
 80013cc:	e7e5      	b.n	800139a <__gedf2+0x52>
 80013ce:	4663      	mov	r3, ip
 80013d0:	2000      	movs	r0, #0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0e1      	beq.n	800139a <__gedf2+0x52>
 80013d6:	e7db      	b.n	8001390 <__gedf2+0x48>
 80013d8:	433a      	orrs	r2, r7
 80013da:	d1e6      	bne.n	80013aa <__gedf2+0x62>
 80013dc:	459a      	cmp	sl, r3
 80013de:	d1d7      	bne.n	8001390 <__gedf2+0x48>
 80013e0:	42a5      	cmp	r5, r4
 80013e2:	dcd5      	bgt.n	8001390 <__gedf2+0x48>
 80013e4:	42a5      	cmp	r5, r4
 80013e6:	db05      	blt.n	80013f4 <__gedf2+0xac>
 80013e8:	42be      	cmp	r6, r7
 80013ea:	d8d1      	bhi.n	8001390 <__gedf2+0x48>
 80013ec:	d008      	beq.n	8001400 <__gedf2+0xb8>
 80013ee:	2000      	movs	r0, #0
 80013f0:	42be      	cmp	r6, r7
 80013f2:	d2d2      	bcs.n	800139a <__gedf2+0x52>
 80013f4:	4650      	mov	r0, sl
 80013f6:	2301      	movs	r3, #1
 80013f8:	3801      	subs	r0, #1
 80013fa:	4398      	bics	r0, r3
 80013fc:	3001      	adds	r0, #1
 80013fe:	e7cc      	b.n	800139a <__gedf2+0x52>
 8001400:	45c8      	cmp	r8, r9
 8001402:	d8c5      	bhi.n	8001390 <__gedf2+0x48>
 8001404:	2000      	movs	r0, #0
 8001406:	45c8      	cmp	r8, r9
 8001408:	d3f4      	bcc.n	80013f4 <__gedf2+0xac>
 800140a:	e7c6      	b.n	800139a <__gedf2+0x52>
 800140c:	000007ff 	.word	0x000007ff

08001410 <__ledf2>:
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	464f      	mov	r7, r9
 8001414:	4646      	mov	r6, r8
 8001416:	46d6      	mov	lr, sl
 8001418:	004d      	lsls	r5, r1, #1
 800141a:	b5c0      	push	{r6, r7, lr}
 800141c:	030e      	lsls	r6, r1, #12
 800141e:	0fc9      	lsrs	r1, r1, #31
 8001420:	468a      	mov	sl, r1
 8001422:	492e      	ldr	r1, [pc, #184]	; (80014dc <__ledf2+0xcc>)
 8001424:	031f      	lsls	r7, r3, #12
 8001426:	005c      	lsls	r4, r3, #1
 8001428:	4680      	mov	r8, r0
 800142a:	0b36      	lsrs	r6, r6, #12
 800142c:	0d6d      	lsrs	r5, r5, #21
 800142e:	4691      	mov	r9, r2
 8001430:	0b3f      	lsrs	r7, r7, #12
 8001432:	0d64      	lsrs	r4, r4, #21
 8001434:	0fdb      	lsrs	r3, r3, #31
 8001436:	428d      	cmp	r5, r1
 8001438:	d018      	beq.n	800146c <__ledf2+0x5c>
 800143a:	428c      	cmp	r4, r1
 800143c:	d011      	beq.n	8001462 <__ledf2+0x52>
 800143e:	2d00      	cmp	r5, #0
 8001440:	d118      	bne.n	8001474 <__ledf2+0x64>
 8001442:	4330      	orrs	r0, r6
 8001444:	4684      	mov	ip, r0
 8001446:	2c00      	cmp	r4, #0
 8001448:	d11e      	bne.n	8001488 <__ledf2+0x78>
 800144a:	433a      	orrs	r2, r7
 800144c:	d11c      	bne.n	8001488 <__ledf2+0x78>
 800144e:	4663      	mov	r3, ip
 8001450:	2000      	movs	r0, #0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d030      	beq.n	80014b8 <__ledf2+0xa8>
 8001456:	4651      	mov	r1, sl
 8001458:	2002      	movs	r0, #2
 800145a:	3901      	subs	r1, #1
 800145c:	4008      	ands	r0, r1
 800145e:	3801      	subs	r0, #1
 8001460:	e02a      	b.n	80014b8 <__ledf2+0xa8>
 8001462:	0039      	movs	r1, r7
 8001464:	4311      	orrs	r1, r2
 8001466:	d0ea      	beq.n	800143e <__ledf2+0x2e>
 8001468:	2002      	movs	r0, #2
 800146a:	e025      	b.n	80014b8 <__ledf2+0xa8>
 800146c:	4330      	orrs	r0, r6
 800146e:	d1fb      	bne.n	8001468 <__ledf2+0x58>
 8001470:	42ac      	cmp	r4, r5
 8001472:	d026      	beq.n	80014c2 <__ledf2+0xb2>
 8001474:	2c00      	cmp	r4, #0
 8001476:	d126      	bne.n	80014c6 <__ledf2+0xb6>
 8001478:	433a      	orrs	r2, r7
 800147a:	d124      	bne.n	80014c6 <__ledf2+0xb6>
 800147c:	4651      	mov	r1, sl
 800147e:	2002      	movs	r0, #2
 8001480:	3901      	subs	r1, #1
 8001482:	4008      	ands	r0, r1
 8001484:	3801      	subs	r0, #1
 8001486:	e017      	b.n	80014b8 <__ledf2+0xa8>
 8001488:	4662      	mov	r2, ip
 800148a:	2a00      	cmp	r2, #0
 800148c:	d00f      	beq.n	80014ae <__ledf2+0x9e>
 800148e:	459a      	cmp	sl, r3
 8001490:	d1e1      	bne.n	8001456 <__ledf2+0x46>
 8001492:	42a5      	cmp	r5, r4
 8001494:	db05      	blt.n	80014a2 <__ledf2+0x92>
 8001496:	42be      	cmp	r6, r7
 8001498:	d8dd      	bhi.n	8001456 <__ledf2+0x46>
 800149a:	d019      	beq.n	80014d0 <__ledf2+0xc0>
 800149c:	2000      	movs	r0, #0
 800149e:	42be      	cmp	r6, r7
 80014a0:	d20a      	bcs.n	80014b8 <__ledf2+0xa8>
 80014a2:	4650      	mov	r0, sl
 80014a4:	2301      	movs	r3, #1
 80014a6:	3801      	subs	r0, #1
 80014a8:	4398      	bics	r0, r3
 80014aa:	3001      	adds	r0, #1
 80014ac:	e004      	b.n	80014b8 <__ledf2+0xa8>
 80014ae:	2201      	movs	r2, #1
 80014b0:	3b01      	subs	r3, #1
 80014b2:	4393      	bics	r3, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	3001      	adds	r0, #1
 80014b8:	bc1c      	pop	{r2, r3, r4}
 80014ba:	4690      	mov	r8, r2
 80014bc:	4699      	mov	r9, r3
 80014be:	46a2      	mov	sl, r4
 80014c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c2:	433a      	orrs	r2, r7
 80014c4:	d1d0      	bne.n	8001468 <__ledf2+0x58>
 80014c6:	459a      	cmp	sl, r3
 80014c8:	d1c5      	bne.n	8001456 <__ledf2+0x46>
 80014ca:	42a5      	cmp	r5, r4
 80014cc:	dcc3      	bgt.n	8001456 <__ledf2+0x46>
 80014ce:	e7e0      	b.n	8001492 <__ledf2+0x82>
 80014d0:	45c8      	cmp	r8, r9
 80014d2:	d8c0      	bhi.n	8001456 <__ledf2+0x46>
 80014d4:	2000      	movs	r0, #0
 80014d6:	45c8      	cmp	r8, r9
 80014d8:	d3e3      	bcc.n	80014a2 <__ledf2+0x92>
 80014da:	e7ed      	b.n	80014b8 <__ledf2+0xa8>
 80014dc:	000007ff 	.word	0x000007ff

080014e0 <__aeabi_dmul>:
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	4657      	mov	r7, sl
 80014e4:	46de      	mov	lr, fp
 80014e6:	464e      	mov	r6, r9
 80014e8:	4645      	mov	r5, r8
 80014ea:	b5e0      	push	{r5, r6, r7, lr}
 80014ec:	4683      	mov	fp, r0
 80014ee:	0006      	movs	r6, r0
 80014f0:	030f      	lsls	r7, r1, #12
 80014f2:	0048      	lsls	r0, r1, #1
 80014f4:	b087      	sub	sp, #28
 80014f6:	4692      	mov	sl, r2
 80014f8:	001d      	movs	r5, r3
 80014fa:	0b3f      	lsrs	r7, r7, #12
 80014fc:	0d40      	lsrs	r0, r0, #21
 80014fe:	0fcc      	lsrs	r4, r1, #31
 8001500:	2800      	cmp	r0, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_dmul+0x26>
 8001504:	e06f      	b.n	80015e6 <__aeabi_dmul+0x106>
 8001506:	4bde      	ldr	r3, [pc, #888]	; (8001880 <__aeabi_dmul+0x3a0>)
 8001508:	4298      	cmp	r0, r3
 800150a:	d038      	beq.n	800157e <__aeabi_dmul+0x9e>
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	00ff      	lsls	r7, r7, #3
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	431f      	orrs	r7, r3
 8001514:	0f73      	lsrs	r3, r6, #29
 8001516:	433b      	orrs	r3, r7
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	4bda      	ldr	r3, [pc, #872]	; (8001884 <__aeabi_dmul+0x3a4>)
 800151c:	2700      	movs	r7, #0
 800151e:	4699      	mov	r9, r3
 8001520:	2300      	movs	r3, #0
 8001522:	469b      	mov	fp, r3
 8001524:	00f6      	lsls	r6, r6, #3
 8001526:	4481      	add	r9, r0
 8001528:	032b      	lsls	r3, r5, #12
 800152a:	0069      	lsls	r1, r5, #1
 800152c:	0b1b      	lsrs	r3, r3, #12
 800152e:	4652      	mov	r2, sl
 8001530:	4698      	mov	r8, r3
 8001532:	0d49      	lsrs	r1, r1, #21
 8001534:	0fed      	lsrs	r5, r5, #31
 8001536:	2900      	cmp	r1, #0
 8001538:	d100      	bne.n	800153c <__aeabi_dmul+0x5c>
 800153a:	e085      	b.n	8001648 <__aeabi_dmul+0x168>
 800153c:	4bd0      	ldr	r3, [pc, #832]	; (8001880 <__aeabi_dmul+0x3a0>)
 800153e:	4299      	cmp	r1, r3
 8001540:	d100      	bne.n	8001544 <__aeabi_dmul+0x64>
 8001542:	e073      	b.n	800162c <__aeabi_dmul+0x14c>
 8001544:	4643      	mov	r3, r8
 8001546:	00da      	lsls	r2, r3, #3
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	041b      	lsls	r3, r3, #16
 800154c:	4313      	orrs	r3, r2
 800154e:	4652      	mov	r2, sl
 8001550:	48cc      	ldr	r0, [pc, #816]	; (8001884 <__aeabi_dmul+0x3a4>)
 8001552:	0f52      	lsrs	r2, r2, #29
 8001554:	4684      	mov	ip, r0
 8001556:	4313      	orrs	r3, r2
 8001558:	4652      	mov	r2, sl
 800155a:	2000      	movs	r0, #0
 800155c:	4461      	add	r1, ip
 800155e:	00d2      	lsls	r2, r2, #3
 8001560:	4489      	add	r9, r1
 8001562:	0021      	movs	r1, r4
 8001564:	4069      	eors	r1, r5
 8001566:	9100      	str	r1, [sp, #0]
 8001568:	468c      	mov	ip, r1
 800156a:	2101      	movs	r1, #1
 800156c:	4449      	add	r1, r9
 800156e:	468a      	mov	sl, r1
 8001570:	2f0f      	cmp	r7, #15
 8001572:	d900      	bls.n	8001576 <__aeabi_dmul+0x96>
 8001574:	e090      	b.n	8001698 <__aeabi_dmul+0x1b8>
 8001576:	49c4      	ldr	r1, [pc, #784]	; (8001888 <__aeabi_dmul+0x3a8>)
 8001578:	00bf      	lsls	r7, r7, #2
 800157a:	59cf      	ldr	r7, [r1, r7]
 800157c:	46bf      	mov	pc, r7
 800157e:	465b      	mov	r3, fp
 8001580:	433b      	orrs	r3, r7
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	d000      	beq.n	8001588 <__aeabi_dmul+0xa8>
 8001586:	e16a      	b.n	800185e <__aeabi_dmul+0x37e>
 8001588:	2302      	movs	r3, #2
 800158a:	2708      	movs	r7, #8
 800158c:	2600      	movs	r6, #0
 800158e:	4681      	mov	r9, r0
 8001590:	469b      	mov	fp, r3
 8001592:	e7c9      	b.n	8001528 <__aeabi_dmul+0x48>
 8001594:	0032      	movs	r2, r6
 8001596:	4658      	mov	r0, fp
 8001598:	9b01      	ldr	r3, [sp, #4]
 800159a:	4661      	mov	r1, ip
 800159c:	9100      	str	r1, [sp, #0]
 800159e:	2802      	cmp	r0, #2
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dmul+0xc4>
 80015a2:	e075      	b.n	8001690 <__aeabi_dmul+0x1b0>
 80015a4:	2803      	cmp	r0, #3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0xca>
 80015a8:	e1fe      	b.n	80019a8 <__aeabi_dmul+0x4c8>
 80015aa:	2801      	cmp	r0, #1
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dmul+0xd0>
 80015ae:	e12c      	b.n	800180a <__aeabi_dmul+0x32a>
 80015b0:	2300      	movs	r3, #0
 80015b2:	2700      	movs	r7, #0
 80015b4:	2600      	movs	r6, #0
 80015b6:	2500      	movs	r5, #0
 80015b8:	033f      	lsls	r7, r7, #12
 80015ba:	0d2a      	lsrs	r2, r5, #20
 80015bc:	0b3f      	lsrs	r7, r7, #12
 80015be:	48b3      	ldr	r0, [pc, #716]	; (800188c <__aeabi_dmul+0x3ac>)
 80015c0:	0512      	lsls	r2, r2, #20
 80015c2:	433a      	orrs	r2, r7
 80015c4:	4002      	ands	r2, r0
 80015c6:	051b      	lsls	r3, r3, #20
 80015c8:	4313      	orrs	r3, r2
 80015ca:	9a00      	ldr	r2, [sp, #0]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	07d1      	lsls	r1, r2, #31
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	430b      	orrs	r3, r1
 80015d4:	0030      	movs	r0, r6
 80015d6:	0019      	movs	r1, r3
 80015d8:	b007      	add	sp, #28
 80015da:	bc3c      	pop	{r2, r3, r4, r5}
 80015dc:	4690      	mov	r8, r2
 80015de:	4699      	mov	r9, r3
 80015e0:	46a2      	mov	sl, r4
 80015e2:	46ab      	mov	fp, r5
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e6:	465b      	mov	r3, fp
 80015e8:	433b      	orrs	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dmul+0x110>
 80015ee:	e12f      	b.n	8001850 <__aeabi_dmul+0x370>
 80015f0:	2f00      	cmp	r7, #0
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dmul+0x116>
 80015f4:	e1a5      	b.n	8001942 <__aeabi_dmul+0x462>
 80015f6:	0038      	movs	r0, r7
 80015f8:	f000 fdce 	bl	8002198 <__clzsi2>
 80015fc:	0003      	movs	r3, r0
 80015fe:	3b0b      	subs	r3, #11
 8001600:	2b1c      	cmp	r3, #28
 8001602:	dd00      	ble.n	8001606 <__aeabi_dmul+0x126>
 8001604:	e196      	b.n	8001934 <__aeabi_dmul+0x454>
 8001606:	221d      	movs	r2, #29
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	465a      	mov	r2, fp
 800160c:	0001      	movs	r1, r0
 800160e:	40da      	lsrs	r2, r3
 8001610:	465e      	mov	r6, fp
 8001612:	3908      	subs	r1, #8
 8001614:	408f      	lsls	r7, r1
 8001616:	0013      	movs	r3, r2
 8001618:	408e      	lsls	r6, r1
 800161a:	433b      	orrs	r3, r7
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	4b9c      	ldr	r3, [pc, #624]	; (8001890 <__aeabi_dmul+0x3b0>)
 8001620:	2700      	movs	r7, #0
 8001622:	1a1b      	subs	r3, r3, r0
 8001624:	4699      	mov	r9, r3
 8001626:	2300      	movs	r3, #0
 8001628:	469b      	mov	fp, r3
 800162a:	e77d      	b.n	8001528 <__aeabi_dmul+0x48>
 800162c:	4641      	mov	r1, r8
 800162e:	4653      	mov	r3, sl
 8001630:	430b      	orrs	r3, r1
 8001632:	4993      	ldr	r1, [pc, #588]	; (8001880 <__aeabi_dmul+0x3a0>)
 8001634:	468c      	mov	ip, r1
 8001636:	44e1      	add	r9, ip
 8001638:	2b00      	cmp	r3, #0
 800163a:	d000      	beq.n	800163e <__aeabi_dmul+0x15e>
 800163c:	e11a      	b.n	8001874 <__aeabi_dmul+0x394>
 800163e:	2202      	movs	r2, #2
 8001640:	2002      	movs	r0, #2
 8001642:	4317      	orrs	r7, r2
 8001644:	2200      	movs	r2, #0
 8001646:	e78c      	b.n	8001562 <__aeabi_dmul+0x82>
 8001648:	4313      	orrs	r3, r2
 800164a:	d100      	bne.n	800164e <__aeabi_dmul+0x16e>
 800164c:	e10d      	b.n	800186a <__aeabi_dmul+0x38a>
 800164e:	4643      	mov	r3, r8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_dmul+0x176>
 8001654:	e181      	b.n	800195a <__aeabi_dmul+0x47a>
 8001656:	4640      	mov	r0, r8
 8001658:	f000 fd9e 	bl	8002198 <__clzsi2>
 800165c:	0002      	movs	r2, r0
 800165e:	3a0b      	subs	r2, #11
 8001660:	2a1c      	cmp	r2, #28
 8001662:	dd00      	ble.n	8001666 <__aeabi_dmul+0x186>
 8001664:	e172      	b.n	800194c <__aeabi_dmul+0x46c>
 8001666:	0001      	movs	r1, r0
 8001668:	4643      	mov	r3, r8
 800166a:	3908      	subs	r1, #8
 800166c:	408b      	lsls	r3, r1
 800166e:	4698      	mov	r8, r3
 8001670:	231d      	movs	r3, #29
 8001672:	1a9a      	subs	r2, r3, r2
 8001674:	4653      	mov	r3, sl
 8001676:	40d3      	lsrs	r3, r2
 8001678:	001a      	movs	r2, r3
 800167a:	4643      	mov	r3, r8
 800167c:	4313      	orrs	r3, r2
 800167e:	4652      	mov	r2, sl
 8001680:	408a      	lsls	r2, r1
 8001682:	4649      	mov	r1, r9
 8001684:	1a08      	subs	r0, r1, r0
 8001686:	4982      	ldr	r1, [pc, #520]	; (8001890 <__aeabi_dmul+0x3b0>)
 8001688:	4689      	mov	r9, r1
 800168a:	4481      	add	r9, r0
 800168c:	2000      	movs	r0, #0
 800168e:	e768      	b.n	8001562 <__aeabi_dmul+0x82>
 8001690:	4b7b      	ldr	r3, [pc, #492]	; (8001880 <__aeabi_dmul+0x3a0>)
 8001692:	2700      	movs	r7, #0
 8001694:	2600      	movs	r6, #0
 8001696:	e78e      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001698:	0c14      	lsrs	r4, r2, #16
 800169a:	0412      	lsls	r2, r2, #16
 800169c:	0c12      	lsrs	r2, r2, #16
 800169e:	0011      	movs	r1, r2
 80016a0:	0c37      	lsrs	r7, r6, #16
 80016a2:	0436      	lsls	r6, r6, #16
 80016a4:	0c35      	lsrs	r5, r6, #16
 80016a6:	4379      	muls	r1, r7
 80016a8:	0028      	movs	r0, r5
 80016aa:	468c      	mov	ip, r1
 80016ac:	002e      	movs	r6, r5
 80016ae:	4360      	muls	r0, r4
 80016b0:	4460      	add	r0, ip
 80016b2:	4683      	mov	fp, r0
 80016b4:	4356      	muls	r6, r2
 80016b6:	0021      	movs	r1, r4
 80016b8:	0c30      	lsrs	r0, r6, #16
 80016ba:	4680      	mov	r8, r0
 80016bc:	4658      	mov	r0, fp
 80016be:	4379      	muls	r1, r7
 80016c0:	4440      	add	r0, r8
 80016c2:	9102      	str	r1, [sp, #8]
 80016c4:	4584      	cmp	ip, r0
 80016c6:	d906      	bls.n	80016d6 <__aeabi_dmul+0x1f6>
 80016c8:	4688      	mov	r8, r1
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	0249      	lsls	r1, r1, #9
 80016ce:	468c      	mov	ip, r1
 80016d0:	44e0      	add	r8, ip
 80016d2:	4641      	mov	r1, r8
 80016d4:	9102      	str	r1, [sp, #8]
 80016d6:	0436      	lsls	r6, r6, #16
 80016d8:	0c01      	lsrs	r1, r0, #16
 80016da:	0c36      	lsrs	r6, r6, #16
 80016dc:	0400      	lsls	r0, r0, #16
 80016de:	468b      	mov	fp, r1
 80016e0:	1981      	adds	r1, r0, r6
 80016e2:	0c1e      	lsrs	r6, r3, #16
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	0c1b      	lsrs	r3, r3, #16
 80016e8:	9103      	str	r1, [sp, #12]
 80016ea:	0019      	movs	r1, r3
 80016ec:	4379      	muls	r1, r7
 80016ee:	468c      	mov	ip, r1
 80016f0:	0028      	movs	r0, r5
 80016f2:	4375      	muls	r5, r6
 80016f4:	4465      	add	r5, ip
 80016f6:	46a8      	mov	r8, r5
 80016f8:	4358      	muls	r0, r3
 80016fa:	0c05      	lsrs	r5, r0, #16
 80016fc:	4445      	add	r5, r8
 80016fe:	4377      	muls	r7, r6
 8001700:	42a9      	cmp	r1, r5
 8001702:	d903      	bls.n	800170c <__aeabi_dmul+0x22c>
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	0249      	lsls	r1, r1, #9
 8001708:	468c      	mov	ip, r1
 800170a:	4467      	add	r7, ip
 800170c:	0c29      	lsrs	r1, r5, #16
 800170e:	468c      	mov	ip, r1
 8001710:	0039      	movs	r1, r7
 8001712:	0400      	lsls	r0, r0, #16
 8001714:	0c00      	lsrs	r0, r0, #16
 8001716:	042d      	lsls	r5, r5, #16
 8001718:	182d      	adds	r5, r5, r0
 800171a:	4461      	add	r1, ip
 800171c:	44ab      	add	fp, r5
 800171e:	9105      	str	r1, [sp, #20]
 8001720:	4659      	mov	r1, fp
 8001722:	9104      	str	r1, [sp, #16]
 8001724:	9901      	ldr	r1, [sp, #4]
 8001726:	040f      	lsls	r7, r1, #16
 8001728:	0c3f      	lsrs	r7, r7, #16
 800172a:	0c08      	lsrs	r0, r1, #16
 800172c:	0039      	movs	r1, r7
 800172e:	4351      	muls	r1, r2
 8001730:	4342      	muls	r2, r0
 8001732:	4690      	mov	r8, r2
 8001734:	0002      	movs	r2, r0
 8001736:	468c      	mov	ip, r1
 8001738:	0c09      	lsrs	r1, r1, #16
 800173a:	468b      	mov	fp, r1
 800173c:	4362      	muls	r2, r4
 800173e:	437c      	muls	r4, r7
 8001740:	4444      	add	r4, r8
 8001742:	445c      	add	r4, fp
 8001744:	45a0      	cmp	r8, r4
 8001746:	d903      	bls.n	8001750 <__aeabi_dmul+0x270>
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	0249      	lsls	r1, r1, #9
 800174c:	4688      	mov	r8, r1
 800174e:	4442      	add	r2, r8
 8001750:	0c21      	lsrs	r1, r4, #16
 8001752:	4688      	mov	r8, r1
 8001754:	4661      	mov	r1, ip
 8001756:	0409      	lsls	r1, r1, #16
 8001758:	0c09      	lsrs	r1, r1, #16
 800175a:	468c      	mov	ip, r1
 800175c:	0039      	movs	r1, r7
 800175e:	4359      	muls	r1, r3
 8001760:	4343      	muls	r3, r0
 8001762:	4370      	muls	r0, r6
 8001764:	437e      	muls	r6, r7
 8001766:	0c0f      	lsrs	r7, r1, #16
 8001768:	18f6      	adds	r6, r6, r3
 800176a:	0424      	lsls	r4, r4, #16
 800176c:	19be      	adds	r6, r7, r6
 800176e:	4464      	add	r4, ip
 8001770:	4442      	add	r2, r8
 8001772:	468c      	mov	ip, r1
 8001774:	42b3      	cmp	r3, r6
 8001776:	d903      	bls.n	8001780 <__aeabi_dmul+0x2a0>
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	025b      	lsls	r3, r3, #9
 800177c:	4698      	mov	r8, r3
 800177e:	4440      	add	r0, r8
 8001780:	9b02      	ldr	r3, [sp, #8]
 8001782:	4661      	mov	r1, ip
 8001784:	4698      	mov	r8, r3
 8001786:	9b04      	ldr	r3, [sp, #16]
 8001788:	0437      	lsls	r7, r6, #16
 800178a:	4443      	add	r3, r8
 800178c:	469b      	mov	fp, r3
 800178e:	45ab      	cmp	fp, r5
 8001790:	41ad      	sbcs	r5, r5
 8001792:	426b      	negs	r3, r5
 8001794:	040d      	lsls	r5, r1, #16
 8001796:	9905      	ldr	r1, [sp, #20]
 8001798:	0c2d      	lsrs	r5, r5, #16
 800179a:	468c      	mov	ip, r1
 800179c:	197f      	adds	r7, r7, r5
 800179e:	4467      	add	r7, ip
 80017a0:	18fd      	adds	r5, r7, r3
 80017a2:	46a8      	mov	r8, r5
 80017a4:	465d      	mov	r5, fp
 80017a6:	192d      	adds	r5, r5, r4
 80017a8:	42a5      	cmp	r5, r4
 80017aa:	41a4      	sbcs	r4, r4
 80017ac:	4693      	mov	fp, r2
 80017ae:	4264      	negs	r4, r4
 80017b0:	46a4      	mov	ip, r4
 80017b2:	44c3      	add	fp, r8
 80017b4:	44dc      	add	ip, fp
 80017b6:	428f      	cmp	r7, r1
 80017b8:	41bf      	sbcs	r7, r7
 80017ba:	4598      	cmp	r8, r3
 80017bc:	419b      	sbcs	r3, r3
 80017be:	4593      	cmp	fp, r2
 80017c0:	4192      	sbcs	r2, r2
 80017c2:	45a4      	cmp	ip, r4
 80017c4:	41a4      	sbcs	r4, r4
 80017c6:	425b      	negs	r3, r3
 80017c8:	427f      	negs	r7, r7
 80017ca:	431f      	orrs	r7, r3
 80017cc:	0c36      	lsrs	r6, r6, #16
 80017ce:	4252      	negs	r2, r2
 80017d0:	4264      	negs	r4, r4
 80017d2:	19bf      	adds	r7, r7, r6
 80017d4:	4322      	orrs	r2, r4
 80017d6:	18bf      	adds	r7, r7, r2
 80017d8:	4662      	mov	r2, ip
 80017da:	1838      	adds	r0, r7, r0
 80017dc:	0243      	lsls	r3, r0, #9
 80017de:	0dd2      	lsrs	r2, r2, #23
 80017e0:	9903      	ldr	r1, [sp, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	026a      	lsls	r2, r5, #9
 80017e6:	430a      	orrs	r2, r1
 80017e8:	1e50      	subs	r0, r2, #1
 80017ea:	4182      	sbcs	r2, r0
 80017ec:	4661      	mov	r1, ip
 80017ee:	0ded      	lsrs	r5, r5, #23
 80017f0:	432a      	orrs	r2, r5
 80017f2:	024e      	lsls	r6, r1, #9
 80017f4:	4332      	orrs	r2, r6
 80017f6:	01d9      	lsls	r1, r3, #7
 80017f8:	d400      	bmi.n	80017fc <__aeabi_dmul+0x31c>
 80017fa:	e0b3      	b.n	8001964 <__aeabi_dmul+0x484>
 80017fc:	2601      	movs	r6, #1
 80017fe:	0850      	lsrs	r0, r2, #1
 8001800:	4032      	ands	r2, r6
 8001802:	4302      	orrs	r2, r0
 8001804:	07de      	lsls	r6, r3, #31
 8001806:	4332      	orrs	r2, r6
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	4c22      	ldr	r4, [pc, #136]	; (8001894 <__aeabi_dmul+0x3b4>)
 800180c:	4454      	add	r4, sl
 800180e:	2c00      	cmp	r4, #0
 8001810:	dd62      	ble.n	80018d8 <__aeabi_dmul+0x3f8>
 8001812:	0751      	lsls	r1, r2, #29
 8001814:	d009      	beq.n	800182a <__aeabi_dmul+0x34a>
 8001816:	200f      	movs	r0, #15
 8001818:	4010      	ands	r0, r2
 800181a:	2804      	cmp	r0, #4
 800181c:	d005      	beq.n	800182a <__aeabi_dmul+0x34a>
 800181e:	1d10      	adds	r0, r2, #4
 8001820:	4290      	cmp	r0, r2
 8001822:	4192      	sbcs	r2, r2
 8001824:	4252      	negs	r2, r2
 8001826:	189b      	adds	r3, r3, r2
 8001828:	0002      	movs	r2, r0
 800182a:	01d9      	lsls	r1, r3, #7
 800182c:	d504      	bpl.n	8001838 <__aeabi_dmul+0x358>
 800182e:	2480      	movs	r4, #128	; 0x80
 8001830:	4819      	ldr	r0, [pc, #100]	; (8001898 <__aeabi_dmul+0x3b8>)
 8001832:	00e4      	lsls	r4, r4, #3
 8001834:	4003      	ands	r3, r0
 8001836:	4454      	add	r4, sl
 8001838:	4818      	ldr	r0, [pc, #96]	; (800189c <__aeabi_dmul+0x3bc>)
 800183a:	4284      	cmp	r4, r0
 800183c:	dd00      	ble.n	8001840 <__aeabi_dmul+0x360>
 800183e:	e727      	b.n	8001690 <__aeabi_dmul+0x1b0>
 8001840:	075e      	lsls	r6, r3, #29
 8001842:	025b      	lsls	r3, r3, #9
 8001844:	08d2      	lsrs	r2, r2, #3
 8001846:	0b1f      	lsrs	r7, r3, #12
 8001848:	0563      	lsls	r3, r4, #21
 800184a:	4316      	orrs	r6, r2
 800184c:	0d5b      	lsrs	r3, r3, #21
 800184e:	e6b2      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001850:	2300      	movs	r3, #0
 8001852:	4699      	mov	r9, r3
 8001854:	3301      	adds	r3, #1
 8001856:	2704      	movs	r7, #4
 8001858:	2600      	movs	r6, #0
 800185a:	469b      	mov	fp, r3
 800185c:	e664      	b.n	8001528 <__aeabi_dmul+0x48>
 800185e:	2303      	movs	r3, #3
 8001860:	9701      	str	r7, [sp, #4]
 8001862:	4681      	mov	r9, r0
 8001864:	270c      	movs	r7, #12
 8001866:	469b      	mov	fp, r3
 8001868:	e65e      	b.n	8001528 <__aeabi_dmul+0x48>
 800186a:	2201      	movs	r2, #1
 800186c:	2001      	movs	r0, #1
 800186e:	4317      	orrs	r7, r2
 8001870:	2200      	movs	r2, #0
 8001872:	e676      	b.n	8001562 <__aeabi_dmul+0x82>
 8001874:	2303      	movs	r3, #3
 8001876:	2003      	movs	r0, #3
 8001878:	431f      	orrs	r7, r3
 800187a:	4643      	mov	r3, r8
 800187c:	e671      	b.n	8001562 <__aeabi_dmul+0x82>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	000007ff 	.word	0x000007ff
 8001884:	fffffc01 	.word	0xfffffc01
 8001888:	08009cfc 	.word	0x08009cfc
 800188c:	800fffff 	.word	0x800fffff
 8001890:	fffffc0d 	.word	0xfffffc0d
 8001894:	000003ff 	.word	0x000003ff
 8001898:	feffffff 	.word	0xfeffffff
 800189c:	000007fe 	.word	0x000007fe
 80018a0:	2300      	movs	r3, #0
 80018a2:	2780      	movs	r7, #128	; 0x80
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	033f      	lsls	r7, r7, #12
 80018a8:	2600      	movs	r6, #0
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <__aeabi_dmul+0x4d8>)
 80018ac:	e683      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80018ae:	9b01      	ldr	r3, [sp, #4]
 80018b0:	0032      	movs	r2, r6
 80018b2:	46a4      	mov	ip, r4
 80018b4:	4658      	mov	r0, fp
 80018b6:	e670      	b.n	800159a <__aeabi_dmul+0xba>
 80018b8:	46ac      	mov	ip, r5
 80018ba:	e66e      	b.n	800159a <__aeabi_dmul+0xba>
 80018bc:	2780      	movs	r7, #128	; 0x80
 80018be:	9901      	ldr	r1, [sp, #4]
 80018c0:	033f      	lsls	r7, r7, #12
 80018c2:	4239      	tst	r1, r7
 80018c4:	d02d      	beq.n	8001922 <__aeabi_dmul+0x442>
 80018c6:	423b      	tst	r3, r7
 80018c8:	d12b      	bne.n	8001922 <__aeabi_dmul+0x442>
 80018ca:	431f      	orrs	r7, r3
 80018cc:	033f      	lsls	r7, r7, #12
 80018ce:	0b3f      	lsrs	r7, r7, #12
 80018d0:	9500      	str	r5, [sp, #0]
 80018d2:	0016      	movs	r6, r2
 80018d4:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <__aeabi_dmul+0x4d8>)
 80018d6:	e66e      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80018d8:	2501      	movs	r5, #1
 80018da:	1b2d      	subs	r5, r5, r4
 80018dc:	2d38      	cmp	r5, #56	; 0x38
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dmul+0x402>
 80018e0:	e666      	b.n	80015b0 <__aeabi_dmul+0xd0>
 80018e2:	2d1f      	cmp	r5, #31
 80018e4:	dc40      	bgt.n	8001968 <__aeabi_dmul+0x488>
 80018e6:	4835      	ldr	r0, [pc, #212]	; (80019bc <__aeabi_dmul+0x4dc>)
 80018e8:	001c      	movs	r4, r3
 80018ea:	4450      	add	r0, sl
 80018ec:	0016      	movs	r6, r2
 80018ee:	4082      	lsls	r2, r0
 80018f0:	4084      	lsls	r4, r0
 80018f2:	40ee      	lsrs	r6, r5
 80018f4:	1e50      	subs	r0, r2, #1
 80018f6:	4182      	sbcs	r2, r0
 80018f8:	4334      	orrs	r4, r6
 80018fa:	4314      	orrs	r4, r2
 80018fc:	40eb      	lsrs	r3, r5
 80018fe:	0762      	lsls	r2, r4, #29
 8001900:	d009      	beq.n	8001916 <__aeabi_dmul+0x436>
 8001902:	220f      	movs	r2, #15
 8001904:	4022      	ands	r2, r4
 8001906:	2a04      	cmp	r2, #4
 8001908:	d005      	beq.n	8001916 <__aeabi_dmul+0x436>
 800190a:	0022      	movs	r2, r4
 800190c:	1d14      	adds	r4, r2, #4
 800190e:	4294      	cmp	r4, r2
 8001910:	4180      	sbcs	r0, r0
 8001912:	4240      	negs	r0, r0
 8001914:	181b      	adds	r3, r3, r0
 8001916:	021a      	lsls	r2, r3, #8
 8001918:	d53e      	bpl.n	8001998 <__aeabi_dmul+0x4b8>
 800191a:	2301      	movs	r3, #1
 800191c:	2700      	movs	r7, #0
 800191e:	2600      	movs	r6, #0
 8001920:	e649      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001922:	2780      	movs	r7, #128	; 0x80
 8001924:	9b01      	ldr	r3, [sp, #4]
 8001926:	033f      	lsls	r7, r7, #12
 8001928:	431f      	orrs	r7, r3
 800192a:	033f      	lsls	r7, r7, #12
 800192c:	0b3f      	lsrs	r7, r7, #12
 800192e:	9400      	str	r4, [sp, #0]
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <__aeabi_dmul+0x4d8>)
 8001932:	e640      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001934:	0003      	movs	r3, r0
 8001936:	465a      	mov	r2, fp
 8001938:	3b28      	subs	r3, #40	; 0x28
 800193a:	409a      	lsls	r2, r3
 800193c:	2600      	movs	r6, #0
 800193e:	9201      	str	r2, [sp, #4]
 8001940:	e66d      	b.n	800161e <__aeabi_dmul+0x13e>
 8001942:	4658      	mov	r0, fp
 8001944:	f000 fc28 	bl	8002198 <__clzsi2>
 8001948:	3020      	adds	r0, #32
 800194a:	e657      	b.n	80015fc <__aeabi_dmul+0x11c>
 800194c:	0003      	movs	r3, r0
 800194e:	4652      	mov	r2, sl
 8001950:	3b28      	subs	r3, #40	; 0x28
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	2200      	movs	r2, #0
 8001958:	e693      	b.n	8001682 <__aeabi_dmul+0x1a2>
 800195a:	4650      	mov	r0, sl
 800195c:	f000 fc1c 	bl	8002198 <__clzsi2>
 8001960:	3020      	adds	r0, #32
 8001962:	e67b      	b.n	800165c <__aeabi_dmul+0x17c>
 8001964:	46ca      	mov	sl, r9
 8001966:	e750      	b.n	800180a <__aeabi_dmul+0x32a>
 8001968:	201f      	movs	r0, #31
 800196a:	001e      	movs	r6, r3
 800196c:	4240      	negs	r0, r0
 800196e:	1b04      	subs	r4, r0, r4
 8001970:	40e6      	lsrs	r6, r4
 8001972:	2d20      	cmp	r5, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dmul+0x49e>
 8001976:	4c12      	ldr	r4, [pc, #72]	; (80019c0 <__aeabi_dmul+0x4e0>)
 8001978:	4454      	add	r4, sl
 800197a:	40a3      	lsls	r3, r4
 800197c:	431a      	orrs	r2, r3
 800197e:	1e50      	subs	r0, r2, #1
 8001980:	4182      	sbcs	r2, r0
 8001982:	4332      	orrs	r2, r6
 8001984:	2607      	movs	r6, #7
 8001986:	2700      	movs	r7, #0
 8001988:	4016      	ands	r6, r2
 800198a:	d009      	beq.n	80019a0 <__aeabi_dmul+0x4c0>
 800198c:	200f      	movs	r0, #15
 800198e:	2300      	movs	r3, #0
 8001990:	4010      	ands	r0, r2
 8001992:	0014      	movs	r4, r2
 8001994:	2804      	cmp	r0, #4
 8001996:	d1b9      	bne.n	800190c <__aeabi_dmul+0x42c>
 8001998:	0022      	movs	r2, r4
 800199a:	075e      	lsls	r6, r3, #29
 800199c:	025b      	lsls	r3, r3, #9
 800199e:	0b1f      	lsrs	r7, r3, #12
 80019a0:	08d2      	lsrs	r2, r2, #3
 80019a2:	4316      	orrs	r6, r2
 80019a4:	2300      	movs	r3, #0
 80019a6:	e606      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80019a8:	2780      	movs	r7, #128	; 0x80
 80019aa:	033f      	lsls	r7, r7, #12
 80019ac:	431f      	orrs	r7, r3
 80019ae:	033f      	lsls	r7, r7, #12
 80019b0:	0b3f      	lsrs	r7, r7, #12
 80019b2:	0016      	movs	r6, r2
 80019b4:	4b00      	ldr	r3, [pc, #0]	; (80019b8 <__aeabi_dmul+0x4d8>)
 80019b6:	e5fe      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80019b8:	000007ff 	.word	0x000007ff
 80019bc:	0000041e 	.word	0x0000041e
 80019c0:	0000043e 	.word	0x0000043e

080019c4 <__aeabi_dsub>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	4657      	mov	r7, sl
 80019c8:	464e      	mov	r6, r9
 80019ca:	4645      	mov	r5, r8
 80019cc:	46de      	mov	lr, fp
 80019ce:	000c      	movs	r4, r1
 80019d0:	0309      	lsls	r1, r1, #12
 80019d2:	b5e0      	push	{r5, r6, r7, lr}
 80019d4:	0a49      	lsrs	r1, r1, #9
 80019d6:	0f46      	lsrs	r6, r0, #29
 80019d8:	005f      	lsls	r7, r3, #1
 80019da:	4331      	orrs	r1, r6
 80019dc:	031e      	lsls	r6, r3, #12
 80019de:	0fdb      	lsrs	r3, r3, #31
 80019e0:	0a76      	lsrs	r6, r6, #9
 80019e2:	469b      	mov	fp, r3
 80019e4:	0f53      	lsrs	r3, r2, #29
 80019e6:	4333      	orrs	r3, r6
 80019e8:	4ec8      	ldr	r6, [pc, #800]	; (8001d0c <__aeabi_dsub+0x348>)
 80019ea:	0065      	lsls	r5, r4, #1
 80019ec:	00c0      	lsls	r0, r0, #3
 80019ee:	0fe4      	lsrs	r4, r4, #31
 80019f0:	00d2      	lsls	r2, r2, #3
 80019f2:	0d6d      	lsrs	r5, r5, #21
 80019f4:	46a2      	mov	sl, r4
 80019f6:	4681      	mov	r9, r0
 80019f8:	0d7f      	lsrs	r7, r7, #21
 80019fa:	469c      	mov	ip, r3
 80019fc:	4690      	mov	r8, r2
 80019fe:	42b7      	cmp	r7, r6
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x40>
 8001a02:	e0b9      	b.n	8001b78 <__aeabi_dsub+0x1b4>
 8001a04:	465b      	mov	r3, fp
 8001a06:	2601      	movs	r6, #1
 8001a08:	4073      	eors	r3, r6
 8001a0a:	469b      	mov	fp, r3
 8001a0c:	1bee      	subs	r6, r5, r7
 8001a0e:	45a3      	cmp	fp, r4
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dsub+0x50>
 8001a12:	e083      	b.n	8001b1c <__aeabi_dsub+0x158>
 8001a14:	2e00      	cmp	r6, #0
 8001a16:	dd63      	ble.n	8001ae0 <__aeabi_dsub+0x11c>
 8001a18:	2f00      	cmp	r7, #0
 8001a1a:	d000      	beq.n	8001a1e <__aeabi_dsub+0x5a>
 8001a1c:	e0b1      	b.n	8001b82 <__aeabi_dsub+0x1be>
 8001a1e:	4663      	mov	r3, ip
 8001a20:	4313      	orrs	r3, r2
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dsub+0x62>
 8001a24:	e123      	b.n	8001c6e <__aeabi_dsub+0x2aa>
 8001a26:	1e73      	subs	r3, r6, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d000      	beq.n	8001a2e <__aeabi_dsub+0x6a>
 8001a2c:	e1ba      	b.n	8001da4 <__aeabi_dsub+0x3e0>
 8001a2e:	1a86      	subs	r6, r0, r2
 8001a30:	4663      	mov	r3, ip
 8001a32:	42b0      	cmp	r0, r6
 8001a34:	4180      	sbcs	r0, r0
 8001a36:	2501      	movs	r5, #1
 8001a38:	1ac9      	subs	r1, r1, r3
 8001a3a:	4240      	negs	r0, r0
 8001a3c:	1a09      	subs	r1, r1, r0
 8001a3e:	020b      	lsls	r3, r1, #8
 8001a40:	d400      	bmi.n	8001a44 <__aeabi_dsub+0x80>
 8001a42:	e147      	b.n	8001cd4 <__aeabi_dsub+0x310>
 8001a44:	0249      	lsls	r1, r1, #9
 8001a46:	0a4b      	lsrs	r3, r1, #9
 8001a48:	4698      	mov	r8, r3
 8001a4a:	4643      	mov	r3, r8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dsub+0x8e>
 8001a50:	e189      	b.n	8001d66 <__aeabi_dsub+0x3a2>
 8001a52:	4640      	mov	r0, r8
 8001a54:	f000 fba0 	bl	8002198 <__clzsi2>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	2b1f      	cmp	r3, #31
 8001a5e:	dd00      	ble.n	8001a62 <__aeabi_dsub+0x9e>
 8001a60:	e17c      	b.n	8001d5c <__aeabi_dsub+0x398>
 8001a62:	2220      	movs	r2, #32
 8001a64:	0030      	movs	r0, r6
 8001a66:	1ad2      	subs	r2, r2, r3
 8001a68:	4641      	mov	r1, r8
 8001a6a:	40d0      	lsrs	r0, r2
 8001a6c:	4099      	lsls	r1, r3
 8001a6e:	0002      	movs	r2, r0
 8001a70:	409e      	lsls	r6, r3
 8001a72:	430a      	orrs	r2, r1
 8001a74:	429d      	cmp	r5, r3
 8001a76:	dd00      	ble.n	8001a7a <__aeabi_dsub+0xb6>
 8001a78:	e16a      	b.n	8001d50 <__aeabi_dsub+0x38c>
 8001a7a:	1b5d      	subs	r5, r3, r5
 8001a7c:	1c6b      	adds	r3, r5, #1
 8001a7e:	2b1f      	cmp	r3, #31
 8001a80:	dd00      	ble.n	8001a84 <__aeabi_dsub+0xc0>
 8001a82:	e194      	b.n	8001dae <__aeabi_dsub+0x3ea>
 8001a84:	2120      	movs	r1, #32
 8001a86:	0010      	movs	r0, r2
 8001a88:	0035      	movs	r5, r6
 8001a8a:	1ac9      	subs	r1, r1, r3
 8001a8c:	408e      	lsls	r6, r1
 8001a8e:	40da      	lsrs	r2, r3
 8001a90:	4088      	lsls	r0, r1
 8001a92:	40dd      	lsrs	r5, r3
 8001a94:	1e71      	subs	r1, r6, #1
 8001a96:	418e      	sbcs	r6, r1
 8001a98:	0011      	movs	r1, r2
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	4328      	orrs	r0, r5
 8001a9e:	2500      	movs	r5, #0
 8001aa0:	4306      	orrs	r6, r0
 8001aa2:	4032      	ands	r2, r6
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	d009      	beq.n	8001abc <__aeabi_dsub+0xf8>
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	4033      	ands	r3, r6
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d005      	beq.n	8001abc <__aeabi_dsub+0xf8>
 8001ab0:	1d33      	adds	r3, r6, #4
 8001ab2:	42b3      	cmp	r3, r6
 8001ab4:	41b6      	sbcs	r6, r6
 8001ab6:	4276      	negs	r6, r6
 8001ab8:	1989      	adds	r1, r1, r6
 8001aba:	001e      	movs	r6, r3
 8001abc:	020b      	lsls	r3, r1, #8
 8001abe:	d400      	bmi.n	8001ac2 <__aeabi_dsub+0xfe>
 8001ac0:	e23d      	b.n	8001f3e <__aeabi_dsub+0x57a>
 8001ac2:	1c6a      	adds	r2, r5, #1
 8001ac4:	4b91      	ldr	r3, [pc, #580]	; (8001d0c <__aeabi_dsub+0x348>)
 8001ac6:	0555      	lsls	r5, r2, #21
 8001ac8:	0d6d      	lsrs	r5, r5, #21
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dsub+0x10c>
 8001ace:	e119      	b.n	8001d04 <__aeabi_dsub+0x340>
 8001ad0:	4a8f      	ldr	r2, [pc, #572]	; (8001d10 <__aeabi_dsub+0x34c>)
 8001ad2:	08f6      	lsrs	r6, r6, #3
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	0757      	lsls	r7, r2, #29
 8001ad8:	0252      	lsls	r2, r2, #9
 8001ada:	4337      	orrs	r7, r6
 8001adc:	0b12      	lsrs	r2, r2, #12
 8001ade:	e09b      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001ae0:	2e00      	cmp	r6, #0
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x122>
 8001ae4:	e0c5      	b.n	8001c72 <__aeabi_dsub+0x2ae>
 8001ae6:	1c6e      	adds	r6, r5, #1
 8001ae8:	0576      	lsls	r6, r6, #21
 8001aea:	0d76      	lsrs	r6, r6, #21
 8001aec:	2e01      	cmp	r6, #1
 8001aee:	dc00      	bgt.n	8001af2 <__aeabi_dsub+0x12e>
 8001af0:	e148      	b.n	8001d84 <__aeabi_dsub+0x3c0>
 8001af2:	4667      	mov	r7, ip
 8001af4:	1a86      	subs	r6, r0, r2
 8001af6:	1bcb      	subs	r3, r1, r7
 8001af8:	42b0      	cmp	r0, r6
 8001afa:	41bf      	sbcs	r7, r7
 8001afc:	427f      	negs	r7, r7
 8001afe:	46b8      	mov	r8, r7
 8001b00:	001f      	movs	r7, r3
 8001b02:	4643      	mov	r3, r8
 8001b04:	1aff      	subs	r7, r7, r3
 8001b06:	003b      	movs	r3, r7
 8001b08:	46b8      	mov	r8, r7
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	d500      	bpl.n	8001b10 <__aeabi_dsub+0x14c>
 8001b0e:	e15f      	b.n	8001dd0 <__aeabi_dsub+0x40c>
 8001b10:	4337      	orrs	r7, r6
 8001b12:	d19a      	bne.n	8001a4a <__aeabi_dsub+0x86>
 8001b14:	2200      	movs	r2, #0
 8001b16:	2400      	movs	r4, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	e079      	b.n	8001c10 <__aeabi_dsub+0x24c>
 8001b1c:	2e00      	cmp	r6, #0
 8001b1e:	dc00      	bgt.n	8001b22 <__aeabi_dsub+0x15e>
 8001b20:	e0fa      	b.n	8001d18 <__aeabi_dsub+0x354>
 8001b22:	2f00      	cmp	r7, #0
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x164>
 8001b26:	e08d      	b.n	8001c44 <__aeabi_dsub+0x280>
 8001b28:	4b78      	ldr	r3, [pc, #480]	; (8001d0c <__aeabi_dsub+0x348>)
 8001b2a:	429d      	cmp	r5, r3
 8001b2c:	d067      	beq.n	8001bfe <__aeabi_dsub+0x23a>
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	4667      	mov	r7, ip
 8001b32:	041b      	lsls	r3, r3, #16
 8001b34:	431f      	orrs	r7, r3
 8001b36:	46bc      	mov	ip, r7
 8001b38:	2e38      	cmp	r6, #56	; 0x38
 8001b3a:	dc00      	bgt.n	8001b3e <__aeabi_dsub+0x17a>
 8001b3c:	e152      	b.n	8001de4 <__aeabi_dsub+0x420>
 8001b3e:	4663      	mov	r3, ip
 8001b40:	4313      	orrs	r3, r2
 8001b42:	1e5a      	subs	r2, r3, #1
 8001b44:	4193      	sbcs	r3, r2
 8001b46:	181e      	adds	r6, r3, r0
 8001b48:	4286      	cmp	r6, r0
 8001b4a:	4180      	sbcs	r0, r0
 8001b4c:	4240      	negs	r0, r0
 8001b4e:	1809      	adds	r1, r1, r0
 8001b50:	020b      	lsls	r3, r1, #8
 8001b52:	d400      	bmi.n	8001b56 <__aeabi_dsub+0x192>
 8001b54:	e0be      	b.n	8001cd4 <__aeabi_dsub+0x310>
 8001b56:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <__aeabi_dsub+0x348>)
 8001b58:	3501      	adds	r5, #1
 8001b5a:	429d      	cmp	r5, r3
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x19c>
 8001b5e:	e0d2      	b.n	8001d06 <__aeabi_dsub+0x342>
 8001b60:	4a6b      	ldr	r2, [pc, #428]	; (8001d10 <__aeabi_dsub+0x34c>)
 8001b62:	0873      	lsrs	r3, r6, #1
 8001b64:	400a      	ands	r2, r1
 8001b66:	2101      	movs	r1, #1
 8001b68:	400e      	ands	r6, r1
 8001b6a:	431e      	orrs	r6, r3
 8001b6c:	0851      	lsrs	r1, r2, #1
 8001b6e:	07d3      	lsls	r3, r2, #31
 8001b70:	2207      	movs	r2, #7
 8001b72:	431e      	orrs	r6, r3
 8001b74:	4032      	ands	r2, r6
 8001b76:	e795      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001b78:	001e      	movs	r6, r3
 8001b7a:	4316      	orrs	r6, r2
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_dsub+0x1bc>
 8001b7e:	e745      	b.n	8001a0c <__aeabi_dsub+0x48>
 8001b80:	e740      	b.n	8001a04 <__aeabi_dsub+0x40>
 8001b82:	4b62      	ldr	r3, [pc, #392]	; (8001d0c <__aeabi_dsub+0x348>)
 8001b84:	429d      	cmp	r5, r3
 8001b86:	d03a      	beq.n	8001bfe <__aeabi_dsub+0x23a>
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	4667      	mov	r7, ip
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	431f      	orrs	r7, r3
 8001b90:	46bc      	mov	ip, r7
 8001b92:	2e38      	cmp	r6, #56	; 0x38
 8001b94:	dd00      	ble.n	8001b98 <__aeabi_dsub+0x1d4>
 8001b96:	e0eb      	b.n	8001d70 <__aeabi_dsub+0x3ac>
 8001b98:	2e1f      	cmp	r6, #31
 8001b9a:	dc00      	bgt.n	8001b9e <__aeabi_dsub+0x1da>
 8001b9c:	e13a      	b.n	8001e14 <__aeabi_dsub+0x450>
 8001b9e:	0033      	movs	r3, r6
 8001ba0:	4667      	mov	r7, ip
 8001ba2:	3b20      	subs	r3, #32
 8001ba4:	40df      	lsrs	r7, r3
 8001ba6:	003b      	movs	r3, r7
 8001ba8:	2e20      	cmp	r6, #32
 8001baa:	d005      	beq.n	8001bb8 <__aeabi_dsub+0x1f4>
 8001bac:	2740      	movs	r7, #64	; 0x40
 8001bae:	1bbf      	subs	r7, r7, r6
 8001bb0:	4666      	mov	r6, ip
 8001bb2:	40be      	lsls	r6, r7
 8001bb4:	4332      	orrs	r2, r6
 8001bb6:	4690      	mov	r8, r2
 8001bb8:	4646      	mov	r6, r8
 8001bba:	1e72      	subs	r2, r6, #1
 8001bbc:	4196      	sbcs	r6, r2
 8001bbe:	4333      	orrs	r3, r6
 8001bc0:	e0da      	b.n	8001d78 <__aeabi_dsub+0x3b4>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x204>
 8001bc6:	e214      	b.n	8001ff2 <__aeabi_dsub+0x62e>
 8001bc8:	4663      	mov	r3, ip
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dsub+0x20c>
 8001bce:	e168      	b.n	8001ea2 <__aeabi_dsub+0x4de>
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	074e      	lsls	r6, r1, #29
 8001bd4:	08c0      	lsrs	r0, r0, #3
 8001bd6:	08c9      	lsrs	r1, r1, #3
 8001bd8:	031b      	lsls	r3, r3, #12
 8001bda:	4306      	orrs	r6, r0
 8001bdc:	4219      	tst	r1, r3
 8001bde:	d008      	beq.n	8001bf2 <__aeabi_dsub+0x22e>
 8001be0:	4660      	mov	r0, ip
 8001be2:	08c0      	lsrs	r0, r0, #3
 8001be4:	4218      	tst	r0, r3
 8001be6:	d104      	bne.n	8001bf2 <__aeabi_dsub+0x22e>
 8001be8:	4663      	mov	r3, ip
 8001bea:	0001      	movs	r1, r0
 8001bec:	08d2      	lsrs	r2, r2, #3
 8001bee:	075e      	lsls	r6, r3, #29
 8001bf0:	4316      	orrs	r6, r2
 8001bf2:	00f3      	lsls	r3, r6, #3
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	00c9      	lsls	r1, r1, #3
 8001bf8:	0f72      	lsrs	r2, r6, #29
 8001bfa:	4d44      	ldr	r5, [pc, #272]	; (8001d0c <__aeabi_dsub+0x348>)
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	464b      	mov	r3, r9
 8001c00:	08de      	lsrs	r6, r3, #3
 8001c02:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <__aeabi_dsub+0x348>)
 8001c04:	074f      	lsls	r7, r1, #29
 8001c06:	4337      	orrs	r7, r6
 8001c08:	08ca      	lsrs	r2, r1, #3
 8001c0a:	429d      	cmp	r5, r3
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x24c>
 8001c0e:	e06e      	b.n	8001cee <__aeabi_dsub+0x32a>
 8001c10:	0312      	lsls	r2, r2, #12
 8001c12:	056d      	lsls	r5, r5, #21
 8001c14:	0b12      	lsrs	r2, r2, #12
 8001c16:	0d6d      	lsrs	r5, r5, #21
 8001c18:	2100      	movs	r1, #0
 8001c1a:	0312      	lsls	r2, r2, #12
 8001c1c:	0b13      	lsrs	r3, r2, #12
 8001c1e:	0d0a      	lsrs	r2, r1, #20
 8001c20:	0512      	lsls	r2, r2, #20
 8001c22:	431a      	orrs	r2, r3
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <__aeabi_dsub+0x350>)
 8001c26:	052d      	lsls	r5, r5, #20
 8001c28:	4013      	ands	r3, r2
 8001c2a:	432b      	orrs	r3, r5
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	07e4      	lsls	r4, r4, #31
 8001c30:	085b      	lsrs	r3, r3, #1
 8001c32:	4323      	orrs	r3, r4
 8001c34:	0038      	movs	r0, r7
 8001c36:	0019      	movs	r1, r3
 8001c38:	bc3c      	pop	{r2, r3, r4, r5}
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	46a2      	mov	sl, r4
 8001c40:	46ab      	mov	fp, r5
 8001c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c44:	4663      	mov	r3, ip
 8001c46:	4313      	orrs	r3, r2
 8001c48:	d011      	beq.n	8001c6e <__aeabi_dsub+0x2aa>
 8001c4a:	1e73      	subs	r3, r6, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d000      	beq.n	8001c52 <__aeabi_dsub+0x28e>
 8001c50:	e107      	b.n	8001e62 <__aeabi_dsub+0x49e>
 8001c52:	1886      	adds	r6, r0, r2
 8001c54:	4286      	cmp	r6, r0
 8001c56:	4180      	sbcs	r0, r0
 8001c58:	4461      	add	r1, ip
 8001c5a:	4240      	negs	r0, r0
 8001c5c:	1809      	adds	r1, r1, r0
 8001c5e:	2501      	movs	r5, #1
 8001c60:	020b      	lsls	r3, r1, #8
 8001c62:	d537      	bpl.n	8001cd4 <__aeabi_dsub+0x310>
 8001c64:	2502      	movs	r5, #2
 8001c66:	e77b      	b.n	8001b60 <__aeabi_dsub+0x19c>
 8001c68:	003e      	movs	r6, r7
 8001c6a:	4661      	mov	r1, ip
 8001c6c:	4691      	mov	r9, r2
 8001c6e:	0035      	movs	r5, r6
 8001c70:	e7c5      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001c72:	465c      	mov	r4, fp
 8001c74:	2d00      	cmp	r5, #0
 8001c76:	d000      	beq.n	8001c7a <__aeabi_dsub+0x2b6>
 8001c78:	e0e1      	b.n	8001e3e <__aeabi_dsub+0x47a>
 8001c7a:	000b      	movs	r3, r1
 8001c7c:	4303      	orrs	r3, r0
 8001c7e:	d0f3      	beq.n	8001c68 <__aeabi_dsub+0x2a4>
 8001c80:	1c73      	adds	r3, r6, #1
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x2c2>
 8001c84:	e1ac      	b.n	8001fe0 <__aeabi_dsub+0x61c>
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <__aeabi_dsub+0x348>)
 8001c88:	429f      	cmp	r7, r3
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x2ca>
 8001c8c:	e13a      	b.n	8001f04 <__aeabi_dsub+0x540>
 8001c8e:	43f3      	mvns	r3, r6
 8001c90:	2b38      	cmp	r3, #56	; 0x38
 8001c92:	dd00      	ble.n	8001c96 <__aeabi_dsub+0x2d2>
 8001c94:	e16f      	b.n	8001f76 <__aeabi_dsub+0x5b2>
 8001c96:	2b1f      	cmp	r3, #31
 8001c98:	dd00      	ble.n	8001c9c <__aeabi_dsub+0x2d8>
 8001c9a:	e18c      	b.n	8001fb6 <__aeabi_dsub+0x5f2>
 8001c9c:	2520      	movs	r5, #32
 8001c9e:	000e      	movs	r6, r1
 8001ca0:	1aed      	subs	r5, r5, r3
 8001ca2:	40ae      	lsls	r6, r5
 8001ca4:	46b0      	mov	r8, r6
 8001ca6:	0006      	movs	r6, r0
 8001ca8:	46aa      	mov	sl, r5
 8001caa:	40de      	lsrs	r6, r3
 8001cac:	4645      	mov	r5, r8
 8001cae:	4335      	orrs	r5, r6
 8001cb0:	002e      	movs	r6, r5
 8001cb2:	4655      	mov	r5, sl
 8001cb4:	40d9      	lsrs	r1, r3
 8001cb6:	40a8      	lsls	r0, r5
 8001cb8:	4663      	mov	r3, ip
 8001cba:	1e45      	subs	r5, r0, #1
 8001cbc:	41a8      	sbcs	r0, r5
 8001cbe:	1a5b      	subs	r3, r3, r1
 8001cc0:	469c      	mov	ip, r3
 8001cc2:	4330      	orrs	r0, r6
 8001cc4:	1a16      	subs	r6, r2, r0
 8001cc6:	42b2      	cmp	r2, r6
 8001cc8:	4192      	sbcs	r2, r2
 8001cca:	4663      	mov	r3, ip
 8001ccc:	4252      	negs	r2, r2
 8001cce:	1a99      	subs	r1, r3, r2
 8001cd0:	003d      	movs	r5, r7
 8001cd2:	e6b4      	b.n	8001a3e <__aeabi_dsub+0x7a>
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	4032      	ands	r2, r6
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d000      	beq.n	8001cde <__aeabi_dsub+0x31a>
 8001cdc:	e6e4      	b.n	8001aa8 <__aeabi_dsub+0xe4>
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <__aeabi_dsub+0x348>)
 8001ce0:	08f6      	lsrs	r6, r6, #3
 8001ce2:	074f      	lsls	r7, r1, #29
 8001ce4:	4337      	orrs	r7, r6
 8001ce6:	08ca      	lsrs	r2, r1, #3
 8001ce8:	429d      	cmp	r5, r3
 8001cea:	d000      	beq.n	8001cee <__aeabi_dsub+0x32a>
 8001cec:	e790      	b.n	8001c10 <__aeabi_dsub+0x24c>
 8001cee:	003b      	movs	r3, r7
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x332>
 8001cf4:	e1a6      	b.n	8002044 <__aeabi_dsub+0x680>
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	031b      	lsls	r3, r3, #12
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	0312      	lsls	r2, r2, #12
 8001cfe:	0b12      	lsrs	r2, r2, #12
 8001d00:	4d02      	ldr	r5, [pc, #8]	; (8001d0c <__aeabi_dsub+0x348>)
 8001d02:	e789      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001d04:	0015      	movs	r5, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	2700      	movs	r7, #0
 8001d0a:	e785      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001d0c:	000007ff 	.word	0x000007ff
 8001d10:	ff7fffff 	.word	0xff7fffff
 8001d14:	800fffff 	.word	0x800fffff
 8001d18:	2e00      	cmp	r6, #0
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dsub+0x35a>
 8001d1c:	e0c7      	b.n	8001eae <__aeabi_dsub+0x4ea>
 8001d1e:	1c6b      	adds	r3, r5, #1
 8001d20:	055e      	lsls	r6, r3, #21
 8001d22:	0d76      	lsrs	r6, r6, #21
 8001d24:	2e01      	cmp	r6, #1
 8001d26:	dc00      	bgt.n	8001d2a <__aeabi_dsub+0x366>
 8001d28:	e0f0      	b.n	8001f0c <__aeabi_dsub+0x548>
 8001d2a:	4dc8      	ldr	r5, [pc, #800]	; (800204c <__aeabi_dsub+0x688>)
 8001d2c:	42ab      	cmp	r3, r5
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x36e>
 8001d30:	e0b9      	b.n	8001ea6 <__aeabi_dsub+0x4e2>
 8001d32:	1885      	adds	r5, r0, r2
 8001d34:	000a      	movs	r2, r1
 8001d36:	4285      	cmp	r5, r0
 8001d38:	4189      	sbcs	r1, r1
 8001d3a:	4462      	add	r2, ip
 8001d3c:	4249      	negs	r1, r1
 8001d3e:	1851      	adds	r1, r2, r1
 8001d40:	2207      	movs	r2, #7
 8001d42:	07ce      	lsls	r6, r1, #31
 8001d44:	086d      	lsrs	r5, r5, #1
 8001d46:	432e      	orrs	r6, r5
 8001d48:	0849      	lsrs	r1, r1, #1
 8001d4a:	4032      	ands	r2, r6
 8001d4c:	001d      	movs	r5, r3
 8001d4e:	e6a9      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001d50:	49bf      	ldr	r1, [pc, #764]	; (8002050 <__aeabi_dsub+0x68c>)
 8001d52:	1aed      	subs	r5, r5, r3
 8001d54:	4011      	ands	r1, r2
 8001d56:	2207      	movs	r2, #7
 8001d58:	4032      	ands	r2, r6
 8001d5a:	e6a3      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001d5c:	0032      	movs	r2, r6
 8001d5e:	3828      	subs	r0, #40	; 0x28
 8001d60:	4082      	lsls	r2, r0
 8001d62:	2600      	movs	r6, #0
 8001d64:	e686      	b.n	8001a74 <__aeabi_dsub+0xb0>
 8001d66:	0030      	movs	r0, r6
 8001d68:	f000 fa16 	bl	8002198 <__clzsi2>
 8001d6c:	3020      	adds	r0, #32
 8001d6e:	e673      	b.n	8001a58 <__aeabi_dsub+0x94>
 8001d70:	4663      	mov	r3, ip
 8001d72:	4313      	orrs	r3, r2
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	4193      	sbcs	r3, r2
 8001d78:	1ac6      	subs	r6, r0, r3
 8001d7a:	42b0      	cmp	r0, r6
 8001d7c:	4180      	sbcs	r0, r0
 8001d7e:	4240      	negs	r0, r0
 8001d80:	1a09      	subs	r1, r1, r0
 8001d82:	e65c      	b.n	8001a3e <__aeabi_dsub+0x7a>
 8001d84:	000e      	movs	r6, r1
 8001d86:	4667      	mov	r7, ip
 8001d88:	4306      	orrs	r6, r0
 8001d8a:	4317      	orrs	r7, r2
 8001d8c:	2d00      	cmp	r5, #0
 8001d8e:	d15e      	bne.n	8001e4e <__aeabi_dsub+0x48a>
 8001d90:	2e00      	cmp	r6, #0
 8001d92:	d000      	beq.n	8001d96 <__aeabi_dsub+0x3d2>
 8001d94:	e0f3      	b.n	8001f7e <__aeabi_dsub+0x5ba>
 8001d96:	2f00      	cmp	r7, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dsub+0x3d8>
 8001d9a:	e11e      	b.n	8001fda <__aeabi_dsub+0x616>
 8001d9c:	465c      	mov	r4, fp
 8001d9e:	4661      	mov	r1, ip
 8001da0:	4691      	mov	r9, r2
 8001da2:	e72c      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001da4:	4fa9      	ldr	r7, [pc, #676]	; (800204c <__aeabi_dsub+0x688>)
 8001da6:	42be      	cmp	r6, r7
 8001da8:	d07b      	beq.n	8001ea2 <__aeabi_dsub+0x4de>
 8001daa:	001e      	movs	r6, r3
 8001dac:	e6f1      	b.n	8001b92 <__aeabi_dsub+0x1ce>
 8001dae:	0010      	movs	r0, r2
 8001db0:	3d1f      	subs	r5, #31
 8001db2:	40e8      	lsrs	r0, r5
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d003      	beq.n	8001dc0 <__aeabi_dsub+0x3fc>
 8001db8:	2140      	movs	r1, #64	; 0x40
 8001dba:	1acb      	subs	r3, r1, r3
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	4316      	orrs	r6, r2
 8001dc0:	1e73      	subs	r3, r6, #1
 8001dc2:	419e      	sbcs	r6, r3
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	4306      	orrs	r6, r0
 8001dc8:	4032      	ands	r2, r6
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2500      	movs	r5, #0
 8001dce:	e783      	b.n	8001cd8 <__aeabi_dsub+0x314>
 8001dd0:	1a16      	subs	r6, r2, r0
 8001dd2:	4663      	mov	r3, ip
 8001dd4:	42b2      	cmp	r2, r6
 8001dd6:	4180      	sbcs	r0, r0
 8001dd8:	1a59      	subs	r1, r3, r1
 8001dda:	4240      	negs	r0, r0
 8001ddc:	1a0b      	subs	r3, r1, r0
 8001dde:	4698      	mov	r8, r3
 8001de0:	465c      	mov	r4, fp
 8001de2:	e632      	b.n	8001a4a <__aeabi_dsub+0x86>
 8001de4:	2e1f      	cmp	r6, #31
 8001de6:	dd00      	ble.n	8001dea <__aeabi_dsub+0x426>
 8001de8:	e0ab      	b.n	8001f42 <__aeabi_dsub+0x57e>
 8001dea:	2720      	movs	r7, #32
 8001dec:	1bbb      	subs	r3, r7, r6
 8001dee:	469a      	mov	sl, r3
 8001df0:	4663      	mov	r3, ip
 8001df2:	4657      	mov	r7, sl
 8001df4:	40bb      	lsls	r3, r7
 8001df6:	4699      	mov	r9, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	464f      	mov	r7, r9
 8001dfc:	40f3      	lsrs	r3, r6
 8001dfe:	431f      	orrs	r7, r3
 8001e00:	003b      	movs	r3, r7
 8001e02:	4657      	mov	r7, sl
 8001e04:	40ba      	lsls	r2, r7
 8001e06:	1e57      	subs	r7, r2, #1
 8001e08:	41ba      	sbcs	r2, r7
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	4662      	mov	r2, ip
 8001e0e:	40f2      	lsrs	r2, r6
 8001e10:	1889      	adds	r1, r1, r2
 8001e12:	e698      	b.n	8001b46 <__aeabi_dsub+0x182>
 8001e14:	2720      	movs	r7, #32
 8001e16:	1bbb      	subs	r3, r7, r6
 8001e18:	469a      	mov	sl, r3
 8001e1a:	4663      	mov	r3, ip
 8001e1c:	4657      	mov	r7, sl
 8001e1e:	40bb      	lsls	r3, r7
 8001e20:	4699      	mov	r9, r3
 8001e22:	0013      	movs	r3, r2
 8001e24:	464f      	mov	r7, r9
 8001e26:	40f3      	lsrs	r3, r6
 8001e28:	431f      	orrs	r7, r3
 8001e2a:	003b      	movs	r3, r7
 8001e2c:	4657      	mov	r7, sl
 8001e2e:	40ba      	lsls	r2, r7
 8001e30:	1e57      	subs	r7, r2, #1
 8001e32:	41ba      	sbcs	r2, r7
 8001e34:	4313      	orrs	r3, r2
 8001e36:	4662      	mov	r2, ip
 8001e38:	40f2      	lsrs	r2, r6
 8001e3a:	1a89      	subs	r1, r1, r2
 8001e3c:	e79c      	b.n	8001d78 <__aeabi_dsub+0x3b4>
 8001e3e:	4b83      	ldr	r3, [pc, #524]	; (800204c <__aeabi_dsub+0x688>)
 8001e40:	429f      	cmp	r7, r3
 8001e42:	d05f      	beq.n	8001f04 <__aeabi_dsub+0x540>
 8001e44:	2580      	movs	r5, #128	; 0x80
 8001e46:	042d      	lsls	r5, r5, #16
 8001e48:	4273      	negs	r3, r6
 8001e4a:	4329      	orrs	r1, r5
 8001e4c:	e720      	b.n	8001c90 <__aeabi_dsub+0x2cc>
 8001e4e:	2e00      	cmp	r6, #0
 8001e50:	d10c      	bne.n	8001e6c <__aeabi_dsub+0x4a8>
 8001e52:	2f00      	cmp	r7, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x494>
 8001e56:	e0d0      	b.n	8001ffa <__aeabi_dsub+0x636>
 8001e58:	465c      	mov	r4, fp
 8001e5a:	4661      	mov	r1, ip
 8001e5c:	4691      	mov	r9, r2
 8001e5e:	4d7b      	ldr	r5, [pc, #492]	; (800204c <__aeabi_dsub+0x688>)
 8001e60:	e6cd      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001e62:	4f7a      	ldr	r7, [pc, #488]	; (800204c <__aeabi_dsub+0x688>)
 8001e64:	42be      	cmp	r6, r7
 8001e66:	d01c      	beq.n	8001ea2 <__aeabi_dsub+0x4de>
 8001e68:	001e      	movs	r6, r3
 8001e6a:	e665      	b.n	8001b38 <__aeabi_dsub+0x174>
 8001e6c:	2f00      	cmp	r7, #0
 8001e6e:	d018      	beq.n	8001ea2 <__aeabi_dsub+0x4de>
 8001e70:	08c0      	lsrs	r0, r0, #3
 8001e72:	074e      	lsls	r6, r1, #29
 8001e74:	4306      	orrs	r6, r0
 8001e76:	2080      	movs	r0, #128	; 0x80
 8001e78:	08c9      	lsrs	r1, r1, #3
 8001e7a:	0300      	lsls	r0, r0, #12
 8001e7c:	4201      	tst	r1, r0
 8001e7e:	d008      	beq.n	8001e92 <__aeabi_dsub+0x4ce>
 8001e80:	4663      	mov	r3, ip
 8001e82:	08dc      	lsrs	r4, r3, #3
 8001e84:	4204      	tst	r4, r0
 8001e86:	d104      	bne.n	8001e92 <__aeabi_dsub+0x4ce>
 8001e88:	0021      	movs	r1, r4
 8001e8a:	46da      	mov	sl, fp
 8001e8c:	08d2      	lsrs	r2, r2, #3
 8001e8e:	075e      	lsls	r6, r3, #29
 8001e90:	4316      	orrs	r6, r2
 8001e92:	00f3      	lsls	r3, r6, #3
 8001e94:	4699      	mov	r9, r3
 8001e96:	2401      	movs	r4, #1
 8001e98:	4653      	mov	r3, sl
 8001e9a:	00c9      	lsls	r1, r1, #3
 8001e9c:	0f72      	lsrs	r2, r6, #29
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	401c      	ands	r4, r3
 8001ea2:	4d6a      	ldr	r5, [pc, #424]	; (800204c <__aeabi_dsub+0x688>)
 8001ea4:	e6ab      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001ea6:	001d      	movs	r5, r3
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2700      	movs	r7, #0
 8001eac:	e6b4      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001eae:	2d00      	cmp	r5, #0
 8001eb0:	d159      	bne.n	8001f66 <__aeabi_dsub+0x5a2>
 8001eb2:	000b      	movs	r3, r1
 8001eb4:	4303      	orrs	r3, r0
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x4f6>
 8001eb8:	e6d6      	b.n	8001c68 <__aeabi_dsub+0x2a4>
 8001eba:	1c73      	adds	r3, r6, #1
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x4fc>
 8001ebe:	e0b2      	b.n	8002026 <__aeabi_dsub+0x662>
 8001ec0:	4b62      	ldr	r3, [pc, #392]	; (800204c <__aeabi_dsub+0x688>)
 8001ec2:	429f      	cmp	r7, r3
 8001ec4:	d01e      	beq.n	8001f04 <__aeabi_dsub+0x540>
 8001ec6:	43f3      	mvns	r3, r6
 8001ec8:	2b38      	cmp	r3, #56	; 0x38
 8001eca:	dc6f      	bgt.n	8001fac <__aeabi_dsub+0x5e8>
 8001ecc:	2b1f      	cmp	r3, #31
 8001ece:	dd00      	ble.n	8001ed2 <__aeabi_dsub+0x50e>
 8001ed0:	e097      	b.n	8002002 <__aeabi_dsub+0x63e>
 8001ed2:	2520      	movs	r5, #32
 8001ed4:	000e      	movs	r6, r1
 8001ed6:	1aed      	subs	r5, r5, r3
 8001ed8:	40ae      	lsls	r6, r5
 8001eda:	46b0      	mov	r8, r6
 8001edc:	0006      	movs	r6, r0
 8001ede:	46aa      	mov	sl, r5
 8001ee0:	40de      	lsrs	r6, r3
 8001ee2:	4645      	mov	r5, r8
 8001ee4:	4335      	orrs	r5, r6
 8001ee6:	002e      	movs	r6, r5
 8001ee8:	4655      	mov	r5, sl
 8001eea:	40a8      	lsls	r0, r5
 8001eec:	40d9      	lsrs	r1, r3
 8001eee:	1e45      	subs	r5, r0, #1
 8001ef0:	41a8      	sbcs	r0, r5
 8001ef2:	448c      	add	ip, r1
 8001ef4:	4306      	orrs	r6, r0
 8001ef6:	18b6      	adds	r6, r6, r2
 8001ef8:	4296      	cmp	r6, r2
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4251      	negs	r1, r2
 8001efe:	4461      	add	r1, ip
 8001f00:	003d      	movs	r5, r7
 8001f02:	e625      	b.n	8001b50 <__aeabi_dsub+0x18c>
 8001f04:	003d      	movs	r5, r7
 8001f06:	4661      	mov	r1, ip
 8001f08:	4691      	mov	r9, r2
 8001f0a:	e678      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f0c:	000b      	movs	r3, r1
 8001f0e:	4303      	orrs	r3, r0
 8001f10:	2d00      	cmp	r5, #0
 8001f12:	d000      	beq.n	8001f16 <__aeabi_dsub+0x552>
 8001f14:	e655      	b.n	8001bc2 <__aeabi_dsub+0x1fe>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f5      	beq.n	8001f06 <__aeabi_dsub+0x542>
 8001f1a:	4663      	mov	r3, ip
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x55e>
 8001f20:	e66d      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f22:	1886      	adds	r6, r0, r2
 8001f24:	4286      	cmp	r6, r0
 8001f26:	4180      	sbcs	r0, r0
 8001f28:	4461      	add	r1, ip
 8001f2a:	4240      	negs	r0, r0
 8001f2c:	1809      	adds	r1, r1, r0
 8001f2e:	2200      	movs	r2, #0
 8001f30:	020b      	lsls	r3, r1, #8
 8001f32:	d400      	bmi.n	8001f36 <__aeabi_dsub+0x572>
 8001f34:	e6d0      	b.n	8001cd8 <__aeabi_dsub+0x314>
 8001f36:	4b46      	ldr	r3, [pc, #280]	; (8002050 <__aeabi_dsub+0x68c>)
 8001f38:	3501      	adds	r5, #1
 8001f3a:	4019      	ands	r1, r3
 8001f3c:	e5b2      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001f3e:	46b1      	mov	r9, r6
 8001f40:	e65d      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f42:	0033      	movs	r3, r6
 8001f44:	4667      	mov	r7, ip
 8001f46:	3b20      	subs	r3, #32
 8001f48:	40df      	lsrs	r7, r3
 8001f4a:	003b      	movs	r3, r7
 8001f4c:	2e20      	cmp	r6, #32
 8001f4e:	d005      	beq.n	8001f5c <__aeabi_dsub+0x598>
 8001f50:	2740      	movs	r7, #64	; 0x40
 8001f52:	1bbf      	subs	r7, r7, r6
 8001f54:	4666      	mov	r6, ip
 8001f56:	40be      	lsls	r6, r7
 8001f58:	4332      	orrs	r2, r6
 8001f5a:	4690      	mov	r8, r2
 8001f5c:	4646      	mov	r6, r8
 8001f5e:	1e72      	subs	r2, r6, #1
 8001f60:	4196      	sbcs	r6, r2
 8001f62:	4333      	orrs	r3, r6
 8001f64:	e5ef      	b.n	8001b46 <__aeabi_dsub+0x182>
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <__aeabi_dsub+0x688>)
 8001f68:	429f      	cmp	r7, r3
 8001f6a:	d0cb      	beq.n	8001f04 <__aeabi_dsub+0x540>
 8001f6c:	2580      	movs	r5, #128	; 0x80
 8001f6e:	042d      	lsls	r5, r5, #16
 8001f70:	4273      	negs	r3, r6
 8001f72:	4329      	orrs	r1, r5
 8001f74:	e7a8      	b.n	8001ec8 <__aeabi_dsub+0x504>
 8001f76:	4308      	orrs	r0, r1
 8001f78:	1e41      	subs	r1, r0, #1
 8001f7a:	4188      	sbcs	r0, r1
 8001f7c:	e6a2      	b.n	8001cc4 <__aeabi_dsub+0x300>
 8001f7e:	2f00      	cmp	r7, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x5c0>
 8001f82:	e63c      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f84:	4663      	mov	r3, ip
 8001f86:	1a86      	subs	r6, r0, r2
 8001f88:	1acf      	subs	r7, r1, r3
 8001f8a:	42b0      	cmp	r0, r6
 8001f8c:	419b      	sbcs	r3, r3
 8001f8e:	425b      	negs	r3, r3
 8001f90:	1afb      	subs	r3, r7, r3
 8001f92:	4698      	mov	r8, r3
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	d54e      	bpl.n	8002036 <__aeabi_dsub+0x672>
 8001f98:	1a16      	subs	r6, r2, r0
 8001f9a:	4663      	mov	r3, ip
 8001f9c:	42b2      	cmp	r2, r6
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	1a59      	subs	r1, r3, r1
 8001fa2:	4252      	negs	r2, r2
 8001fa4:	1a89      	subs	r1, r1, r2
 8001fa6:	465c      	mov	r4, fp
 8001fa8:	2200      	movs	r2, #0
 8001faa:	e57b      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001fac:	4301      	orrs	r1, r0
 8001fae:	000e      	movs	r6, r1
 8001fb0:	1e71      	subs	r1, r6, #1
 8001fb2:	418e      	sbcs	r6, r1
 8001fb4:	e79f      	b.n	8001ef6 <__aeabi_dsub+0x532>
 8001fb6:	001d      	movs	r5, r3
 8001fb8:	000e      	movs	r6, r1
 8001fba:	3d20      	subs	r5, #32
 8001fbc:	40ee      	lsrs	r6, r5
 8001fbe:	46b0      	mov	r8, r6
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d004      	beq.n	8001fce <__aeabi_dsub+0x60a>
 8001fc4:	2540      	movs	r5, #64	; 0x40
 8001fc6:	1aeb      	subs	r3, r5, r3
 8001fc8:	4099      	lsls	r1, r3
 8001fca:	4308      	orrs	r0, r1
 8001fcc:	4681      	mov	r9, r0
 8001fce:	4648      	mov	r0, r9
 8001fd0:	4643      	mov	r3, r8
 8001fd2:	1e41      	subs	r1, r0, #1
 8001fd4:	4188      	sbcs	r0, r1
 8001fd6:	4318      	orrs	r0, r3
 8001fd8:	e674      	b.n	8001cc4 <__aeabi_dsub+0x300>
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2400      	movs	r4, #0
 8001fde:	e617      	b.n	8001c10 <__aeabi_dsub+0x24c>
 8001fe0:	1a16      	subs	r6, r2, r0
 8001fe2:	4663      	mov	r3, ip
 8001fe4:	42b2      	cmp	r2, r6
 8001fe6:	4192      	sbcs	r2, r2
 8001fe8:	1a59      	subs	r1, r3, r1
 8001fea:	4252      	negs	r2, r2
 8001fec:	1a89      	subs	r1, r1, r2
 8001fee:	003d      	movs	r5, r7
 8001ff0:	e525      	b.n	8001a3e <__aeabi_dsub+0x7a>
 8001ff2:	4661      	mov	r1, ip
 8001ff4:	4691      	mov	r9, r2
 8001ff6:	4d15      	ldr	r5, [pc, #84]	; (800204c <__aeabi_dsub+0x688>)
 8001ff8:	e601      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	0312      	lsls	r2, r2, #12
 8002000:	e679      	b.n	8001cf6 <__aeabi_dsub+0x332>
 8002002:	001d      	movs	r5, r3
 8002004:	000e      	movs	r6, r1
 8002006:	3d20      	subs	r5, #32
 8002008:	40ee      	lsrs	r6, r5
 800200a:	46b0      	mov	r8, r6
 800200c:	2b20      	cmp	r3, #32
 800200e:	d004      	beq.n	800201a <__aeabi_dsub+0x656>
 8002010:	2540      	movs	r5, #64	; 0x40
 8002012:	1aeb      	subs	r3, r5, r3
 8002014:	4099      	lsls	r1, r3
 8002016:	4308      	orrs	r0, r1
 8002018:	4681      	mov	r9, r0
 800201a:	464e      	mov	r6, r9
 800201c:	4643      	mov	r3, r8
 800201e:	1e71      	subs	r1, r6, #1
 8002020:	418e      	sbcs	r6, r1
 8002022:	431e      	orrs	r6, r3
 8002024:	e767      	b.n	8001ef6 <__aeabi_dsub+0x532>
 8002026:	1886      	adds	r6, r0, r2
 8002028:	4296      	cmp	r6, r2
 800202a:	419b      	sbcs	r3, r3
 800202c:	4461      	add	r1, ip
 800202e:	425b      	negs	r3, r3
 8002030:	18c9      	adds	r1, r1, r3
 8002032:	003d      	movs	r5, r7
 8002034:	e58c      	b.n	8001b50 <__aeabi_dsub+0x18c>
 8002036:	4647      	mov	r7, r8
 8002038:	4337      	orrs	r7, r6
 800203a:	d0ce      	beq.n	8001fda <__aeabi_dsub+0x616>
 800203c:	2207      	movs	r2, #7
 800203e:	4641      	mov	r1, r8
 8002040:	4032      	ands	r2, r6
 8002042:	e649      	b.n	8001cd8 <__aeabi_dsub+0x314>
 8002044:	2700      	movs	r7, #0
 8002046:	003a      	movs	r2, r7
 8002048:	e5e6      	b.n	8001c18 <__aeabi_dsub+0x254>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	000007ff 	.word	0x000007ff
 8002050:	ff7fffff 	.word	0xff7fffff

08002054 <__aeabi_d2iz>:
 8002054:	b530      	push	{r4, r5, lr}
 8002056:	4d14      	ldr	r5, [pc, #80]	; (80020a8 <__aeabi_d2iz+0x54>)
 8002058:	030a      	lsls	r2, r1, #12
 800205a:	004b      	lsls	r3, r1, #1
 800205c:	0b12      	lsrs	r2, r2, #12
 800205e:	0d5b      	lsrs	r3, r3, #21
 8002060:	0fc9      	lsrs	r1, r1, #31
 8002062:	2400      	movs	r4, #0
 8002064:	42ab      	cmp	r3, r5
 8002066:	dd11      	ble.n	800208c <__aeabi_d2iz+0x38>
 8002068:	4c10      	ldr	r4, [pc, #64]	; (80020ac <__aeabi_d2iz+0x58>)
 800206a:	42a3      	cmp	r3, r4
 800206c:	dc10      	bgt.n	8002090 <__aeabi_d2iz+0x3c>
 800206e:	2480      	movs	r4, #128	; 0x80
 8002070:	0364      	lsls	r4, r4, #13
 8002072:	4322      	orrs	r2, r4
 8002074:	4c0e      	ldr	r4, [pc, #56]	; (80020b0 <__aeabi_d2iz+0x5c>)
 8002076:	1ae4      	subs	r4, r4, r3
 8002078:	2c1f      	cmp	r4, #31
 800207a:	dd0c      	ble.n	8002096 <__aeabi_d2iz+0x42>
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <__aeabi_d2iz+0x60>)
 800207e:	1ac3      	subs	r3, r0, r3
 8002080:	40da      	lsrs	r2, r3
 8002082:	0013      	movs	r3, r2
 8002084:	425c      	negs	r4, r3
 8002086:	2900      	cmp	r1, #0
 8002088:	d100      	bne.n	800208c <__aeabi_d2iz+0x38>
 800208a:	001c      	movs	r4, r3
 800208c:	0020      	movs	r0, r4
 800208e:	bd30      	pop	{r4, r5, pc}
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <__aeabi_d2iz+0x64>)
 8002092:	18cc      	adds	r4, r1, r3
 8002094:	e7fa      	b.n	800208c <__aeabi_d2iz+0x38>
 8002096:	4d09      	ldr	r5, [pc, #36]	; (80020bc <__aeabi_d2iz+0x68>)
 8002098:	40e0      	lsrs	r0, r4
 800209a:	46ac      	mov	ip, r5
 800209c:	4463      	add	r3, ip
 800209e:	409a      	lsls	r2, r3
 80020a0:	0013      	movs	r3, r2
 80020a2:	4303      	orrs	r3, r0
 80020a4:	e7ee      	b.n	8002084 <__aeabi_d2iz+0x30>
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	000003fe 	.word	0x000003fe
 80020ac:	0000041d 	.word	0x0000041d
 80020b0:	00000433 	.word	0x00000433
 80020b4:	00000413 	.word	0x00000413
 80020b8:	7fffffff 	.word	0x7fffffff
 80020bc:	fffffbed 	.word	0xfffffbed

080020c0 <__aeabi_i2d>:
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d02d      	beq.n	8002122 <__aeabi_i2d+0x62>
 80020c6:	17c3      	asrs	r3, r0, #31
 80020c8:	18c5      	adds	r5, r0, r3
 80020ca:	405d      	eors	r5, r3
 80020cc:	0fc4      	lsrs	r4, r0, #31
 80020ce:	0028      	movs	r0, r5
 80020d0:	f000 f862 	bl	8002198 <__clzsi2>
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <__aeabi_i2d+0x6c>)
 80020d6:	1a1b      	subs	r3, r3, r0
 80020d8:	055b      	lsls	r3, r3, #21
 80020da:	0d5b      	lsrs	r3, r3, #21
 80020dc:	280a      	cmp	r0, #10
 80020de:	dd15      	ble.n	800210c <__aeabi_i2d+0x4c>
 80020e0:	380b      	subs	r0, #11
 80020e2:	4085      	lsls	r5, r0
 80020e4:	2200      	movs	r2, #0
 80020e6:	032d      	lsls	r5, r5, #12
 80020e8:	0b2d      	lsrs	r5, r5, #12
 80020ea:	2100      	movs	r1, #0
 80020ec:	0010      	movs	r0, r2
 80020ee:	032d      	lsls	r5, r5, #12
 80020f0:	0d0a      	lsrs	r2, r1, #20
 80020f2:	0b2d      	lsrs	r5, r5, #12
 80020f4:	0512      	lsls	r2, r2, #20
 80020f6:	432a      	orrs	r2, r5
 80020f8:	4d0d      	ldr	r5, [pc, #52]	; (8002130 <__aeabi_i2d+0x70>)
 80020fa:	051b      	lsls	r3, r3, #20
 80020fc:	402a      	ands	r2, r5
 80020fe:	4313      	orrs	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	07e4      	lsls	r4, r4, #31
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	4323      	orrs	r3, r4
 8002108:	0019      	movs	r1, r3
 800210a:	bd70      	pop	{r4, r5, r6, pc}
 800210c:	0002      	movs	r2, r0
 800210e:	0029      	movs	r1, r5
 8002110:	3215      	adds	r2, #21
 8002112:	4091      	lsls	r1, r2
 8002114:	000a      	movs	r2, r1
 8002116:	210b      	movs	r1, #11
 8002118:	1a08      	subs	r0, r1, r0
 800211a:	40c5      	lsrs	r5, r0
 800211c:	032d      	lsls	r5, r5, #12
 800211e:	0b2d      	lsrs	r5, r5, #12
 8002120:	e7e3      	b.n	80020ea <__aeabi_i2d+0x2a>
 8002122:	2400      	movs	r4, #0
 8002124:	2300      	movs	r3, #0
 8002126:	2500      	movs	r5, #0
 8002128:	2200      	movs	r2, #0
 800212a:	e7de      	b.n	80020ea <__aeabi_i2d+0x2a>
 800212c:	0000041e 	.word	0x0000041e
 8002130:	800fffff 	.word	0x800fffff

08002134 <__aeabi_ui2d>:
 8002134:	b510      	push	{r4, lr}
 8002136:	1e04      	subs	r4, r0, #0
 8002138:	d025      	beq.n	8002186 <__aeabi_ui2d+0x52>
 800213a:	f000 f82d 	bl	8002198 <__clzsi2>
 800213e:	4b14      	ldr	r3, [pc, #80]	; (8002190 <__aeabi_ui2d+0x5c>)
 8002140:	1a1b      	subs	r3, r3, r0
 8002142:	055b      	lsls	r3, r3, #21
 8002144:	0d5b      	lsrs	r3, r3, #21
 8002146:	280a      	cmp	r0, #10
 8002148:	dd12      	ble.n	8002170 <__aeabi_ui2d+0x3c>
 800214a:	380b      	subs	r0, #11
 800214c:	4084      	lsls	r4, r0
 800214e:	2200      	movs	r2, #0
 8002150:	0324      	lsls	r4, r4, #12
 8002152:	0b24      	lsrs	r4, r4, #12
 8002154:	2100      	movs	r1, #0
 8002156:	0010      	movs	r0, r2
 8002158:	0324      	lsls	r4, r4, #12
 800215a:	0d0a      	lsrs	r2, r1, #20
 800215c:	0b24      	lsrs	r4, r4, #12
 800215e:	0512      	lsls	r2, r2, #20
 8002160:	4322      	orrs	r2, r4
 8002162:	4c0c      	ldr	r4, [pc, #48]	; (8002194 <__aeabi_ui2d+0x60>)
 8002164:	051b      	lsls	r3, r3, #20
 8002166:	4022      	ands	r2, r4
 8002168:	4313      	orrs	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	0859      	lsrs	r1, r3, #1
 800216e:	bd10      	pop	{r4, pc}
 8002170:	0002      	movs	r2, r0
 8002172:	0021      	movs	r1, r4
 8002174:	3215      	adds	r2, #21
 8002176:	4091      	lsls	r1, r2
 8002178:	000a      	movs	r2, r1
 800217a:	210b      	movs	r1, #11
 800217c:	1a08      	subs	r0, r1, r0
 800217e:	40c4      	lsrs	r4, r0
 8002180:	0324      	lsls	r4, r4, #12
 8002182:	0b24      	lsrs	r4, r4, #12
 8002184:	e7e6      	b.n	8002154 <__aeabi_ui2d+0x20>
 8002186:	2300      	movs	r3, #0
 8002188:	2400      	movs	r4, #0
 800218a:	2200      	movs	r2, #0
 800218c:	e7e2      	b.n	8002154 <__aeabi_ui2d+0x20>
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	0000041e 	.word	0x0000041e
 8002194:	800fffff 	.word	0x800fffff

08002198 <__clzsi2>:
 8002198:	211c      	movs	r1, #28
 800219a:	2301      	movs	r3, #1
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	4298      	cmp	r0, r3
 80021a0:	d301      	bcc.n	80021a6 <__clzsi2+0xe>
 80021a2:	0c00      	lsrs	r0, r0, #16
 80021a4:	3910      	subs	r1, #16
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	4298      	cmp	r0, r3
 80021aa:	d301      	bcc.n	80021b0 <__clzsi2+0x18>
 80021ac:	0a00      	lsrs	r0, r0, #8
 80021ae:	3908      	subs	r1, #8
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	4298      	cmp	r0, r3
 80021b4:	d301      	bcc.n	80021ba <__clzsi2+0x22>
 80021b6:	0900      	lsrs	r0, r0, #4
 80021b8:	3904      	subs	r1, #4
 80021ba:	a202      	add	r2, pc, #8	; (adr r2, 80021c4 <__clzsi2+0x2c>)
 80021bc:	5c10      	ldrb	r0, [r2, r0]
 80021be:	1840      	adds	r0, r0, r1
 80021c0:	4770      	bx	lr
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	02020304 	.word	0x02020304
 80021c8:	01010101 	.word	0x01010101
	...

080021d4 <__clzdi2>:
 80021d4:	b510      	push	{r4, lr}
 80021d6:	2900      	cmp	r1, #0
 80021d8:	d103      	bne.n	80021e2 <__clzdi2+0xe>
 80021da:	f7ff ffdd 	bl	8002198 <__clzsi2>
 80021de:	3020      	adds	r0, #32
 80021e0:	e002      	b.n	80021e8 <__clzdi2+0x14>
 80021e2:	1c08      	adds	r0, r1, #0
 80021e4:	f7ff ffd8 	bl	8002198 <__clzsi2>
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)

080021ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_Init+0x3c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_Init+0x3c>)
 80021fe:	2140      	movs	r1, #64	; 0x40
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002204:	2000      	movs	r0, #0
 8002206:	f000 f811 	bl	800222c <HAL_InitTick>
 800220a:	1e03      	subs	r3, r0, #0
 800220c:	d003      	beq.n	8002216 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e001      	b.n	800221a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002216:	f004 f883 	bl	8006320 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b002      	add	sp, #8
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	40022000 	.word	0x40022000

0800222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002234:	230f      	movs	r3, #15
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_InitTick+0x50>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	23fa      	movs	r3, #250	; 0xfa
 8002242:	0099      	lsls	r1, r3, #2
 8002244:	0010      	movs	r0, r2
 8002246:	f7fd ff71 	bl	800012c <__udivsi3>
 800224a:	0003      	movs	r3, r0
 800224c:	0018      	movs	r0, r3
 800224e:	f000 f940 	bl	80024d2 <HAL_SYSTICK_Config>
 8002252:	1e03      	subs	r3, r0, #0
 8002254:	d004      	beq.n	8002260 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8002256:	230f      	movs	r3, #15
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e006      	b.n	800226e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	2301      	movs	r3, #1
 8002264:	425b      	negs	r3, r3
 8002266:	2200      	movs	r2, #0
 8002268:	0018      	movs	r0, r3
 800226a:	f000 f8fd 	bl	8002468 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800226e:	230f      	movs	r3, #15
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b004      	add	sp, #16
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000000 	.word	0x20000000

08002280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  uwTick++;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_IncTick+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	4b02      	ldr	r3, [pc, #8]	; (8002294 <HAL_IncTick+0x14>)
 800228c:	601a      	str	r2, [r3, #0]
}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200004b8 	.word	0x200004b8

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <HAL_GetTick+0x10>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	200004b8 	.word	0x200004b8

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff fff0 	bl	8002298 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3301      	adds	r3, #1
 80022c4:	d002      	beq.n	80022cc <HAL_Delay+0x20>
  {
    wait++;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	f7ff ffe3 	bl	8002298 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d8f7      	bhi.n	80022ce <HAL_Delay+0x22>
  {
  }
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b004      	add	sp, #16
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	0002      	movs	r2, r0
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80022f4:	1dfb      	adds	r3, r7, #7
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	001a      	movs	r2, r3
 80022fa:	231f      	movs	r3, #31
 80022fc:	401a      	ands	r2, r3
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <NVIC_EnableIRQ+0x28>)
 8002300:	2101      	movs	r1, #1
 8002302:	4091      	lsls	r1, r2
 8002304:	000a      	movs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}
 8002310:	e000e100 	.word	0xe000e100

08002314 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	0002      	movs	r2, r0
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	001a      	movs	r2, r3
 8002326:	231f      	movs	r3, #31
 8002328:	4013      	ands	r3, r2
 800232a:	4905      	ldr	r1, [pc, #20]	; (8002340 <NVIC_DisableIRQ+0x2c>)
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	0013      	movs	r3, r2
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	508b      	str	r3, [r1, r2]
}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b002      	add	sp, #8
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	e000e100 	.word	0xe000e100

08002344 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	0002      	movs	r2, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b7f      	cmp	r3, #127	; 0x7f
 8002358:	d932      	bls.n	80023c0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800235a:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <NVIC_SetPriority+0xd4>)
 800235c:	1dfb      	adds	r3, r7, #7
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	0019      	movs	r1, r3
 8002362:	230f      	movs	r3, #15
 8002364:	400b      	ands	r3, r1
 8002366:	3b08      	subs	r3, #8
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3306      	adds	r3, #6
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	18d3      	adds	r3, r2, r3
 8002370:	3304      	adds	r3, #4
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	1dfa      	adds	r2, r7, #7
 8002376:	7812      	ldrb	r2, [r2, #0]
 8002378:	0011      	movs	r1, r2
 800237a:	2203      	movs	r2, #3
 800237c:	400a      	ands	r2, r1
 800237e:	00d2      	lsls	r2, r2, #3
 8002380:	21ff      	movs	r1, #255	; 0xff
 8002382:	4091      	lsls	r1, r2
 8002384:	000a      	movs	r2, r1
 8002386:	43d2      	mvns	r2, r2
 8002388:	401a      	ands	r2, r3
 800238a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	019b      	lsls	r3, r3, #6
 8002390:	22ff      	movs	r2, #255	; 0xff
 8002392:	401a      	ands	r2, r3
 8002394:	1dfb      	adds	r3, r7, #7
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	0018      	movs	r0, r3
 800239a:	2303      	movs	r3, #3
 800239c:	4003      	ands	r3, r0
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023a2:	481d      	ldr	r0, [pc, #116]	; (8002418 <NVIC_SetPriority+0xd4>)
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	001c      	movs	r4, r3
 80023aa:	230f      	movs	r3, #15
 80023ac:	4023      	ands	r3, r4
 80023ae:	3b08      	subs	r3, #8
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	430a      	orrs	r2, r1
 80023b4:	3306      	adds	r3, #6
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	18c3      	adds	r3, r0, r3
 80023ba:	3304      	adds	r3, #4
 80023bc:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023be:	e027      	b.n	8002410 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c0:	4a16      	ldr	r2, [pc, #88]	; (800241c <NVIC_SetPriority+0xd8>)
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	33c0      	adds	r3, #192	; 0xc0
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	589b      	ldr	r3, [r3, r2]
 80023d0:	1dfa      	adds	r2, r7, #7
 80023d2:	7812      	ldrb	r2, [r2, #0]
 80023d4:	0011      	movs	r1, r2
 80023d6:	2203      	movs	r2, #3
 80023d8:	400a      	ands	r2, r1
 80023da:	00d2      	lsls	r2, r2, #3
 80023dc:	21ff      	movs	r1, #255	; 0xff
 80023de:	4091      	lsls	r1, r2
 80023e0:	000a      	movs	r2, r1
 80023e2:	43d2      	mvns	r2, r2
 80023e4:	401a      	ands	r2, r3
 80023e6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	019b      	lsls	r3, r3, #6
 80023ec:	22ff      	movs	r2, #255	; 0xff
 80023ee:	401a      	ands	r2, r3
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	0018      	movs	r0, r3
 80023f6:	2303      	movs	r3, #3
 80023f8:	4003      	ands	r3, r0
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023fe:	4807      	ldr	r0, [pc, #28]	; (800241c <NVIC_SetPriority+0xd8>)
 8002400:	1dfb      	adds	r3, r7, #7
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b25b      	sxtb	r3, r3
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	430a      	orrs	r2, r1
 800240a:	33c0      	adds	r3, #192	; 0xc0
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	501a      	str	r2, [r3, r0]
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b003      	add	sp, #12
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	e000ed00 	.word	0xe000ed00
 800241c:	e000e100 	.word	0xe000e100

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <SysTick_Config+0x40>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e010      	b.n	8002458 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <SysTick_Config+0x44>)
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	3a01      	subs	r2, #1
 800243c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	2301      	movs	r3, #1
 8002440:	425b      	negs	r3, r3
 8002442:	2103      	movs	r1, #3
 8002444:	0018      	movs	r0, r3
 8002446:	f7ff ff7d 	bl	8002344 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <SysTick_Config+0x44>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x44>)
 8002452:	2207      	movs	r2, #7
 8002454:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002456:	2300      	movs	r3, #0
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}
 8002460:	00ffffff 	.word	0x00ffffff
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	210f      	movs	r1, #15
 8002474:	187b      	adds	r3, r7, r1
 8002476:	1c02      	adds	r2, r0, #0
 8002478:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	187b      	adds	r3, r7, r1
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b25b      	sxtb	r3, r3
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f7ff ff5d 	bl	8002344 <NVIC_SetPriority>
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b004      	add	sp, #16
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	0002      	movs	r2, r0
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b25b      	sxtb	r3, r3
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff ff1f 	bl	80022e8 <NVIC_EnableIRQ>
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	0002      	movs	r2, r0
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff ff25 	bl	8002314 <NVIC_DisableIRQ>
}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b002      	add	sp, #8
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0018      	movs	r0, r3
 80024de:	f7ff ff9f 	bl	8002420 <SysTick_Config>
 80024e2:	0003      	movs	r3, r0
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	230f      	movs	r3, #15
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2225      	movs	r2, #37	; 0x25
 8002500:	5c9b      	ldrb	r3, [r3, r2]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d007      	beq.n	8002518 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2204      	movs	r2, #4
 800250c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800250e:	230f      	movs	r3, #15
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e02a      	b.n	800256e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	210e      	movs	r1, #14
 8002524:	438a      	bics	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2101      	movs	r1, #1
 8002534:	438a      	bics	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	221c      	movs	r2, #28
 800253e:	401a      	ands	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	2101      	movs	r1, #1
 8002546:	4091      	lsls	r1, r2
 8002548:	000a      	movs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2225      	movs	r2, #37	; 0x25
 8002550:	2101      	movs	r1, #1
 8002552:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	; 0x24
 8002558:	2100      	movs	r1, #0
 800255a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	0010      	movs	r0, r2
 800256c:	4798      	blx	r3
    }
  }
  return status;
 800256e:	230f      	movs	r3, #15
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781b      	ldrb	r3, [r3, #0]
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b004      	add	sp, #16
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002592:	e14f      	b.n	8002834 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2101      	movs	r1, #1
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4091      	lsls	r1, r2
 800259e:	000a      	movs	r2, r1
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d100      	bne.n	80025ac <HAL_GPIO_Init+0x30>
 80025aa:	e140      	b.n	800282e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x40>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b12      	cmp	r3, #18
 80025ba:	d123      	bne.n	8002604 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	58d3      	ldr	r3, [r2, r3]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2207      	movs	r2, #7
 80025ce:	4013      	ands	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	409a      	lsls	r2, r3
 80025d6:	0013      	movs	r3, r2
 80025d8:	43da      	mvns	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2107      	movs	r1, #7
 80025e8:	400b      	ands	r3, r1
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	409a      	lsls	r2, r3
 80025ee:	0013      	movs	r3, r2
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	6939      	ldr	r1, [r7, #16]
 8002602:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d00b      	beq.n	8002624 <HAL_GPIO_Init+0xa8>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d007      	beq.n	8002624 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002618:	2b11      	cmp	r3, #17
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b12      	cmp	r3, #18
 8002622:	d130      	bne.n	8002686 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	409a      	lsls	r2, r3
 8002632:	0013      	movs	r3, r2
 8002634:	43da      	mvns	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	409a      	lsls	r2, r3
 8002646:	0013      	movs	r3, r2
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265a:	2201      	movs	r2, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
 8002660:	0013      	movs	r3, r2
 8002662:	43da      	mvns	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	2201      	movs	r2, #1
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
 8002678:	0013      	movs	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	409a      	lsls	r2, r3
 8002694:	0013      	movs	r3, r2
 8002696:	43da      	mvns	r2, r3
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2203      	movs	r2, #3
 80026a4:	401a      	ands	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	0013      	movs	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	409a      	lsls	r2, r3
 80026c8:	0013      	movs	r3, r2
 80026ca:	43da      	mvns	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	0013      	movs	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	055b      	lsls	r3, r3, #21
 80026f2:	4013      	ands	r3, r2
 80026f4:	d100      	bne.n	80026f8 <HAL_GPIO_Init+0x17c>
 80026f6:	e09a      	b.n	800282e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f8:	4b54      	ldr	r3, [pc, #336]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80026fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80026fe:	2101      	movs	r1, #1
 8002700:	430a      	orrs	r2, r1
 8002702:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8002704:	4a52      	ldr	r2, [pc, #328]	; (8002850 <HAL_GPIO_Init+0x2d4>)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	589b      	ldr	r3, [r3, r2]
 8002710:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2203      	movs	r2, #3
 8002716:	4013      	ands	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	409a      	lsls	r2, r3
 800271e:	0013      	movs	r3, r2
 8002720:	43da      	mvns	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	23a0      	movs	r3, #160	; 0xa0
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	429a      	cmp	r2, r3
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x1ea>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a47      	ldr	r2, [pc, #284]	; (8002854 <HAL_GPIO_Init+0x2d8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x1e6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a46      	ldr	r2, [pc, #280]	; (8002858 <HAL_GPIO_Init+0x2dc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x1e2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a45      	ldr	r2, [pc, #276]	; (800285c <HAL_GPIO_Init+0x2e0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x1de>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a44      	ldr	r2, [pc, #272]	; (8002860 <HAL_GPIO_Init+0x2e4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x1da>
 8002752:	2305      	movs	r3, #5
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x1ec>
 8002756:	2306      	movs	r3, #6
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x1ec>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x1ec>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x1ec>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x1ec>
 8002766:	2300      	movs	r3, #0
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	2103      	movs	r1, #3
 800276c:	400a      	ands	r2, r1
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	4093      	lsls	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002778:	4935      	ldr	r1, [pc, #212]	; (8002850 <HAL_GPIO_Init+0x2d4>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002786:	4b37      	ldr	r3, [pc, #220]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43da      	mvns	r2, r3
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	025b      	lsls	r3, r3, #9
 800279e:	4013      	ands	r3, r2
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027aa:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80027b0:	4b2c      	ldr	r3, [pc, #176]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	43da      	mvns	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	029b      	lsls	r3, r3, #10
 80027c8:	4013      	ands	r3, r2
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027d4:	4b23      	ldr	r3, [pc, #140]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43da      	mvns	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	035b      	lsls	r3, r3, #13
 80027f2:	4013      	ands	r3, r2
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	43da      	mvns	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	039b      	lsls	r3, r3, #14
 800281c:	4013      	ands	r3, r2
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3301      	adds	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	40da      	lsrs	r2, r3
 800283c:	1e13      	subs	r3, r2, #0
 800283e:	d000      	beq.n	8002842 <HAL_GPIO_Init+0x2c6>
 8002840:	e6a8      	b.n	8002594 <HAL_GPIO_Init+0x18>
  }
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b006      	add	sp, #24
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	40021000 	.word	0x40021000
 8002850:	40010000 	.word	0x40010000
 8002854:	50000400 	.word	0x50000400
 8002858:	50000800 	.word	0x50000800
 800285c:	50000c00 	.word	0x50000c00
 8002860:	50001c00 	.word	0x50001c00
 8002864:	40010400 	.word	0x40010400

08002868 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800287e:	e0b6      	b.n	80029ee <HAL_GPIO_DeInit+0x186>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002880:	2201      	movs	r2, #1
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	409a      	lsls	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

    if(iocurrent)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d100      	bne.n	8002894 <HAL_GPIO_DeInit+0x2c>
 8002892:	e0a9      	b.n	80029e8 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2103      	movs	r1, #3
 800289e:	4099      	lsls	r1, r3
 80028a0:	000b      	movs	r3, r1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]
           
      /* Configure the default Alternate Function in current IO */ 
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	08da      	lsrs	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	0092      	lsls	r2, r2, #2
 80028b2:	58d3      	ldr	r3, [r2, r3]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	2107      	movs	r1, #7
 80028b8:	400a      	ands	r2, r1
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	210f      	movs	r1, #15
 80028be:	4091      	lsls	r1, r2
 80028c0:	000a      	movs	r2, r1
 80028c2:	43d1      	mvns	r1, r2
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	08d2      	lsrs	r2, r2, #3
 80028c8:	4019      	ands	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	50d1      	str	r1, [r2, r3]
      
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	0052      	lsls	r2, r2, #1
 80028da:	2103      	movs	r1, #3
 80028dc:	4091      	lsls	r1, r2
 80028de:	000a      	movs	r2, r1
 80028e0:	43d2      	mvns	r2, r2
 80028e2:	401a      	ands	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	609a      	str	r2, [r3, #8]
      
      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2101      	movs	r1, #1
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4091      	lsls	r1, r2
 80028f2:	000a      	movs	r2, r1
 80028f4:	43d2      	mvns	r2, r2
 80028f6:	401a      	ands	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	605a      	str	r2, [r3, #4]
      
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	0052      	lsls	r2, r2, #1
 8002904:	2103      	movs	r1, #3
 8002906:	4091      	lsls	r1, r2
 8002908:	000a      	movs	r2, r1
 800290a:	43d2      	mvns	r2, r2
 800290c:	401a      	ands	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60da      	str	r2, [r3, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002912:	4a3c      	ldr	r2, [pc, #240]	; (8002a04 <HAL_GPIO_DeInit+0x19c>)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	589b      	ldr	r3, [r3, r2]
 800291e:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2203      	movs	r2, #3
 8002924:	4013      	ands	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	220f      	movs	r2, #15
 800292a:	409a      	lsls	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	23a0      	movs	r3, #160	; 0xa0
 8002936:	05db      	lsls	r3, r3, #23
 8002938:	429a      	cmp	r2, r3
 800293a:	d019      	beq.n	8002970 <HAL_GPIO_DeInit+0x108>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a32      	ldr	r2, [pc, #200]	; (8002a08 <HAL_GPIO_DeInit+0x1a0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d013      	beq.n	800296c <HAL_GPIO_DeInit+0x104>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a31      	ldr	r2, [pc, #196]	; (8002a0c <HAL_GPIO_DeInit+0x1a4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00d      	beq.n	8002968 <HAL_GPIO_DeInit+0x100>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a30      	ldr	r2, [pc, #192]	; (8002a10 <HAL_GPIO_DeInit+0x1a8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <HAL_GPIO_DeInit+0xfc>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a2f      	ldr	r2, [pc, #188]	; (8002a14 <HAL_GPIO_DeInit+0x1ac>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_GPIO_DeInit+0xf8>
 800295c:	2305      	movs	r3, #5
 800295e:	e008      	b.n	8002972 <HAL_GPIO_DeInit+0x10a>
 8002960:	2306      	movs	r3, #6
 8002962:	e006      	b.n	8002972 <HAL_GPIO_DeInit+0x10a>
 8002964:	2303      	movs	r3, #3
 8002966:	e004      	b.n	8002972 <HAL_GPIO_DeInit+0x10a>
 8002968:	2302      	movs	r3, #2
 800296a:	e002      	b.n	8002972 <HAL_GPIO_DeInit+0x10a>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_GPIO_DeInit+0x10a>
 8002970:	2300      	movs	r3, #0
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	2103      	movs	r1, #3
 8002976:	400a      	ands	r2, r1
 8002978:	0092      	lsls	r2, r2, #2
 800297a:	4093      	lsls	r3, r2
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	429a      	cmp	r2, r3
 8002980:	d132      	bne.n	80029e8 <HAL_GPIO_DeInit+0x180>
      {
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2203      	movs	r2, #3
 8002986:	4013      	ands	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	220f      	movs	r2, #15
 800298c:	409a      	lsls	r2, r3
 800298e:	0013      	movs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002992:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <HAL_GPIO_DeInit+0x19c>)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	589a      	ldr	r2, [r3, r2]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	43d9      	mvns	r1, r3
 80029a2:	4818      	ldr	r0, [pc, #96]	; (8002a04 <HAL_GPIO_DeInit+0x19c>)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	400a      	ands	r2, r1
 80029aa:	3302      	adds	r3, #2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	501a      	str	r2, [r3, r0]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_GPIO_DeInit+0x1b0>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <HAL_GPIO_DeInit+0x1b0>)
 80029ba:	400a      	ands	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_GPIO_DeInit+0x1b0>)
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43d9      	mvns	r1, r3
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <HAL_GPIO_DeInit+0x1b0>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_GPIO_DeInit+0x1b0>)
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_GPIO_DeInit+0x1b0>)
 80029d6:	400a      	ands	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_GPIO_DeInit+0x1b0>)
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43d9      	mvns	r1, r3
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <HAL_GPIO_DeInit+0x1b0>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]
      }
    }
     position++;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3301      	adds	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	40da      	lsrs	r2, r3
 80029f4:	1e13      	subs	r3, r2, #0
 80029f6:	d000      	beq.n	80029fa <HAL_GPIO_DeInit+0x192>
 80029f8:	e742      	b.n	8002880 <HAL_GPIO_DeInit+0x18>
  }
}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b006      	add	sp, #24
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	40010000 	.word	0x40010000
 8002a08:	50000400 	.word	0x50000400
 8002a0c:	50000800 	.word	0x50000800
 8002a10:	50000c00 	.word	0x50000c00
 8002a14:	50001c00 	.word	0x50001c00
 8002a18:	40010400 	.word	0x40010400

08002a1c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	0008      	movs	r0, r1
 8002a26:	0011      	movs	r1, r2
 8002a28:	1cbb      	adds	r3, r7, #2
 8002a2a:	1c02      	adds	r2, r0, #0
 8002a2c:	801a      	strh	r2, [r3, #0]
 8002a2e:	1c7b      	adds	r3, r7, #1
 8002a30:	1c0a      	adds	r2, r1, #0
 8002a32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8002a34:	1c7b      	adds	r3, r7, #1
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3c:	1cbb      	adds	r3, r7, #2
 8002a3e:	881a      	ldrh	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002a46:	1cbb      	adds	r3, r7, #2
 8002a48:	881a      	ldrh	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b002      	add	sp, #8
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e022      	b.n	8002aae <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2241      	movs	r2, #65	; 0x41
 8002a6c:	2124      	movs	r1, #36	; 0x24
 8002a6e:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f003 fc60 	bl	8006348 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2241      	movs	r2, #65	; 0x41
 8002a92:	2100      	movs	r1, #0
 8002a94:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2242      	movs	r2, #66	; 0x42
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2240      	movs	r2, #64	; 0x40
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	68f9      	ldr	r1, [r7, #12]
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
  }
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b004      	add	sp, #16
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	001a      	movs	r2, r3
 8002b08:	2301      	movs	r3, #1
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d010      	beq.n	8002b30 <HAL_I2C_ER_IRQHandler+0x46>
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	09db      	lsrs	r3, r3, #7
 8002b12:	001a      	movs	r2, r3
 8002b14:	2301      	movs	r3, #1
 8002b16:	4013      	ands	r3, r2
 8002b18:	d00a      	beq.n	8002b30 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	2201      	movs	r2, #1
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	0052      	lsls	r2, r2, #1
 8002b2e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	0a9b      	lsrs	r3, r3, #10
 8002b34:	001a      	movs	r2, r3
 8002b36:	2301      	movs	r3, #1
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d010      	beq.n	8002b5e <HAL_I2C_ER_IRQHandler+0x74>
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	09db      	lsrs	r3, r3, #7
 8002b40:	001a      	movs	r2, r3
 8002b42:	2301      	movs	r3, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	d00a      	beq.n	8002b5e <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2280      	movs	r2, #128	; 0x80
 8002b5a:	00d2      	lsls	r2, r2, #3
 8002b5c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	0a5b      	lsrs	r3, r3, #9
 8002b62:	001a      	movs	r2, r3
 8002b64:	2301      	movs	r3, #1
 8002b66:	4013      	ands	r3, r2
 8002b68:	d010      	beq.n	8002b8c <HAL_I2C_ER_IRQHandler+0xa2>
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	09db      	lsrs	r3, r3, #7
 8002b6e:	001a      	movs	r2, r3
 8002b70:	2301      	movs	r3, #1
 8002b72:	4013      	ands	r3, r2
 8002b74:	d00a      	beq.n	8002b8c <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	220b      	movs	r2, #11
 8002b96:	4013      	ands	r3, r2
 8002b98:	d005      	beq.n	8002ba6 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0011      	movs	r1, r2
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 fb71 	bl	8003288 <I2C_ITError>
  }
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b006      	add	sp, #24
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b002      	add	sp, #8
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b002      	add	sp, #8
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	0008      	movs	r0, r1
 8002bd8:	0011      	movs	r1, r2
 8002bda:	1cfb      	adds	r3, r7, #3
 8002bdc:	1c02      	adds	r2, r0, #0
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	003b      	movs	r3, r7
 8002be2:	1c0a      	adds	r2, r1, #0
 8002be4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b002      	add	sp, #8
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b002      	add	sp, #8
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b002      	add	sp, #8
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2240      	movs	r2, #64	; 0x40
 8002c36:	5c9b      	ldrb	r3, [r3, r2]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <I2C_Slave_ISR_IT+0x20>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e0fe      	b.n	8002e3e <I2C_Slave_ISR_IT+0x21e>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2240      	movs	r2, #64	; 0x40
 8002c44:	2101      	movs	r1, #1
 8002c46:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	2301      	movs	r3, #1
 8002c50:	4013      	ands	r3, r2
 8002c52:	d054      	beq.n	8002cfe <I2C_Slave_ISR_IT+0xde>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	001a      	movs	r2, r3
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d04e      	beq.n	8002cfe <I2C_Slave_ISR_IT+0xde>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d12d      	bne.n	8002cc6 <I2C_Slave_ISR_IT+0xa6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2241      	movs	r2, #65	; 0x41
 8002c6e:	5c9b      	ldrb	r3, [r3, r2]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b28      	cmp	r3, #40	; 0x28
 8002c74:	d10b      	bne.n	8002c8e <I2C_Slave_ISR_IT+0x6e>
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	049b      	lsls	r3, r3, #18
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d106      	bne.n	8002c8e <I2C_Slave_ISR_IT+0x6e>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, ITFlags);
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	0011      	movs	r1, r2
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 faa4 	bl	80031d4 <I2C_ITListenCplt>
 8002c8c:	e036      	b.n	8002cfc <I2C_Slave_ISR_IT+0xdc>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2241      	movs	r2, #65	; 0x41
 8002c92:	5c9b      	ldrb	r3, [r3, r2]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b29      	cmp	r3, #41	; 0x29
 8002c98:	d110      	bne.n	8002cbc <I2C_Slave_ISR_IT+0x9c>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <I2C_Slave_ISR_IT+0x228>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00c      	beq.n	8002cbc <I2C_Slave_ISR_IT+0x9c>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 fbbd 	bl	800342c <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 f96e 	bl	8002f96 <I2C_ITSlaveSeqCplt>
 8002cba:	e01f      	b.n	8002cfc <I2C_Slave_ISR_IT+0xdc>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002cc4:	e0a1      	b.n	8002e0a <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2210      	movs	r2, #16
 8002ccc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <I2C_Slave_ISR_IT+0xcc>
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	045b      	lsls	r3, r3, #17
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d000      	beq.n	8002cec <I2C_Slave_ISR_IT+0xcc>
 8002cea:	e08e      	b.n	8002e0a <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 fac7 	bl	8003288 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002cfa:	e086      	b.n	8002e0a <I2C_Slave_ISR_IT+0x1ea>
 8002cfc:	e085      	b.n	8002e0a <I2C_Slave_ISR_IT+0x1ea>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	001a      	movs	r2, r3
 8002d04:	2301      	movs	r3, #1
 8002d06:	4013      	ands	r3, r2
 8002d08:	d035      	beq.n	8002d76 <I2C_Slave_ISR_IT+0x156>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	001a      	movs	r2, r3
 8002d10:	2301      	movs	r3, #1
 8002d12:	4013      	ands	r3, r2
 8002d14:	d02f      	beq.n	8002d76 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01c      	beq.n	8002d5a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Remove RXNE flag on temporary variable as read done */
      ITFlags &= ~I2C_FLAG_RXNE;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2204      	movs	r2, #4
 8002d24:	4393      	bics	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d154      	bne.n	8002e0e <I2C_Slave_ISR_IT+0x1ee>
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	4a38      	ldr	r2, [pc, #224]	; (8002e48 <I2C_Slave_ISR_IT+0x228>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d050      	beq.n	8002e0e <I2C_Slave_ISR_IT+0x1ee>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 f911 	bl	8002f96 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d74:	e04b      	b.n	8002e0e <I2C_Slave_ISR_IT+0x1ee>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	001a      	movs	r2, r3
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d00c      	beq.n	8002d9c <I2C_Slave_ISR_IT+0x17c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	08db      	lsrs	r3, r3, #3
 8002d86:	001a      	movs	r2, r3
 8002d88:	2301      	movs	r3, #1
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d006      	beq.n	8002d9c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	0011      	movs	r1, r2
 8002d94:	0018      	movs	r0, r3
 8002d96:	f000 f859 	bl	8002e4c <I2C_ITAddrCplt>
 8002d9a:	e039      	b.n	8002e10 <I2C_Slave_ISR_IT+0x1f0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	001a      	movs	r2, r3
 8002da2:	2301      	movs	r3, #1
 8002da4:	4013      	ands	r3, r2
 8002da6:	d033      	beq.n	8002e10 <I2C_Slave_ISR_IT+0x1f0>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	001a      	movs	r2, r3
 8002dae:	2301      	movs	r3, #1
 8002db0:	4013      	ands	r3, r2
 8002db2:	d02d      	beq.n	8002e10 <I2C_Slave_ISR_IT+0x1f0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d018      	beq.n	8002df0 <I2C_Slave_ISR_IT+0x1d0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
 8002dee:	e00f      	b.n	8002e10 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	045b      	lsls	r3, r3, #17
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d002      	beq.n	8002e00 <I2C_Slave_ISR_IT+0x1e0>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d107      	bne.n	8002e10 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 f8c7 	bl	8002f96 <I2C_ITSlaveSeqCplt>
 8002e08:	e002      	b.n	8002e10 <I2C_Slave_ISR_IT+0x1f0>
    if (hi2c->XferCount == 0U)
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	e000      	b.n	8002e10 <I2C_Slave_ISR_IT+0x1f0>
    if ((hi2c->XferCount == 0U) && \
 8002e0e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	001a      	movs	r2, r3
 8002e16:	2301      	movs	r3, #1
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <I2C_Slave_ISR_IT+0x214>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	001a      	movs	r2, r3
 8002e22:	2301      	movs	r3, #1
 8002e24:	4013      	ands	r3, r2
 8002e26:	d005      	beq.n	8002e34 <I2C_Slave_ISR_IT+0x214>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	0011      	movs	r1, r2
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f000 f8f2 	bl	8003018 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2240      	movs	r2, #64	; 0x40
 8002e38:	2100      	movs	r1, #0
 8002e3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b006      	add	sp, #24
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	ffff0000 	.word	0xffff0000

08002e4c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2241      	movs	r2, #65	; 0x41
 8002e5a:	5c9b      	ldrb	r3, [r3, r2]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	001a      	movs	r2, r3
 8002e60:	2328      	movs	r3, #40	; 0x28
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b28      	cmp	r3, #40	; 0x28
 8002e66:	d000      	beq.n	8002e6a <I2C_ITAddrCplt+0x1e>
 8002e68:	e089      	b.n	8002f7e <I2C_ITAddrCplt+0x132>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	230f      	movs	r3, #15
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2101      	movs	r1, #1
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	230c      	movs	r3, #12
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	21fe      	movs	r1, #254	; 0xfe
 8002e8e:	400a      	ands	r2, r1
 8002e90:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	230a      	movs	r3, #10
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	0592      	lsls	r2, r2, #22
 8002ea0:	0d92      	lsrs	r2, r2, #22
 8002ea2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	2308      	movs	r3, #8
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	21fe      	movs	r1, #254	; 0xfe
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d14b      	bne.n	8002f56 <I2C_ITAddrCplt+0x10a>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002ebe:	230a      	movs	r3, #10
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	09db      	lsrs	r3, r3, #7
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	230c      	movs	r3, #12
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	4053      	eors	r3, r2
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	2306      	movs	r3, #6
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d124      	bne.n	8002f24 <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 8002eda:	230c      	movs	r3, #12
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	220a      	movs	r2, #10
 8002ee0:	18ba      	adds	r2, r7, r2
 8002ee2:	8812      	ldrh	r2, [r2, #0]
 8002ee4:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d14a      	bne.n	8002f8e <I2C_ITAddrCplt+0x142>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2208      	movs	r2, #8
 8002f04:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2240      	movs	r2, #64	; 0x40
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f0e:	230c      	movs	r3, #12
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	881a      	ldrh	r2, [r3, #0]
 8002f14:	230f      	movs	r3, #15
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	7819      	ldrb	r1, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7ff fe56 	bl	8002bce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f22:	e034      	b.n	8002f8e <I2C_ITAddrCplt+0x142>
        slaveaddrcode = ownadd2code;
 8002f24:	240c      	movs	r4, #12
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	2208      	movs	r2, #8
 8002f2a:	18ba      	adds	r2, r7, r2
 8002f2c:	8812      	ldrh	r2, [r2, #0]
 8002f2e:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2104      	movs	r1, #4
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 fac1 	bl	80034bc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	2100      	movs	r1, #0
 8002f40:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f42:	193b      	adds	r3, r7, r4
 8002f44:	881a      	ldrh	r2, [r3, #0]
 8002f46:	230f      	movs	r3, #15
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	7819      	ldrb	r1, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff fe3d 	bl	8002bce <HAL_I2C_AddrCallback>
}
 8002f54:	e01b      	b.n	8002f8e <I2C_ITAddrCplt+0x142>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2104      	movs	r1, #4
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 faae 	bl	80034bc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	2100      	movs	r1, #0
 8002f66:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f68:	230c      	movs	r3, #12
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	881a      	ldrh	r2, [r3, #0]
 8002f6e:	230f      	movs	r3, #15
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	7819      	ldrb	r1, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff fe29 	bl	8002bce <HAL_I2C_AddrCallback>
}
 8002f7c:	e007      	b.n	8002f8e <I2C_ITAddrCplt+0x142>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2208      	movs	r2, #8
 8002f84:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2240      	movs	r2, #64	; 0x40
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]
}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b005      	add	sp, #20
 8002f94:	bd90      	pop	{r4, r7, pc}

08002f96 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2242      	movs	r2, #66	; 0x42
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	5499      	strb	r1, [r3, r2]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2241      	movs	r2, #65	; 0x41
 8002faa:	5c9b      	ldrb	r3, [r3, r2]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b29      	cmp	r3, #41	; 0x29
 8002fb0:	d114      	bne.n	8002fdc <I2C_ITSlaveSeqCplt+0x46>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2241      	movs	r2, #65	; 0x41
 8002fb6:	2128      	movs	r1, #40	; 0x28
 8002fb8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2221      	movs	r2, #33	; 0x21
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 fa79 	bl	80034bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2240      	movs	r2, #64	; 0x40
 8002fce:	2100      	movs	r1, #0
 8002fd0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff fdea 	bl	8002bae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002fda:	e019      	b.n	8003010 <I2C_ITSlaveSeqCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2241      	movs	r2, #65	; 0x41
 8002fe0:	5c9b      	ldrb	r3, [r3, r2]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fe6:	d113      	bne.n	8003010 <I2C_ITSlaveSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2241      	movs	r2, #65	; 0x41
 8002fec:	2128      	movs	r1, #40	; 0x28
 8002fee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2222      	movs	r2, #34	; 0x22
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 fa5e 	bl	80034bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2240      	movs	r2, #64	; 0x40
 8003004:	2100      	movs	r1, #0
 8003006:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	0018      	movs	r0, r3
 800300c:	f7ff fdd7 	bl	8002bbe <HAL_I2C_SlaveRxCpltCallback>
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2220      	movs	r2, #32
 8003030:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2107      	movs	r1, #7
 8003036:	0018      	movs	r0, r3
 8003038:	f000 fa40 	bl	80034bc <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	0209      	lsls	r1, r1, #8
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	495c      	ldr	r1, [pc, #368]	; (80031cc <I2C_ITSlaveCplt+0x1b4>)
 800305a:	400a      	ands	r2, r1
 800305c:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0018      	movs	r0, r3
 8003062:	f000 f9e3 	bl	800342c <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	0b9b      	lsrs	r3, r3, #14
 800306a:	001a      	movs	r2, r3
 800306c:	2301      	movs	r3, #1
 800306e:	4013      	ands	r3, r2
 8003070:	d00b      	beq.n	800308a <I2C_ITSlaveCplt+0x72>
  {
    if (hi2c->hdmatx != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	2b00      	cmp	r3, #0
 8003078:	d018      	beq.n	80030ac <I2C_ITSlaveCplt+0x94>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003088:	e010      	b.n	80030ac <I2C_ITSlaveCplt+0x94>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0bdb      	lsrs	r3, r3, #15
 800308e:	001a      	movs	r2, r3
 8003090:	2301      	movs	r3, #1
 8003092:	4013      	ands	r3, r2
 8003094:	d00a      	beq.n	80030ac <I2C_ITSlaveCplt+0x94>
  {
    if (hi2c->hdmarx != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d006      	beq.n	80030ac <I2C_ITSlaveCplt+0x94>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	001a      	movs	r2, r3
 80030b2:	2301      	movs	r3, #1
 80030b4:	4013      	ands	r3, r2
 80030b6:	d020      	beq.n	80030fa <I2C_ITSlaveCplt+0xe2>
  {
    /* Remove RXNE flag on temporary variable as read done */
    ITFlags &= ~I2C_FLAG_RXNE;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2204      	movs	r2, #4
 80030bc:	4393      	bics	r3, r2
 80030be:	603b      	str	r3, [r7, #0]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00c      	beq.n	80030fa <I2C_ITSlaveCplt+0xe2>
    {
      hi2c->XferSize--;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <I2C_ITSlaveCplt+0xf8>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	2204      	movs	r2, #4
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2242      	movs	r2, #66	; 0x42
 800311a:	2100      	movs	r1, #0
 800311c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	2b00      	cmp	r3, #0
 800312a:	d013      	beq.n	8003154 <I2C_ITSlaveCplt+0x13c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	0011      	movs	r1, r2
 8003134:	0018      	movs	r0, r3
 8003136:	f000 f8a7 	bl	8003288 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2241      	movs	r2, #65	; 0x41
 800313e:	5c9b      	ldrb	r3, [r3, r2]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b28      	cmp	r3, #40	; 0x28
 8003144:	d13e      	bne.n	80031c4 <I2C_ITSlaveCplt+0x1ac>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, ITFlags);
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	0011      	movs	r1, r2
 800314c:	0018      	movs	r0, r3
 800314e:	f000 f841 	bl	80031d4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003152:	e037      	b.n	80031c4 <I2C_ITSlaveCplt+0x1ac>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <I2C_ITSlaveCplt+0x1b8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <I2C_ITSlaveCplt+0x16e>
    I2C_ITSlaveSeqCplt(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff ff18 	bl	8002f96 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <I2C_ITSlaveCplt+0x1b8>)
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2241      	movs	r2, #65	; 0x41
 8003170:	2120      	movs	r1, #32
 8003172:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2240      	movs	r2, #64	; 0x40
 8003178:	2100      	movs	r1, #0
 800317a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	0018      	movs	r0, r3
 8003180:	f7ff fd35 	bl	8002bee <HAL_I2C_ListenCpltCallback>
}
 8003184:	e01e      	b.n	80031c4 <I2C_ITSlaveCplt+0x1ac>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2241      	movs	r2, #65	; 0x41
 800318a:	5c9b      	ldrb	r3, [r3, r2]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b22      	cmp	r3, #34	; 0x22
 8003190:	d10c      	bne.n	80031ac <I2C_ITSlaveCplt+0x194>
    hi2c->State = HAL_I2C_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2241      	movs	r2, #65	; 0x41
 8003196:	2120      	movs	r1, #32
 8003198:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2240      	movs	r2, #64	; 0x40
 800319e:	2100      	movs	r1, #0
 80031a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7ff fd0a 	bl	8002bbe <HAL_I2C_SlaveRxCpltCallback>
}
 80031aa:	e00b      	b.n	80031c4 <I2C_ITSlaveCplt+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2241      	movs	r2, #65	; 0x41
 80031b0:	2120      	movs	r1, #32
 80031b2:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2240      	movs	r2, #64	; 0x40
 80031b8:	2100      	movs	r1, #0
 80031ba:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff fcf5 	bl	8002bae <HAL_I2C_SlaveTxCpltCallback>
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b004      	add	sp, #16
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	fe00e800 	.word	0xfe00e800
 80031d0:	ffff0000 	.word	0xffff0000

080031d4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a28      	ldr	r2, [pc, #160]	; (8003284 <I2C_ITListenCplt+0xb0>)
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2241      	movs	r2, #65	; 0x41
 80031ee:	2120      	movs	r1, #32
 80031f0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2242      	movs	r2, #66	; 0x42
 80031f6:	2100      	movs	r1, #0
 80031f8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	001a      	movs	r2, r3
 8003206:	2301      	movs	r3, #1
 8003208:	4013      	ands	r3, r2
 800320a:	d026      	beq.n	800325a <I2C_ITListenCplt+0x86>
  {
    /* Remove RXNE flag on temporary variable as read done */
    ITFlags &= ~I2C_FLAG_RXNE;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2204      	movs	r2, #4
 8003210:	4393      	bics	r3, r2
 8003212:	603b      	str	r3, [r7, #0]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	2b00      	cmp	r3, #0
 8003232:	d012      	beq.n	800325a <I2C_ITListenCplt+0x86>
    {
      hi2c->XferSize--;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	2204      	movs	r2, #4
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2107      	movs	r1, #7
 800325e:	0018      	movs	r0, r3
 8003260:	f000 f92c 	bl	80034bc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2210      	movs	r2, #16
 800326a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2240      	movs	r2, #64	; 0x40
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff fcb9 	bl	8002bee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b002      	add	sp, #8
 8003282:	bd80      	pop	{r7, pc}
 8003284:	ffff0000 	.word	0xffff0000

08003288 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003292:	200f      	movs	r0, #15
 8003294:	183b      	adds	r3, r7, r0
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	2141      	movs	r1, #65	; 0x41
 800329a:	5c52      	ldrb	r2, [r2, r1]
 800329c:	701a      	strb	r2, [r3, #0]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2242      	movs	r2, #66	; 0x42
 80032a2:	2100      	movs	r1, #0
 80032a4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a5b      	ldr	r2, [pc, #364]	; (8003418 <I2C_ITError+0x190>)
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80032be:	183b      	adds	r3, r7, r0
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b28      	cmp	r3, #40	; 0x28
 80032c4:	d009      	beq.n	80032da <I2C_ITError+0x52>
 80032c6:	230f      	movs	r3, #15
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b29      	cmp	r3, #41	; 0x29
 80032ce:	d004      	beq.n	80032da <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80032d0:	230f      	movs	r3, #15
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b2a      	cmp	r3, #42	; 0x2a
 80032d8:	d10f      	bne.n	80032fa <I2C_ITError+0x72>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2103      	movs	r1, #3
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 f8ec 	bl	80034bc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2241      	movs	r2, #65	; 0x41
 80032e8:	2128      	movs	r1, #40	; 0x28
 80032ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a49      	ldr	r2, [pc, #292]	; (800341c <I2C_ITError+0x194>)
 80032f6:	635a      	str	r2, [r3, #52]	; 0x34
 80032f8:	e014      	b.n	8003324 <I2C_ITError+0x9c>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2107      	movs	r1, #7
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 f8dc 	bl	80034bc <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2241      	movs	r2, #65	; 0x41
 8003308:	5c9b      	ldrb	r3, [r3, r2]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b60      	cmp	r3, #96	; 0x60
 800330e:	d003      	beq.n	8003318 <I2C_ITError+0x90>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2241      	movs	r2, #65	; 0x41
 8003314:	2120      	movs	r1, #32
 8003316:	5499      	strb	r1, [r3, r2]
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	01db      	lsls	r3, r3, #7
 800332e:	401a      	ands	r2, r3
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	01db      	lsls	r3, r3, #7
 8003334:	429a      	cmp	r2, r3
 8003336:	d122      	bne.n	800337e <I2C_ITError+0xf6>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4937      	ldr	r1, [pc, #220]	; (8003420 <I2C_ITError+0x198>)
 8003344:	400a      	ands	r2, r1
 8003346:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	2b00      	cmp	r3, #0
 800334e:	d05e      	beq.n	800340e <I2C_ITError+0x186>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	4a33      	ldr	r2, [pc, #204]	; (8003424 <I2C_ITError+0x19c>)
 8003356:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2240      	movs	r2, #64	; 0x40
 800335c:	2100      	movs	r1, #0
 800335e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	0018      	movs	r0, r3
 8003366:	f7ff f8c1 	bl	80024ec <HAL_DMA_Abort_IT>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d04f      	beq.n	800340e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	0018      	movs	r0, r3
 800337a:	4790      	blx	r2
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800337c:	e047      	b.n	800340e <I2C_ITError+0x186>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	401a      	ands	r2, r3
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	429a      	cmp	r2, r3
 8003390:	d122      	bne.n	80033d8 <I2C_ITError+0x150>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4922      	ldr	r1, [pc, #136]	; (8003428 <I2C_ITError+0x1a0>)
 800339e:	400a      	ands	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d031      	beq.n	800340e <I2C_ITError+0x186>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <I2C_ITError+0x19c>)
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2240      	movs	r2, #64	; 0x40
 80033b6:	2100      	movs	r1, #0
 80033b8:	5499      	strb	r1, [r3, r2]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	0018      	movs	r0, r3
 80033c0:	f7ff f894 	bl	80024ec <HAL_DMA_Abort_IT>
 80033c4:	1e03      	subs	r3, r0, #0
 80033c6:	d022      	beq.n	800340e <I2C_ITError+0x186>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	0018      	movs	r0, r3
 80033d4:	4790      	blx	r2
}
 80033d6:	e01a      	b.n	800340e <I2C_ITError+0x186>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2241      	movs	r2, #65	; 0x41
 80033dc:	5c9b      	ldrb	r3, [r3, r2]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b60      	cmp	r3, #96	; 0x60
 80033e2:	d10c      	bne.n	80033fe <I2C_ITError+0x176>
    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2241      	movs	r2, #65	; 0x41
 80033e8:	2120      	movs	r1, #32
 80033ea:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7ff fc09 	bl	8002c0e <HAL_I2C_AbortCpltCallback>
}
 80033fc:	e007      	b.n	800340e <I2C_ITError+0x186>
    __HAL_UNLOCK(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2240      	movs	r2, #64	; 0x40
 8003402:	2100      	movs	r1, #0
 8003404:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0018      	movs	r0, r3
 800340a:	f7ff fbf8 	bl	8002bfe <HAL_I2C_ErrorCallback>
}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	b004      	add	sp, #16
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	ffff0000 	.word	0xffff0000
 800341c:	08002c21 	.word	0x08002c21
 8003420:	ffffbfff 	.word	0xffffbfff
 8003424:	08003471 	.word	0x08003471
 8003428:	ffff7fff 	.word	0xffff7fff

0800342c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2202      	movs	r2, #2
 800343c:	4013      	ands	r3, r2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d103      	bne.n	800344a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2201      	movs	r2, #1
 8003452:	4013      	ands	r3, r2
 8003454:	2b01      	cmp	r3, #1
 8003456:	d007      	beq.n	8003468 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2101      	movs	r1, #1
 8003464:	430a      	orrs	r2, r1
 8003466:	619a      	str	r2, [r3, #24]
  }
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b002      	add	sp, #8
 800346e:	bd80      	pop	{r7, pc}

08003470 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	2200      	movs	r2, #0
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	2200      	movs	r2, #0
 800348c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2241      	movs	r2, #65	; 0x41
 8003492:	5c9b      	ldrb	r3, [r3, r2]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b60      	cmp	r3, #96	; 0x60
 8003498:	d108      	bne.n	80034ac <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2241      	movs	r2, #65	; 0x41
 800349e:	2120      	movs	r1, #32
 80034a0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff fbb2 	bl	8002c0e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034aa:	e003      	b.n	80034b4 <I2C_DMAAbort+0x44>
    HAL_I2C_ErrorCallback(hi2c);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7ff fba5 	bl	8002bfe <HAL_I2C_ErrorCallback>
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b004      	add	sp, #16
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	000a      	movs	r2, r1
 80034c6:	1cbb      	adds	r3, r7, #2
 80034c8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80034ce:	1cbb      	adds	r3, r7, #2
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	2201      	movs	r2, #1
 80034d4:	4013      	ands	r3, r2
 80034d6:	d010      	beq.n	80034fa <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2242      	movs	r2, #66	; 0x42
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2241      	movs	r2, #65	; 0x41
 80034e4:	5c9b      	ldrb	r3, [r3, r2]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	001a      	movs	r2, r3
 80034ea:	2328      	movs	r3, #40	; 0x28
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b28      	cmp	r3, #40	; 0x28
 80034f0:	d003      	beq.n	80034fa <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	22b0      	movs	r2, #176	; 0xb0
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80034fa:	1cbb      	adds	r3, r7, #2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	2202      	movs	r2, #2
 8003500:	4013      	ands	r3, r2
 8003502:	d010      	beq.n	8003526 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2244      	movs	r2, #68	; 0x44
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2241      	movs	r2, #65	; 0x41
 8003510:	5c9b      	ldrb	r3, [r3, r2]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	001a      	movs	r2, r3
 8003516:	2328      	movs	r3, #40	; 0x28
 8003518:	4013      	ands	r3, r2
 800351a:	2b28      	cmp	r3, #40	; 0x28
 800351c:	d003      	beq.n	8003526 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	22b0      	movs	r2, #176	; 0xb0
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003526:	1cbb      	adds	r3, r7, #2
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	2204      	movs	r2, #4
 800352c:	4013      	ands	r3, r2
 800352e:	d003      	beq.n	8003538 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	22b8      	movs	r2, #184	; 0xb8
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003538:	1cbb      	adds	r3, r7, #2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	2211      	movs	r2, #17
 800353e:	4013      	ands	r3, r2
 8003540:	2b11      	cmp	r3, #17
 8003542:	d103      	bne.n	800354c <I2C_Disable_IRQ+0x90>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2290      	movs	r2, #144	; 0x90
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800354c:	1cbb      	adds	r3, r7, #2
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	2212      	movs	r2, #18
 8003552:	4013      	ands	r3, r2
 8003554:	2b12      	cmp	r3, #18
 8003556:	d103      	bne.n	8003560 <I2C_Disable_IRQ+0xa4>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8003560:	1cbb      	adds	r3, r7, #2
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	2212      	movs	r2, #18
 8003566:	4013      	ands	r3, r2
 8003568:	2b12      	cmp	r3, #18
 800356a:	d103      	bne.n	8003574 <I2C_Disable_IRQ+0xb8>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2240      	movs	r2, #64	; 0x40
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	43d9      	mvns	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	400a      	ands	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2241      	movs	r2, #65	; 0x41
 800359e:	5c9b      	ldrb	r3, [r3, r2]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d138      	bne.n	8003618 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2240      	movs	r2, #64	; 0x40
 80035aa:	5c9b      	ldrb	r3, [r3, r2]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e032      	b.n	800361a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2240      	movs	r2, #64	; 0x40
 80035b8:	2101      	movs	r1, #1
 80035ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2241      	movs	r2, #65	; 0x41
 80035c0:	2124      	movs	r1, #36	; 0x24
 80035c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2101      	movs	r1, #1
 80035d0:	438a      	bics	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4911      	ldr	r1, [pc, #68]	; (8003624 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80035e0:	400a      	ands	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6819      	ldr	r1, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2101      	movs	r1, #1
 8003600:	430a      	orrs	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2241      	movs	r2, #65	; 0x41
 8003608:	2120      	movs	r1, #32
 800360a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2240      	movs	r2, #64	; 0x40
 8003610:	2100      	movs	r1, #0
 8003612:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	e000      	b.n	800361a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
  }
}
 800361a:	0018      	movs	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	b002      	add	sp, #8
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	ffffefff 	.word	0xffffefff

08003628 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e06c      	b.n	8003714 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	222e      	movs	r2, #46	; 0x2e
 800363e:	5c9b      	ldrb	r3, [r3, r2]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d107      	bne.n	8003656 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	222d      	movs	r2, #45	; 0x2d
 800364a:	2100      	movs	r1, #0
 800364c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	0018      	movs	r0, r3
 8003652:	f002 ff0f 	bl	8006474 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	222e      	movs	r2, #46	; 0x2e
 800365a:	2102      	movs	r1, #2
 800365c:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d005      	beq.n	800367a <HAL_LPTIM_Init+0x52>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	041b      	lsls	r3, r3, #16
 8003676:	429a      	cmp	r2, r3
 8003678:	d103      	bne.n	8003682 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	221e      	movs	r2, #30
 800367e:	4393      	bics	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	4a25      	ldr	r2, [pc, #148]	; (800371c <HAL_LPTIM_Init+0xf4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a24      	ldr	r2, [pc, #144]	; (8003720 <HAL_LPTIM_Init+0xf8>)
 8003690:	4013      	ands	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a23      	ldr	r2, [pc, #140]	; (8003724 <HAL_LPTIM_Init+0xfc>)
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80036a4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80036aa:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80036b0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80036b6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d005      	beq.n	80036d2 <HAL_LPTIM_Init+0xaa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d107      	bne.n	80036e2 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80036da:	4313      	orrs	r3, r2
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	4a0d      	ldr	r2, [pc, #52]	; (800371c <HAL_LPTIM_Init+0xf4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00a      	beq.n	8003702 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80036f4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80036fa:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	222e      	movs	r2, #46	; 0x2e
 800370e:	2101      	movs	r1, #1
 8003710:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b004      	add	sp, #16
 800371a:	bd80      	pop	{r7, pc}
 800371c:	0000ffff 	.word	0x0000ffff
 8003720:	ffff1f3f 	.word	0xffff1f3f
 8003724:	ff19f1f8 	.word	0xff19f1f8

08003728 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	222e      	movs	r2, #46	; 0x2e
 8003738:	2102      	movs	r1, #2
 800373a:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 800373c:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <HAL_LPTIM_TimeOut_Start_IT+0x88>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_LPTIM_TimeOut_Start_IT+0x88>)
 8003742:	2180      	movs	r1, #128	; 0x80
 8003744:	0589      	lsls	r1, r1, #22
 8003746:	430a      	orrs	r2, r1
 8003748:	601a      	str	r2, [r3, #0]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	0309      	lsls	r1, r1, #12
 8003758:	430a      	orrs	r2, r1
 800375a:	60da      	str	r2, [r3, #12]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2101      	movs	r1, #1
 8003768:	430a      	orrs	r2, r1
 800376a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	430a      	orrs	r2, r1
 800377a:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	619a      	str	r2, [r3, #24]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	615a      	str	r2, [r3, #20]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2104      	movs	r1, #4
 8003798:	430a      	orrs	r2, r1
 800379a:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	222e      	movs	r2, #46	; 0x2e
 80037a0:	2101      	movs	r1, #1
 80037a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b004      	add	sp, #16
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	40010400 	.word	0x40010400

080037b4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2201      	movs	r2, #1
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10e      	bne.n	80037e8 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2201      	movs	r2, #1
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f002 fc4e 	bl	8006084 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2202      	movs	r2, #2
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d10e      	bne.n	8003814 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2202      	movs	r2, #2
 80037fe:	4013      	ands	r3, r2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d107      	bne.n	8003814 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2202      	movs	r2, #2
 800380a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	0018      	movs	r0, r3
 8003810:	f000 f872 	bl	80038f8 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2204      	movs	r2, #4
 800381c:	4013      	ands	r3, r2
 800381e:	2b04      	cmp	r3, #4
 8003820:	d10e      	bne.n	8003840 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2204      	movs	r2, #4
 800382a:	4013      	ands	r3, r2
 800382c:	2b04      	cmp	r3, #4
 800382e:	d107      	bne.n	8003840 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2204      	movs	r2, #4
 8003836:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0018      	movs	r0, r3
 800383c:	f000 f864 	bl	8003908 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2208      	movs	r2, #8
 8003848:	4013      	ands	r3, r2
 800384a:	2b08      	cmp	r3, #8
 800384c:	d10e      	bne.n	800386c <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2208      	movs	r2, #8
 8003856:	4013      	ands	r3, r2
 8003858:	2b08      	cmp	r3, #8
 800385a:	d107      	bne.n	800386c <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2208      	movs	r2, #8
 8003862:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0018      	movs	r0, r3
 8003868:	f000 f856 	bl	8003918 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2210      	movs	r2, #16
 8003874:	4013      	ands	r3, r2
 8003876:	2b10      	cmp	r3, #16
 8003878:	d10e      	bne.n	8003898 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2210      	movs	r2, #16
 8003882:	4013      	ands	r3, r2
 8003884:	2b10      	cmp	r3, #16
 8003886:	d107      	bne.n	8003898 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2210      	movs	r2, #16
 800388e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	0018      	movs	r0, r3
 8003894:	f000 f848 	bl	8003928 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2220      	movs	r2, #32
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d10e      	bne.n	80038c4 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2220      	movs	r2, #32
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d107      	bne.n	80038c4 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2220      	movs	r2, #32
 80038ba:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 f83a 	bl	8003938 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2240      	movs	r2, #64	; 0x40
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d10e      	bne.n	80038f0 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2240      	movs	r2, #64	; 0x40
 80038da:	4013      	ands	r3, r2
 80038dc:	2b40      	cmp	r3, #64	; 0x40
 80038de:	d107      	bne.n	80038f0 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2240      	movs	r2, #64	; 0x40
 80038e6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 f82c 	bl	8003948 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b002      	add	sp, #8
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003920:	46c0      	nop			; (mov r8, r8)
 8003922:	46bd      	mov	sp, r7
 8003924:	b002      	add	sp, #8
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b002      	add	sp, #8
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b002      	add	sp, #8
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	000a      	movs	r2, r1
 8003962:	1cfb      	adds	r3, r7, #3
 8003964:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <HAL_PWR_EnterSTOPMode+0x60>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2203      	movs	r2, #3
 8003974:	4393      	bics	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003980:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <HAL_PWR_EnterSTOPMode+0x60>)
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003986:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <HAL_PWR_EnterSTOPMode+0x64>)
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_PWR_EnterSTOPMode+0x64>)
 800398c:	2104      	movs	r1, #4
 800398e:	430a      	orrs	r2, r1
 8003990:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003992:	1cfb      	adds	r3, r7, #3
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800399a:	bf30      	wfi
 800399c:	e002      	b.n	80039a4 <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 800399e:	bf40      	sev
  __ASM volatile ("wfe");
 80039a0:	bf20      	wfe
 80039a2:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_PWR_EnterSTOPMode+0x64>)
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <HAL_PWR_EnterSTOPMode+0x64>)
 80039aa:	2104      	movs	r1, #4
 80039ac:	438a      	bics	r2, r1
 80039ae:	611a      	str	r2, [r3, #16]

}
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b004      	add	sp, #16
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40007000 	.word	0x40007000
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c0:	b5b0      	push	{r4, r5, r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f000 fbab 	bl	800412a <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d4:	4bce      	ldr	r3, [pc, #824]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	220c      	movs	r2, #12
 80039da:	4013      	ands	r3, r2
 80039dc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039de:	4bcc      	ldr	r3, [pc, #816]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	025b      	lsls	r3, r3, #9
 80039e6:	4013      	ands	r3, r2
 80039e8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	4013      	ands	r3, r2
 80039f2:	d100      	bne.n	80039f6 <HAL_RCC_OscConfig+0x36>
 80039f4:	e07e      	b.n	8003af4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d007      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	d112      	bne.n	8003a28 <HAL_RCC_OscConfig+0x68>
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	025b      	lsls	r3, r3, #9
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d10d      	bne.n	8003a28 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0c:	4bc0      	ldr	r3, [pc, #768]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	029b      	lsls	r3, r3, #10
 8003a14:	4013      	ands	r3, r2
 8003a16:	d100      	bne.n	8003a1a <HAL_RCC_OscConfig+0x5a>
 8003a18:	e06b      	b.n	8003af2 <HAL_RCC_OscConfig+0x132>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d167      	bne.n	8003af2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f000 fb81 	bl	800412a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	025b      	lsls	r3, r3, #9
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_OscConfig+0x84>
 8003a34:	4bb6      	ldr	r3, [pc, #728]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4bb5      	ldr	r3, [pc, #724]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	0249      	lsls	r1, r1, #9
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e027      	b.n	8003a94 <HAL_RCC_OscConfig+0xd4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	23a0      	movs	r3, #160	; 0xa0
 8003a4a:	02db      	lsls	r3, r3, #11
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d10e      	bne.n	8003a6e <HAL_RCC_OscConfig+0xae>
 8003a50:	4baf      	ldr	r3, [pc, #700]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4bae      	ldr	r3, [pc, #696]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	02c9      	lsls	r1, r1, #11
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	4bac      	ldr	r3, [pc, #688]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4bab      	ldr	r3, [pc, #684]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	0249      	lsls	r1, r1, #9
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	e012      	b.n	8003a94 <HAL_RCC_OscConfig+0xd4>
 8003a6e:	4ba8      	ldr	r3, [pc, #672]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4ba7      	ldr	r3, [pc, #668]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a74:	49a7      	ldr	r1, [pc, #668]	; (8003d14 <HAL_RCC_OscConfig+0x354>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	4ba5      	ldr	r3, [pc, #660]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	025b      	lsls	r3, r3, #9
 8003a82:	4013      	ands	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4ba1      	ldr	r3, [pc, #644]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4ba0      	ldr	r3, [pc, #640]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003a8e:	49a2      	ldr	r1, [pc, #648]	; (8003d18 <HAL_RCC_OscConfig+0x358>)
 8003a90:	400a      	ands	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d015      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fbfc 	bl	8002298 <HAL_GetTick>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aa4:	e009      	b.n	8003aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa6:	f7fe fbf7 	bl	8002298 <HAL_GetTick>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b64      	cmp	r3, #100	; 0x64
 8003ab2:	d902      	bls.n	8003aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	f000 fb38 	bl	800412a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aba:	4b95      	ldr	r3, [pc, #596]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	029b      	lsls	r3, r3, #10
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d0ef      	beq.n	8003aa6 <HAL_RCC_OscConfig+0xe6>
 8003ac6:	e015      	b.n	8003af4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fbe6 	bl	8002298 <HAL_GetTick>
 8003acc:	0003      	movs	r3, r0
 8003ace:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad2:	f7fe fbe1 	bl	8002298 <HAL_GetTick>
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	; 0x64
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e322      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ae4:	4b8a      	ldr	r3, [pc, #552]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	029b      	lsls	r3, r3, #10
 8003aec:	4013      	ands	r3, r2
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x112>
 8003af0:	e000      	b.n	8003af4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2202      	movs	r2, #2
 8003afa:	4013      	ands	r3, r2
 8003afc:	d100      	bne.n	8003b00 <HAL_RCC_OscConfig+0x140>
 8003afe:	e08a      	b.n	8003c16 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d13d      	bne.n	8003b8e <HAL_RCC_OscConfig+0x1ce>
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d13a      	bne.n	8003b8e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b18:	4b7d      	ldr	r3, [pc, #500]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_RCC_OscConfig+0x16c>
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e2fe      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2c:	4b78      	ldr	r3, [pc, #480]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a7a      	ldr	r2, [pc, #488]	; (8003d1c <HAL_RCC_OscConfig+0x35c>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	021a      	lsls	r2, r3, #8
 8003b3c:	4b74      	ldr	r3, [pc, #464]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b42:	4b73      	ldr	r3, [pc, #460]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2209      	movs	r2, #9
 8003b48:	4393      	bics	r3, r2
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	4b70      	ldr	r3, [pc, #448]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b54:	f000 fc1e 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8003b58:	0001      	movs	r1, r0
 8003b5a:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	220f      	movs	r2, #15
 8003b62:	4013      	ands	r3, r2
 8003b64:	4a6e      	ldr	r2, [pc, #440]	; (8003d20 <HAL_RCC_OscConfig+0x360>)
 8003b66:	5cd3      	ldrb	r3, [r2, r3]
 8003b68:	000a      	movs	r2, r1
 8003b6a:	40da      	lsrs	r2, r3
 8003b6c:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <HAL_RCC_OscConfig+0x364>)
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003b70:	2513      	movs	r5, #19
 8003b72:	197c      	adds	r4, r7, r5
 8003b74:	2000      	movs	r0, #0
 8003b76:	f7fe fb59 	bl	800222c <HAL_InitTick>
 8003b7a:	0003      	movs	r3, r0
 8003b7c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003b7e:	197b      	adds	r3, r7, r5
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d047      	beq.n	8003c16 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8003b86:	2313      	movs	r3, #19
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	e2cd      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d027      	beq.n	8003be4 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b94:	4b5e      	ldr	r3, [pc, #376]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2209      	movs	r2, #9
 8003b9a:	4393      	bics	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	4b5c      	ldr	r3, [pc, #368]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7fe fb77 	bl	8002298 <HAL_GetTick>
 8003baa:	0003      	movs	r3, r0
 8003bac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb0:	f7fe fb72 	bl	8002298 <HAL_GetTick>
 8003bb4:	0002      	movs	r2, r0
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e2b3      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc2:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d0f1      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bcc:	4b50      	ldr	r3, [pc, #320]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a52      	ldr	r2, [pc, #328]	; (8003d1c <HAL_RCC_OscConfig+0x35c>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	021a      	lsls	r2, r3, #8
 8003bdc:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	e018      	b.n	8003c16 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be4:	4b4a      	ldr	r3, [pc, #296]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	438a      	bics	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fe fb52 	bl	8002298 <HAL_GetTick>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfa:	f7fe fb4d 	bl	8002298 <HAL_GetTick>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e28e      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c0c:	4b40      	ldr	r3, [pc, #256]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2204      	movs	r2, #4
 8003c12:	4013      	ands	r3, r2
 8003c14:	d1f1      	bne.n	8003bfa <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <HAL_RCC_OscConfig+0x262>
 8003c20:	e09e      	b.n	8003d60 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d13f      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c28:	4b39      	ldr	r3, [pc, #228]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4013      	ands	r3, r2
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_OscConfig+0x280>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e274      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c40:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	4a38      	ldr	r2, [pc, #224]	; (8003d28 <HAL_RCC_OscConfig+0x368>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	0019      	movs	r1, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c4e:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003c50:	430a      	orrs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c54:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	0a19      	lsrs	r1, r3, #8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	061a      	lsls	r2, r3, #24
 8003c62:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	0b5b      	lsrs	r3, r3, #13
 8003c6e:	3301      	adds	r3, #1
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	0212      	lsls	r2, r2, #8
 8003c74:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c76:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	210f      	movs	r1, #15
 8003c7e:	400b      	ands	r3, r1
 8003c80:	4927      	ldr	r1, [pc, #156]	; (8003d20 <HAL_RCC_OscConfig+0x360>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c86:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <HAL_RCC_OscConfig+0x364>)
 8003c88:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c8a:	2513      	movs	r5, #19
 8003c8c:	197c      	adds	r4, r7, r5
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f7fe facc 	bl	800222c <HAL_InitTick>
 8003c94:	0003      	movs	r3, r0
 8003c96:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003c98:	197b      	adds	r3, r7, r5
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d05f      	beq.n	8003d60 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8003ca0:	2313      	movs	r3, #19
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	e240      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d03d      	beq.n	8003d2c <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003cb6:	2180      	movs	r1, #128	; 0x80
 8003cb8:	0049      	lsls	r1, r1, #1
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe faeb 	bl	8002298 <HAL_GetTick>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cc8:	f7fe fae6 	bl	8002298 <HAL_GetTick>
 8003ccc:	0002      	movs	r2, r0
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e227      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4a0f      	ldr	r2, [pc, #60]	; (8003d28 <HAL_RCC_OscConfig+0x368>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	0a19      	lsrs	r1, r3, #8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	061a      	lsls	r2, r3, #24
 8003d08:	4b01      	ldr	r3, [pc, #4]	; (8003d10 <HAL_RCC_OscConfig+0x350>)
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	e027      	b.n	8003d60 <HAL_RCC_OscConfig+0x3a0>
 8003d10:	40021000 	.word	0x40021000
 8003d14:	fffeffff 	.word	0xfffeffff
 8003d18:	fffbffff 	.word	0xfffbffff
 8003d1c:	ffffe0ff 	.word	0xffffe0ff
 8003d20:	08009d84 	.word	0x08009d84
 8003d24:	20000000 	.word	0x20000000
 8003d28:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d2c:	4bbd      	ldr	r3, [pc, #756]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4bbc      	ldr	r3, [pc, #752]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003d32:	49bd      	ldr	r1, [pc, #756]	; (8004028 <HAL_RCC_OscConfig+0x668>)
 8003d34:	400a      	ands	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe faae 	bl	8002298 <HAL_GetTick>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d42:	f7fe faa9 	bl	8002298 <HAL_GetTick>
 8003d46:	0002      	movs	r2, r0
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1ea      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d54:	4bb3      	ldr	r3, [pc, #716]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2208      	movs	r2, #8
 8003d66:	4013      	ands	r3, r2
 8003d68:	d036      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d019      	beq.n	8003da6 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d72:	4bac      	ldr	r3, [pc, #688]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003d74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d76:	4bab      	ldr	r3, [pc, #684]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003d78:	2101      	movs	r1, #1
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7e:	f7fe fa8b 	bl	8002298 <HAL_GetTick>
 8003d82:	0003      	movs	r3, r0
 8003d84:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fe fa86 	bl	8002298 <HAL_GetTick>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e1c7      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d9a:	4ba2      	ldr	r3, [pc, #648]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9e:	2202      	movs	r2, #2
 8003da0:	4013      	ands	r3, r2
 8003da2:	d0f1      	beq.n	8003d88 <HAL_RCC_OscConfig+0x3c8>
 8003da4:	e018      	b.n	8003dd8 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da6:	4b9f      	ldr	r3, [pc, #636]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003daa:	4b9e      	ldr	r3, [pc, #632]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003dac:	2101      	movs	r1, #1
 8003dae:	438a      	bics	r2, r1
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db2:	f7fe fa71 	bl	8002298 <HAL_GetTick>
 8003db6:	0003      	movs	r3, r0
 8003db8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbc:	f7fe fa6c 	bl	8002298 <HAL_GetTick>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e1ad      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dce:	4b95      	ldr	r3, [pc, #596]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d1f1      	bne.n	8003dbc <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	4013      	ands	r3, r2
 8003de0:	d100      	bne.n	8003de4 <HAL_RCC_OscConfig+0x424>
 8003de2:	e0af      	b.n	8003f44 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de4:	2327      	movs	r3, #39	; 0x27
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dec:	4b8d      	ldr	r3, [pc, #564]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	055b      	lsls	r3, r3, #21
 8003df4:	4013      	ands	r3, r2
 8003df6:	d10a      	bne.n	8003e0e <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df8:	4b8a      	ldr	r3, [pc, #552]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dfc:	4b89      	ldr	r3, [pc, #548]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003dfe:	2180      	movs	r1, #128	; 0x80
 8003e00:	0549      	lsls	r1, r1, #21
 8003e02:	430a      	orrs	r2, r1
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003e06:	2327      	movs	r3, #39	; 0x27
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b87      	ldr	r3, [pc, #540]	; (800402c <HAL_RCC_OscConfig+0x66c>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4013      	ands	r3, r2
 8003e18:	d11a      	bne.n	8003e50 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1a:	4b84      	ldr	r3, [pc, #528]	; (800402c <HAL_RCC_OscConfig+0x66c>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b83      	ldr	r3, [pc, #524]	; (800402c <HAL_RCC_OscConfig+0x66c>)
 8003e20:	2180      	movs	r1, #128	; 0x80
 8003e22:	0049      	lsls	r1, r1, #1
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e28:	f7fe fa36 	bl	8002298 <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e32:	f7fe fa31 	bl	8002298 <HAL_GetTick>
 8003e36:	0002      	movs	r2, r0
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b64      	cmp	r3, #100	; 0x64
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e172      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	4b79      	ldr	r3, [pc, #484]	; (800402c <HAL_RCC_OscConfig+0x66c>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4ac>
 8003e5c:	4b71      	ldr	r3, [pc, #452]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e60:	4b70      	ldr	r3, [pc, #448]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003e62:	2180      	movs	r1, #128	; 0x80
 8003e64:	0049      	lsls	r1, r1, #1
 8003e66:	430a      	orrs	r2, r1
 8003e68:	651a      	str	r2, [r3, #80]	; 0x50
 8003e6a:	e031      	b.n	8003ed0 <HAL_RCC_OscConfig+0x510>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10c      	bne.n	8003e8e <HAL_RCC_OscConfig+0x4ce>
 8003e74:	4b6b      	ldr	r3, [pc, #428]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003e76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e78:	4b6a      	ldr	r3, [pc, #424]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003e7a:	496b      	ldr	r1, [pc, #428]	; (8004028 <HAL_RCC_OscConfig+0x668>)
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	651a      	str	r2, [r3, #80]	; 0x50
 8003e80:	4b68      	ldr	r3, [pc, #416]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003e82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e84:	4b67      	ldr	r3, [pc, #412]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003e86:	496a      	ldr	r1, [pc, #424]	; (8004030 <HAL_RCC_OscConfig+0x670>)
 8003e88:	400a      	ands	r2, r1
 8003e8a:	651a      	str	r2, [r3, #80]	; 0x50
 8003e8c:	e020      	b.n	8003ed0 <HAL_RCC_OscConfig+0x510>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	23a0      	movs	r3, #160	; 0xa0
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d10e      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
 8003e9a:	4b62      	ldr	r3, [pc, #392]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003e9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e9e:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	00c9      	lsls	r1, r1, #3
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ea8:	4b5e      	ldr	r3, [pc, #376]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003eaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eac:	4b5d      	ldr	r3, [pc, #372]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	0049      	lsls	r1, r1, #1
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	651a      	str	r2, [r3, #80]	; 0x50
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCC_OscConfig+0x510>
 8003eb8:	4b5a      	ldr	r3, [pc, #360]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003eba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ebc:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003ebe:	495a      	ldr	r1, [pc, #360]	; (8004028 <HAL_RCC_OscConfig+0x668>)
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ec4:	4b57      	ldr	r3, [pc, #348]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003ec6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ec8:	4b56      	ldr	r3, [pc, #344]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003eca:	4959      	ldr	r1, [pc, #356]	; (8004030 <HAL_RCC_OscConfig+0x670>)
 8003ecc:	400a      	ands	r2, r1
 8003ece:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed8:	f7fe f9de 	bl	8002298 <HAL_GetTick>
 8003edc:	0003      	movs	r3, r0
 8003ede:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ee0:	e009      	b.n	8003ef6 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fe f9d9 	bl	8002298 <HAL_GetTick>
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	4a51      	ldr	r2, [pc, #324]	; (8004034 <HAL_RCC_OscConfig+0x674>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e119      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef6:	4b4b      	ldr	r3, [pc, #300]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4013      	ands	r3, r2
 8003f00:	d0ef      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x522>
 8003f02:	e014      	b.n	8003f2e <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f04:	f7fe f9c8 	bl	8002298 <HAL_GetTick>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f0c:	e009      	b.n	8003f22 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fe f9c3 	bl	8002298 <HAL_GetTick>
 8003f12:	0002      	movs	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	4a46      	ldr	r2, [pc, #280]	; (8004034 <HAL_RCC_OscConfig+0x674>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e103      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f22:	4b40      	ldr	r3, [pc, #256]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003f24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d1ef      	bne.n	8003f0e <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f2e:	2327      	movs	r3, #39	; 0x27
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4b3a      	ldr	r3, [pc, #232]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f3c:	4b39      	ldr	r3, [pc, #228]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003f3e:	493e      	ldr	r1, [pc, #248]	; (8004038 <HAL_RCC_OscConfig+0x678>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d049      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d026      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003f56:	4b33      	ldr	r3, [pc, #204]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	4b32      	ldr	r3, [pc, #200]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	4b30      	ldr	r3, [pc, #192]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f66:	4b2f      	ldr	r3, [pc, #188]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003f68:	2101      	movs	r1, #1
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f6e:	4b33      	ldr	r3, [pc, #204]	; (800403c <HAL_RCC_OscConfig+0x67c>)
 8003f70:	6a1a      	ldr	r2, [r3, #32]
 8003f72:	4b32      	ldr	r3, [pc, #200]	; (800403c <HAL_RCC_OscConfig+0x67c>)
 8003f74:	2180      	movs	r1, #128	; 0x80
 8003f76:	0189      	lsls	r1, r1, #6
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe f98c 	bl	8002298 <HAL_GetTick>
 8003f80:	0003      	movs	r3, r0
 8003f82:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f86:	f7fe f987 	bl	8002298 <HAL_GetTick>
 8003f8a:	0002      	movs	r2, r0
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e0c8      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f98:	4b22      	ldr	r3, [pc, #136]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d0f1      	beq.n	8003f86 <HAL_RCC_OscConfig+0x5c6>
 8003fa2:	e01e      	b.n	8003fe2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003faa:	2101      	movs	r1, #1
 8003fac:	438a      	bics	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	4b22      	ldr	r3, [pc, #136]	; (800403c <HAL_RCC_OscConfig+0x67c>)
 8003fb2:	6a1a      	ldr	r2, [r3, #32]
 8003fb4:	4b21      	ldr	r3, [pc, #132]	; (800403c <HAL_RCC_OscConfig+0x67c>)
 8003fb6:	4922      	ldr	r1, [pc, #136]	; (8004040 <HAL_RCC_OscConfig+0x680>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fe f96c 	bl	8002298 <HAL_GetTick>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc6:	f7fe f967 	bl	8002298 <HAL_GetTick>
 8003fca:	0002      	movs	r2, r0
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0a8      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fd8:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d1f1      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d100      	bne.n	8003fec <HAL_RCC_OscConfig+0x62c>
 8003fea:	e09d      	b.n	8004128 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d100      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x634>
 8003ff2:	e076      	b.n	80040e2 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d157      	bne.n	80040ac <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b08      	ldr	r3, [pc, #32]	; (8004024 <HAL_RCC_OscConfig+0x664>)
 8004002:	4910      	ldr	r1, [pc, #64]	; (8004044 <HAL_RCC_OscConfig+0x684>)
 8004004:	400a      	ands	r2, r1
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fe f946 	bl	8002298 <HAL_GetTick>
 800400c:	0003      	movs	r3, r0
 800400e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004010:	e01a      	b.n	8004048 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004012:	f7fe f941 	bl	8002298 <HAL_GetTick>
 8004016:	0002      	movs	r2, r0
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d913      	bls.n	8004048 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e082      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
 8004024:	40021000 	.word	0x40021000
 8004028:	fffffeff 	.word	0xfffffeff
 800402c:	40007000 	.word	0x40007000
 8004030:	fffffbff 	.word	0xfffffbff
 8004034:	00001388 	.word	0x00001388
 8004038:	efffffff 	.word	0xefffffff
 800403c:	40010000 	.word	0x40010000
 8004040:	ffffdfff 	.word	0xffffdfff
 8004044:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004048:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_RCC_OscConfig+0x774>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	049b      	lsls	r3, r3, #18
 8004050:	4013      	ands	r3, r2
 8004052:	d1de      	bne.n	8004012 <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004054:	4b37      	ldr	r3, [pc, #220]	; (8004134 <HAL_RCC_OscConfig+0x774>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4a37      	ldr	r2, [pc, #220]	; (8004138 <HAL_RCC_OscConfig+0x778>)
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	431a      	orrs	r2, r3
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_RCC_OscConfig+0x774>)
 8004070:	430a      	orrs	r2, r1
 8004072:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004074:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <HAL_RCC_OscConfig+0x774>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <HAL_RCC_OscConfig+0x774>)
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	0449      	lsls	r1, r1, #17
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fe f909 	bl	8002298 <HAL_GetTick>
 8004086:	0003      	movs	r3, r0
 8004088:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7fe f904 	bl	8002298 <HAL_GetTick>
 8004090:	0002      	movs	r2, r0
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e045      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_RCC_OscConfig+0x774>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	049b      	lsls	r3, r3, #18
 80040a6:	4013      	ands	r3, r2
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x6cc>
 80040aa:	e03d      	b.n	8004128 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ac:	4b21      	ldr	r3, [pc, #132]	; (8004134 <HAL_RCC_OscConfig+0x774>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_RCC_OscConfig+0x774>)
 80040b2:	4922      	ldr	r1, [pc, #136]	; (800413c <HAL_RCC_OscConfig+0x77c>)
 80040b4:	400a      	ands	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe f8ee 	bl	8002298 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c2:	f7fe f8e9 	bl	8002298 <HAL_GetTick>
 80040c6:	0002      	movs	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e02a      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <HAL_RCC_OscConfig+0x774>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	049b      	lsls	r3, r3, #18
 80040dc:	4013      	ands	r3, r2
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x702>
 80040e0:	e022      	b.n	8004128 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e01d      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_RCC_OscConfig+0x774>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	025b      	lsls	r3, r3, #9
 80040fa:	401a      	ands	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	429a      	cmp	r2, r3
 8004102:	d10f      	bne.n	8004124 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	23f0      	movs	r3, #240	; 0xf0
 8004108:	039b      	lsls	r3, r3, #14
 800410a:	401a      	ands	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d107      	bne.n	8004124 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	23c0      	movs	r3, #192	; 0xc0
 8004118:	041b      	lsls	r3, r3, #16
 800411a:	401a      	ands	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	0018      	movs	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	b00a      	add	sp, #40	; 0x28
 8004130:	bdb0      	pop	{r4, r5, r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	40021000 	.word	0x40021000
 8004138:	ff02ffff 	.word	0xff02ffff
 800413c:	feffffff 	.word	0xfeffffff

08004140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004140:	b5b0      	push	{r4, r5, r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e10d      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004154:	4b88      	ldr	r3, [pc, #544]	; (8004378 <HAL_RCC_ClockConfig+0x238>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2201      	movs	r2, #1
 800415a:	4013      	ands	r3, r2
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d911      	bls.n	8004186 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b85      	ldr	r3, [pc, #532]	; (8004378 <HAL_RCC_ClockConfig+0x238>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2201      	movs	r2, #1
 8004168:	4393      	bics	r3, r2
 800416a:	0019      	movs	r1, r3
 800416c:	4b82      	ldr	r3, [pc, #520]	; (8004378 <HAL_RCC_ClockConfig+0x238>)
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004174:	4b80      	ldr	r3, [pc, #512]	; (8004378 <HAL_RCC_ClockConfig+0x238>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2201      	movs	r2, #1
 800417a:	4013      	ands	r3, r2
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d001      	beq.n	8004186 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e0f4      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2202      	movs	r2, #2
 800418c:	4013      	ands	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004190:	4b7a      	ldr	r3, [pc, #488]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	22f0      	movs	r2, #240	; 0xf0
 8004196:	4393      	bics	r3, r2
 8004198:	0019      	movs	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	4b77      	ldr	r3, [pc, #476]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 80041a0:	430a      	orrs	r2, r1
 80041a2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2201      	movs	r2, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d100      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x70>
 80041ae:	e089      	b.n	80042c4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041b8:	4b70      	ldr	r3, [pc, #448]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	029b      	lsls	r3, r3, #10
 80041c0:	4013      	ands	r3, r2
 80041c2:	d120      	bne.n	8004206 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0d3      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041d0:	4b6a      	ldr	r3, [pc, #424]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	049b      	lsls	r3, r3, #18
 80041d8:	4013      	ands	r3, r2
 80041da:	d114      	bne.n	8004206 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0c7      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d106      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e8:	4b64      	ldr	r3, [pc, #400]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2204      	movs	r2, #4
 80041ee:	4013      	ands	r3, r2
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0bc      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041f6:	4b61      	ldr	r3, [pc, #388]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4013      	ands	r3, r2
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0b4      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b5d      	ldr	r3, [pc, #372]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2203      	movs	r2, #3
 800420c:	4393      	bics	r3, r2
 800420e:	0019      	movs	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 8004216:	430a      	orrs	r2, r1
 8004218:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800421a:	f7fe f83d 	bl	8002298 <HAL_GetTick>
 800421e:	0003      	movs	r3, r0
 8004220:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d111      	bne.n	800424e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800422a:	e009      	b.n	8004240 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fe f834 	bl	8002298 <HAL_GetTick>
 8004230:	0002      	movs	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	4a52      	ldr	r2, [pc, #328]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e097      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004240:	4b4e      	ldr	r3, [pc, #312]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	220c      	movs	r2, #12
 8004246:	4013      	ands	r3, r2
 8004248:	2b08      	cmp	r3, #8
 800424a:	d1ef      	bne.n	800422c <HAL_RCC_ClockConfig+0xec>
 800424c:	e03a      	b.n	80042c4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b03      	cmp	r3, #3
 8004254:	d111      	bne.n	800427a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004256:	e009      	b.n	800426c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fe f81e 	bl	8002298 <HAL_GetTick>
 800425c:	0002      	movs	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	4a47      	ldr	r2, [pc, #284]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e081      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800426c:	4b43      	ldr	r3, [pc, #268]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	220c      	movs	r2, #12
 8004272:	4013      	ands	r3, r2
 8004274:	2b0c      	cmp	r3, #12
 8004276:	d1ef      	bne.n	8004258 <HAL_RCC_ClockConfig+0x118>
 8004278:	e024      	b.n	80042c4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d11b      	bne.n	80042ba <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004282:	e009      	b.n	8004298 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004284:	f7fe f808 	bl	8002298 <HAL_GetTick>
 8004288:	0002      	movs	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	4a3c      	ldr	r2, [pc, #240]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e06b      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004298:	4b38      	ldr	r3, [pc, #224]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	220c      	movs	r2, #12
 800429e:	4013      	ands	r3, r2
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d1ef      	bne.n	8004284 <HAL_RCC_ClockConfig+0x144>
 80042a4:	e00e      	b.n	80042c4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a6:	f7fd fff7 	bl	8002298 <HAL_GetTick>
 80042aa:	0002      	movs	r2, r0
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	4a33      	ldr	r2, [pc, #204]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e05a      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042ba:	4b30      	ldr	r3, [pc, #192]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	220c      	movs	r2, #12
 80042c0:	4013      	ands	r3, r2
 80042c2:	d1f0      	bne.n	80042a6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042c4:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_RCC_ClockConfig+0x238>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2201      	movs	r2, #1
 80042ca:	4013      	ands	r3, r2
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d211      	bcs.n	80042f6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b29      	ldr	r3, [pc, #164]	; (8004378 <HAL_RCC_ClockConfig+0x238>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2201      	movs	r2, #1
 80042d8:	4393      	bics	r3, r2
 80042da:	0019      	movs	r1, r3
 80042dc:	4b26      	ldr	r3, [pc, #152]	; (8004378 <HAL_RCC_ClockConfig+0x238>)
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e4:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCC_ClockConfig+0x238>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	4013      	ands	r3, r2
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d001      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e03c      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2204      	movs	r2, #4
 80042fc:	4013      	ands	r3, r2
 80042fe:	d009      	beq.n	8004314 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004300:	4b1e      	ldr	r3, [pc, #120]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004306:	4013      	ands	r3, r2
 8004308:	0019      	movs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 8004310:	430a      	orrs	r2, r1
 8004312:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2208      	movs	r2, #8
 800431a:	4013      	ands	r3, r2
 800431c:	d00a      	beq.n	8004334 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800431e:	4b17      	ldr	r3, [pc, #92]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	4a19      	ldr	r2, [pc, #100]	; (8004388 <HAL_RCC_ClockConfig+0x248>)
 8004324:	4013      	ands	r3, r2
 8004326:	0019      	movs	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	00da      	lsls	r2, r3, #3
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 8004330:	430a      	orrs	r2, r1
 8004332:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004334:	f000 f82e 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8004338:	0001      	movs	r1, r0
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_RCC_ClockConfig+0x23c>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	220f      	movs	r2, #15
 8004342:	4013      	ands	r3, r2
 8004344:	4a11      	ldr	r2, [pc, #68]	; (800438c <HAL_RCC_ClockConfig+0x24c>)
 8004346:	5cd3      	ldrb	r3, [r2, r3]
 8004348:	000a      	movs	r2, r1
 800434a:	40da      	lsrs	r2, r3
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <HAL_RCC_ClockConfig+0x250>)
 800434e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004350:	250b      	movs	r5, #11
 8004352:	197c      	adds	r4, r7, r5
 8004354:	2000      	movs	r0, #0
 8004356:	f7fd ff69 	bl	800222c <HAL_InitTick>
 800435a:	0003      	movs	r3, r0
 800435c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800435e:	197b      	adds	r3, r7, r5
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8004366:	230b      	movs	r3, #11
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	e000      	b.n	8004370 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b004      	add	sp, #16
 8004376:	bdb0      	pop	{r4, r5, r7, pc}
 8004378:	40022000 	.word	0x40022000
 800437c:	40021000 	.word	0x40021000
 8004380:	00001388 	.word	0x00001388
 8004384:	fffff8ff 	.word	0xfffff8ff
 8004388:	ffffc7ff 	.word	0xffffc7ff
 800438c:	08009d84 	.word	0x08009d84
 8004390:	20000000 	.word	0x20000000

08004394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800439a:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <HAL_RCC_GetSysClockFreq+0xf4>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	220c      	movs	r2, #12
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d00e      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0x34>
 80043aa:	2b0c      	cmp	r3, #12
 80043ac:	d00f      	beq.n	80043ce <HAL_RCC_GetSysClockFreq+0x3a>
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d157      	bne.n	8004462 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80043b2:	4b35      	ldr	r3, [pc, #212]	; (8004488 <HAL_RCC_GetSysClockFreq+0xf4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2210      	movs	r2, #16
 80043b8:	4013      	ands	r3, r2
 80043ba:	d002      	beq.n	80043c2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80043bc:	4b33      	ldr	r3, [pc, #204]	; (800448c <HAL_RCC_GetSysClockFreq+0xf8>)
 80043be:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80043c0:	e05d      	b.n	800447e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80043c2:	4b33      	ldr	r3, [pc, #204]	; (8004490 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043c4:	613b      	str	r3, [r7, #16]
      break;
 80043c6:	e05a      	b.n	800447e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043c8:	4b32      	ldr	r3, [pc, #200]	; (8004494 <HAL_RCC_GetSysClockFreq+0x100>)
 80043ca:	613b      	str	r3, [r7, #16]
      break;
 80043cc:	e057      	b.n	800447e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	0c9b      	lsrs	r3, r3, #18
 80043d2:	220f      	movs	r2, #15
 80043d4:	4013      	ands	r3, r2
 80043d6:	4a30      	ldr	r2, [pc, #192]	; (8004498 <HAL_RCC_GetSysClockFreq+0x104>)
 80043d8:	5cd3      	ldrb	r3, [r2, r3]
 80043da:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	0d9b      	lsrs	r3, r3, #22
 80043e0:	2203      	movs	r2, #3
 80043e2:	4013      	ands	r3, r2
 80043e4:	3301      	adds	r3, #1
 80043e6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043e8:	4b27      	ldr	r3, [pc, #156]	; (8004488 <HAL_RCC_GetSysClockFreq+0xf4>)
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	025b      	lsls	r3, r3, #9
 80043f0:	4013      	ands	r3, r2
 80043f2:	d00f      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	000a      	movs	r2, r1
 80043f8:	0152      	lsls	r2, r2, #5
 80043fa:	1a52      	subs	r2, r2, r1
 80043fc:	0193      	lsls	r3, r2, #6
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	185b      	adds	r3, r3, r1
 8004404:	025b      	lsls	r3, r3, #9
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	0018      	movs	r0, r3
 800440a:	f7fb fe8f 	bl	800012c <__udivsi3>
 800440e:	0003      	movs	r3, r0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e023      	b.n	800445c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004414:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2210      	movs	r2, #16
 800441a:	4013      	ands	r3, r2
 800441c:	d00f      	beq.n	800443e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	000a      	movs	r2, r1
 8004422:	0152      	lsls	r2, r2, #5
 8004424:	1a52      	subs	r2, r2, r1
 8004426:	0193      	lsls	r3, r2, #6
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	185b      	adds	r3, r3, r1
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	0018      	movs	r0, r3
 8004434:	f7fb fe7a 	bl	800012c <__udivsi3>
 8004438:	0003      	movs	r3, r0
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	e00e      	b.n	800445c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	000a      	movs	r2, r1
 8004442:	0152      	lsls	r2, r2, #5
 8004444:	1a52      	subs	r2, r2, r1
 8004446:	0193      	lsls	r3, r2, #6
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	185b      	adds	r3, r3, r1
 800444e:	029b      	lsls	r3, r3, #10
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	0018      	movs	r0, r3
 8004454:	f7fb fe6a 	bl	800012c <__udivsi3>
 8004458:	0003      	movs	r3, r0
 800445a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	613b      	str	r3, [r7, #16]
      break;
 8004460:	e00d      	b.n	800447e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	0b5b      	lsrs	r3, r3, #13
 8004468:	2207      	movs	r2, #7
 800446a:	4013      	ands	r3, r2
 800446c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	3301      	adds	r3, #1
 8004472:	2280      	movs	r2, #128	; 0x80
 8004474:	0212      	lsls	r2, r2, #8
 8004476:	409a      	lsls	r2, r3
 8004478:	0013      	movs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
      break;
 800447c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800447e:	693b      	ldr	r3, [r7, #16]
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b006      	add	sp, #24
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	003d0900 	.word	0x003d0900
 8004490:	00f42400 	.word	0x00f42400
 8004494:	007a1200 	.word	0x007a1200
 8004498:	08009d9c 	.word	0x08009d9c

0800449c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a0:	4b02      	ldr	r3, [pc, #8]	; (80044ac <HAL_RCC_GetHCLKFreq+0x10>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	20000000 	.word	0x20000000

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044b4:	f7ff fff2 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044b8:	0001      	movs	r1, r0
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	2207      	movs	r2, #7
 80044c2:	4013      	ands	r3, r2
 80044c4:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044c6:	5cd3      	ldrb	r3, [r2, r3]
 80044c8:	40d9      	lsrs	r1, r3
 80044ca:	000b      	movs	r3, r1
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	40021000 	.word	0x40021000
 80044d8:	08009d94 	.word	0x08009d94

080044dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044e0:	f7ff ffdc 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044e4:	0001      	movs	r1, r0
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	0adb      	lsrs	r3, r3, #11
 80044ec:	2207      	movs	r2, #7
 80044ee:	4013      	ands	r3, r2
 80044f0:	4a04      	ldr	r2, [pc, #16]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044f2:	5cd3      	ldrb	r3, [r2, r3]
 80044f4:	40d9      	lsrs	r1, r3
 80044f6:	000b      	movs	r3, r1
}
 80044f8:	0018      	movs	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	40021000 	.word	0x40021000
 8004504:	08009d94 	.word	0x08009d94

08004508 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2220      	movs	r2, #32
 8004516:	4013      	ands	r3, r2
 8004518:	d106      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	4013      	ands	r3, r2
 8004524:	d100      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004526:	e0dd      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004528:	2317      	movs	r3, #23
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004530:	4b9c      	ldr	r3, [pc, #624]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	055b      	lsls	r3, r3, #21
 8004538:	4013      	ands	r3, r2
 800453a:	d10a      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453c:	4b99      	ldr	r3, [pc, #612]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800453e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004540:	4b98      	ldr	r3, [pc, #608]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004542:	2180      	movs	r1, #128	; 0x80
 8004544:	0549      	lsls	r1, r1, #21
 8004546:	430a      	orrs	r2, r1
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800454a:	2317      	movs	r3, #23
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	2201      	movs	r2, #1
 8004550:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b95      	ldr	r3, [pc, #596]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4013      	ands	r3, r2
 800455c:	d11a      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455e:	4b92      	ldr	r3, [pc, #584]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b91      	ldr	r3, [pc, #580]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004564:	2180      	movs	r1, #128	; 0x80
 8004566:	0049      	lsls	r1, r1, #1
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456c:	f7fd fe94 	bl	8002298 <HAL_GetTick>
 8004570:	0003      	movs	r3, r0
 8004572:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fd fe8f 	bl	8002298 <HAL_GetTick>
 800457a:	0002      	movs	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b64      	cmp	r3, #100	; 0x64
 8004582:	d901      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e108      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b87      	ldr	r3, [pc, #540]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4013      	ands	r3, r2
 8004592:	d0f0      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004594:	4b83      	ldr	r3, [pc, #524]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	23c0      	movs	r3, #192	; 0xc0
 800459a:	039b      	lsls	r3, r3, #14
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	23c0      	movs	r3, #192	; 0xc0
 80045a6:	039b      	lsls	r3, r3, #14
 80045a8:	4013      	ands	r3, r2
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d107      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	23c0      	movs	r3, #192	; 0xc0
 80045b6:	039b      	lsls	r3, r3, #14
 80045b8:	4013      	ands	r3, r2
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d013      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	23c0      	movs	r3, #192	; 0xc0
 80045c6:	029b      	lsls	r3, r3, #10
 80045c8:	401a      	ands	r2, r3
 80045ca:	23c0      	movs	r3, #192	; 0xc0
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d10a      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80045d2:	4b74      	ldr	r3, [pc, #464]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	029b      	lsls	r3, r3, #10
 80045da:	401a      	ands	r2, r3
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	029b      	lsls	r3, r3, #10
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d101      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0d8      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80045e8:	4b6e      	ldr	r3, [pc, #440]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80045ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045ec:	23c0      	movs	r3, #192	; 0xc0
 80045ee:	029b      	lsls	r3, r3, #10
 80045f0:	4013      	ands	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d049      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	23c0      	movs	r3, #192	; 0xc0
 8004600:	029b      	lsls	r3, r3, #10
 8004602:	4013      	ands	r3, r2
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	429a      	cmp	r2, r3
 8004608:	d004      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2220      	movs	r2, #32
 8004610:	4013      	ands	r3, r2
 8004612:	d10d      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	23c0      	movs	r3, #192	; 0xc0
 800461a:	029b      	lsls	r3, r3, #10
 800461c:	4013      	ands	r3, r2
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	429a      	cmp	r2, r3
 8004622:	d034      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4013      	ands	r3, r2
 800462e:	d02e      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004630:	4b5c      	ldr	r3, [pc, #368]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004634:	4a5d      	ldr	r2, [pc, #372]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004636:	4013      	ands	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800463a:	4b5a      	ldr	r3, [pc, #360]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800463c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800463e:	4b59      	ldr	r3, [pc, #356]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004640:	2180      	movs	r1, #128	; 0x80
 8004642:	0309      	lsls	r1, r1, #12
 8004644:	430a      	orrs	r2, r1
 8004646:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004648:	4b56      	ldr	r3, [pc, #344]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800464a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800464c:	4b55      	ldr	r3, [pc, #340]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800464e:	4958      	ldr	r1, [pc, #352]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004650:	400a      	ands	r2, r1
 8004652:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004654:	4b53      	ldr	r3, [pc, #332]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	2380      	movs	r3, #128	; 0x80
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4013      	ands	r3, r2
 8004662:	d014      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fd fe18 	bl	8002298 <HAL_GetTick>
 8004668:	0003      	movs	r3, r0
 800466a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800466c:	e009      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fd fe13 	bl	8002298 <HAL_GetTick>
 8004672:	0002      	movs	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	4a4e      	ldr	r2, [pc, #312]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e08b      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004682:	4b48      	ldr	r3, [pc, #288]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4013      	ands	r3, r2
 800468c:	d0ef      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	23c0      	movs	r3, #192	; 0xc0
 8004694:	029b      	lsls	r3, r3, #10
 8004696:	401a      	ands	r2, r3
 8004698:	23c0      	movs	r3, #192	; 0xc0
 800469a:	029b      	lsls	r3, r3, #10
 800469c:	429a      	cmp	r2, r3
 800469e:	d10c      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80046a0:	4b40      	ldr	r3, [pc, #256]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a44      	ldr	r2, [pc, #272]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	0019      	movs	r1, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	23c0      	movs	r3, #192	; 0xc0
 80046b0:	039b      	lsls	r3, r3, #14
 80046b2:	401a      	ands	r2, r3
 80046b4:	4b3b      	ldr	r3, [pc, #236]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046b6:	430a      	orrs	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	4b3a      	ldr	r3, [pc, #232]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	23c0      	movs	r3, #192	; 0xc0
 80046c4:	029b      	lsls	r3, r3, #10
 80046c6:	401a      	ands	r2, r3
 80046c8:	4b36      	ldr	r3, [pc, #216]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046ca:	430a      	orrs	r2, r1
 80046cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046ce:	2317      	movs	r3, #23
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d105      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d8:	4b32      	ldr	r3, [pc, #200]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046dc:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046de:	4937      	ldr	r1, [pc, #220]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2201      	movs	r2, #1
 80046ea:	4013      	ands	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ee:	4b2d      	ldr	r3, [pc, #180]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f2:	2203      	movs	r2, #3
 80046f4:	4393      	bics	r3, r2
 80046f6:	0019      	movs	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046fe:	430a      	orrs	r2, r1
 8004700:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2202      	movs	r2, #2
 8004708:	4013      	ands	r3, r2
 800470a:	d009      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800470c:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800470e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004710:	220c      	movs	r2, #12
 8004712:	4393      	bics	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800471c:	430a      	orrs	r2, r1
 800471e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2204      	movs	r2, #4
 8004726:	4013      	ands	r3, r2
 8004728:	d009      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800472a:	4b1e      	ldr	r3, [pc, #120]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	4a24      	ldr	r2, [pc, #144]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004730:	4013      	ands	r3, r2
 8004732:	0019      	movs	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695a      	ldr	r2, [r3, #20]
 8004738:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800473a:	430a      	orrs	r2, r1
 800473c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2208      	movs	r2, #8
 8004744:	4013      	ands	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004748:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800474a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474c:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800474e:	4013      	ands	r3, r2
 8004750:	0019      	movs	r1, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004758:	430a      	orrs	r2, r1
 800475a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2240      	movs	r2, #64	; 0x40
 8004762:	4013      	ands	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	4a17      	ldr	r2, [pc, #92]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800476c:	4013      	ands	r3, r2
 800476e:	0019      	movs	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004776:	430a      	orrs	r2, r1
 8004778:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2280      	movs	r2, #128	; 0x80
 8004780:	4013      	ands	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004788:	4a10      	ldr	r2, [pc, #64]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800478a:	4013      	ands	r3, r2
 800478c:	0019      	movs	r1, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004794:	430a      	orrs	r2, r1
 8004796:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	0018      	movs	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	b006      	add	sp, #24
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40007000 	.word	0x40007000
 80047ac:	fffcffff 	.word	0xfffcffff
 80047b0:	fff7ffff 	.word	0xfff7ffff
 80047b4:	00001388 	.word	0x00001388
 80047b8:	ffcfffff 	.word	0xffcfffff
 80047bc:	efffffff 	.word	0xefffffff
 80047c0:	fffff3ff 	.word	0xfffff3ff
 80047c4:	ffffcfff 	.word	0xffffcfff
 80047c8:	fbffffff 	.word	0xfbffffff
 80047cc:	fff3ffff 	.word	0xfff3ffff

080047d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e044      	b.n	800486c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d107      	bne.n	80047fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2270      	movs	r2, #112	; 0x70
 80047ee:	2100      	movs	r1, #0
 80047f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0018      	movs	r0, r3
 80047f6:	f001 fdcd 	bl	8006394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2224      	movs	r2, #36	; 0x24
 80047fe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2101      	movs	r1, #1
 800480c:	438a      	bics	r2, r1
 800480e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	0018      	movs	r0, r3
 8004814:	f000 fb04 	bl	8004e20 <UART_SetConfig>
 8004818:	0003      	movs	r3, r0
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e024      	b.n	800486c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0018      	movs	r0, r3
 800482e:	f000 fe0f 	bl	8005450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	490d      	ldr	r1, [pc, #52]	; (8004874 <HAL_UART_Init+0xa4>)
 800483e:	400a      	ands	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	212a      	movs	r1, #42	; 0x2a
 800484e:	438a      	bics	r2, r1
 8004850:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2101      	movs	r1, #1
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0018      	movs	r0, r3
 8004866:	f000 fea7 	bl	80055b8 <UART_CheckIdleState>
 800486a:	0003      	movs	r3, r0
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b002      	add	sp, #8
 8004872:	bd80      	pop	{r7, pc}
 8004874:	ffffb7ff 	.word	0xffffb7ff

08004878 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e028      	b.n	80048dc <HAL_UART_DeInit+0x64>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2224      	movs	r2, #36	; 0x24
 800488e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2101      	movs	r1, #1
 800489c:	438a      	bics	r2, r1
 800489e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2200      	movs	r2, #0
 80048ae:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2200      	movs	r2, #0
 80048b6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0018      	movs	r0, r3
 80048bc:	f001 fdb6 	bl	800642c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2270      	movs	r2, #112	; 0x70
 80048d6:	2100      	movs	r1, #0
 80048d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b002      	add	sp, #8
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	1dbb      	adds	r3, r7, #6
 80048f2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d000      	beq.n	80048fe <HAL_UART_Transmit+0x1a>
 80048fc:	e094      	b.n	8004a28 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_UART_Transmit+0x28>
 8004904:	1dbb      	adds	r3, r7, #6
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e08c      	b.n	8004a2a <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	015b      	lsls	r3, r3, #5
 8004918:	429a      	cmp	r2, r3
 800491a:	d109      	bne.n	8004930 <HAL_UART_Transmit+0x4c>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2201      	movs	r2, #1
 8004928:	4013      	ands	r3, r2
 800492a:	d001      	beq.n	8004930 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e07c      	b.n	8004a2a <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2270      	movs	r2, #112	; 0x70
 8004934:	5c9b      	ldrb	r3, [r3, r2]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_UART_Transmit+0x5a>
 800493a:	2302      	movs	r3, #2
 800493c:	e075      	b.n	8004a2a <HAL_UART_Transmit+0x146>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2270      	movs	r2, #112	; 0x70
 8004942:	2101      	movs	r1, #1
 8004944:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2221      	movs	r2, #33	; 0x21
 8004950:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004952:	f7fd fca1 	bl	8002298 <HAL_GetTick>
 8004956:	0003      	movs	r3, r0
 8004958:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1dba      	adds	r2, r7, #6
 800495e:	2150      	movs	r1, #80	; 0x50
 8004960:	8812      	ldrh	r2, [r2, #0]
 8004962:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1dba      	adds	r2, r7, #6
 8004968:	2152      	movs	r1, #82	; 0x52
 800496a:	8812      	ldrh	r2, [r2, #0]
 800496c:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	015b      	lsls	r3, r3, #5
 8004976:	429a      	cmp	r2, r3
 8004978:	d108      	bne.n	800498c <HAL_UART_Transmit+0xa8>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d104      	bne.n	800498c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8004982:	2300      	movs	r3, #0
 8004984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	e003      	b.n	8004994 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004994:	e02c      	b.n	80049f0 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	0013      	movs	r3, r2
 80049a0:	2200      	movs	r2, #0
 80049a2:	2180      	movs	r1, #128	; 0x80
 80049a4:	f000 fe4e 	bl	8005644 <UART_WaitOnFlagUntilTimeout>
 80049a8:	1e03      	subs	r3, r0, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e03c      	b.n	8004a2a <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10b      	bne.n	80049ce <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	001a      	movs	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	05d2      	lsls	r2, r2, #23
 80049c2:	0dd2      	lsrs	r2, r2, #23
 80049c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	3302      	adds	r3, #2
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	e007      	b.n	80049de <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	781a      	ldrb	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	3301      	adds	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2252      	movs	r2, #82	; 0x52
 80049e2:	5a9b      	ldrh	r3, [r3, r2]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b299      	uxth	r1, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2252      	movs	r2, #82	; 0x52
 80049ee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2252      	movs	r2, #82	; 0x52
 80049f4:	5a9b      	ldrh	r3, [r3, r2]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1cc      	bne.n	8004996 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	0013      	movs	r3, r2
 8004a06:	2200      	movs	r2, #0
 8004a08:	2140      	movs	r1, #64	; 0x40
 8004a0a:	f000 fe1b 	bl	8005644 <UART_WaitOnFlagUntilTimeout>
 8004a0e:	1e03      	subs	r3, r0, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e009      	b.n	8004a2a <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2270      	movs	r2, #112	; 0x70
 8004a20:	2100      	movs	r1, #0
 8004a22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e000      	b.n	8004a2a <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
  }
}
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b008      	add	sp, #32
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	1dbb      	adds	r3, r7, #6
 8004a40:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d000      	beq.n	8004a4c <HAL_UART_Receive_IT+0x18>
 8004a4a:	e09f      	b.n	8004b8c <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_UART_Receive_IT+0x26>
 8004a52:	1dbb      	adds	r3, r7, #6
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e097      	b.n	8004b8e <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	2380      	movs	r3, #128	; 0x80
 8004a64:	015b      	lsls	r3, r3, #5
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d109      	bne.n	8004a7e <HAL_UART_Receive_IT+0x4a>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d105      	bne.n	8004a7e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2201      	movs	r2, #1
 8004a76:	4013      	ands	r3, r2
 8004a78:	d001      	beq.n	8004a7e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e087      	b.n	8004b8e <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2270      	movs	r2, #112	; 0x70
 8004a82:	5c9b      	ldrb	r3, [r3, r2]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_UART_Receive_IT+0x58>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e080      	b.n	8004b8e <HAL_UART_Receive_IT+0x15a>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2270      	movs	r2, #112	; 0x70
 8004a90:	2101      	movs	r1, #1
 8004a92:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1dba      	adds	r2, r7, #6
 8004a9e:	2158      	movs	r1, #88	; 0x58
 8004aa0:	8812      	ldrh	r2, [r2, #0]
 8004aa2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1dba      	adds	r2, r7, #6
 8004aa8:	215a      	movs	r1, #90	; 0x5a
 8004aaa:	8812      	ldrh	r2, [r2, #0]
 8004aac:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	015b      	lsls	r3, r3, #5
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d10d      	bne.n	8004adc <HAL_UART_Receive_IT+0xa8>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d104      	bne.n	8004ad2 <HAL_UART_Receive_IT+0x9e>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	225c      	movs	r2, #92	; 0x5c
 8004acc:	4932      	ldr	r1, [pc, #200]	; (8004b98 <HAL_UART_Receive_IT+0x164>)
 8004ace:	5299      	strh	r1, [r3, r2]
 8004ad0:	e02e      	b.n	8004b30 <HAL_UART_Receive_IT+0xfc>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	225c      	movs	r2, #92	; 0x5c
 8004ad6:	21ff      	movs	r1, #255	; 0xff
 8004ad8:	5299      	strh	r1, [r3, r2]
 8004ada:	e029      	b.n	8004b30 <HAL_UART_Receive_IT+0xfc>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <HAL_UART_Receive_IT+0xcc>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <HAL_UART_Receive_IT+0xc2>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	225c      	movs	r2, #92	; 0x5c
 8004af0:	21ff      	movs	r1, #255	; 0xff
 8004af2:	5299      	strh	r1, [r3, r2]
 8004af4:	e01c      	b.n	8004b30 <HAL_UART_Receive_IT+0xfc>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	225c      	movs	r2, #92	; 0x5c
 8004afa:	217f      	movs	r1, #127	; 0x7f
 8004afc:	5299      	strh	r1, [r3, r2]
 8004afe:	e017      	b.n	8004b30 <HAL_UART_Receive_IT+0xfc>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	055b      	lsls	r3, r3, #21
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d10d      	bne.n	8004b28 <HAL_UART_Receive_IT+0xf4>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <HAL_UART_Receive_IT+0xea>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	225c      	movs	r2, #92	; 0x5c
 8004b18:	217f      	movs	r1, #127	; 0x7f
 8004b1a:	5299      	strh	r1, [r3, r2]
 8004b1c:	e008      	b.n	8004b30 <HAL_UART_Receive_IT+0xfc>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	225c      	movs	r2, #92	; 0x5c
 8004b22:	213f      	movs	r1, #63	; 0x3f
 8004b24:	5299      	strh	r1, [r3, r2]
 8004b26:	e003      	b.n	8004b30 <HAL_UART_Receive_IT+0xfc>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	225c      	movs	r2, #92	; 0x5c
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2222      	movs	r2, #34	; 0x22
 8004b3a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2101      	movs	r1, #1
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	015b      	lsls	r3, r3, #5
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d107      	bne.n	8004b68 <HAL_UART_Receive_IT+0x134>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <HAL_UART_Receive_IT+0x168>)
 8004b64:	661a      	str	r2, [r3, #96]	; 0x60
 8004b66:	e002      	b.n	8004b6e <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <HAL_UART_Receive_IT+0x16c>)
 8004b6c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2270      	movs	r2, #112	; 0x70
 8004b72:	2100      	movs	r1, #0
 8004b74:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2190      	movs	r1, #144	; 0x90
 8004b82:	0049      	lsls	r1, r1, #1
 8004b84:	430a      	orrs	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	0018      	movs	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b004      	add	sp, #16
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	000001ff 	.word	0x000001ff
 8004b9c:	08005839 	.word	0x08005839
 8004ba0:	0800577d 	.word	0x0800577d

08004ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	220f      	movs	r2, #15
 8004bc8:	4013      	ands	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d112      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d00e      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	4013      	ands	r3, r2
 8004be0:	d00a      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d100      	bne.n	8004bec <HAL_UART_IRQHandler+0x48>
 8004bea:	e0f6      	b.n	8004dda <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	0010      	movs	r0, r2
 8004bf4:	4798      	blx	r3
      }
      return;
 8004bf6:	e0f0      	b.n	8004dda <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d100      	bne.n	8004c00 <HAL_UART_IRQHandler+0x5c>
 8004bfe:	e0b8      	b.n	8004d72 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2201      	movs	r2, #1
 8004c04:	4013      	ands	r3, r2
 8004c06:	d105      	bne.n	8004c14 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	2390      	movs	r3, #144	; 0x90
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d100      	bne.n	8004c14 <HAL_UART_IRQHandler+0x70>
 8004c12:	e0ae      	b.n	8004d72 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2201      	movs	r2, #1
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_UART_IRQHandler+0x96>
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	4013      	ands	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c32:	2201      	movs	r2, #1
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d00d      	beq.n	8004c5e <HAL_UART_IRQHandler+0xba>
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2201      	movs	r2, #1
 8004c46:	4013      	ands	r3, r2
 8004c48:	d009      	beq.n	8004c5e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c56:	2204      	movs	r2, #4
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	2204      	movs	r2, #4
 8004c62:	4013      	ands	r3, r2
 8004c64:	d00d      	beq.n	8004c82 <HAL_UART_IRQHandler+0xde>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2204      	movs	r2, #4
 8004c74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2208      	movs	r2, #8
 8004c86:	4013      	ands	r3, r2
 8004c88:	d011      	beq.n	8004cae <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d103      	bne.n	8004c9a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2201      	movs	r2, #1
 8004c96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c98:	d009      	beq.n	8004cae <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2208      	movs	r2, #8
 8004ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca6:	2208      	movs	r2, #8
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d100      	bne.n	8004cb8 <HAL_UART_IRQHandler+0x114>
 8004cb6:	e092      	b.n	8004dde <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d00c      	beq.n	8004cda <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d008      	beq.n	8004cda <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	0010      	movs	r0, r2
 8004cd8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cde:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2240      	movs	r2, #64	; 0x40
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d003      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cf4:	d033      	beq.n	8004d5e <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f000 fced 	bl	80056d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2240      	movs	r2, #64	; 0x40
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b40      	cmp	r3, #64	; 0x40
 8004d0a:	d123      	bne.n	8004d54 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2140      	movs	r1, #64	; 0x40
 8004d18:	438a      	bics	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d012      	beq.n	8004d4a <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d28:	4a30      	ldr	r2, [pc, #192]	; (8004dec <HAL_UART_IRQHandler+0x248>)
 8004d2a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d30:	0018      	movs	r0, r3
 8004d32:	f7fd fbdb 	bl	80024ec <HAL_DMA_Abort_IT>
 8004d36:	1e03      	subs	r3, r0, #0
 8004d38:	d019      	beq.n	8004d6e <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d44:	0018      	movs	r0, r3
 8004d46:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d48:	e011      	b.n	8004d6e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f000 f85f 	bl	8004e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d52:	e00c      	b.n	8004d6e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	0018      	movs	r0, r3
 8004d58:	f000 f85a 	bl	8004e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	e007      	b.n	8004d6e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 f855 	bl	8004e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004d6c:	e037      	b.n	8004dde <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6e:	46c0      	nop			; (mov r8, r8)
    return;
 8004d70:	e035      	b.n	8004dde <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	035b      	lsls	r3, r3, #13
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d00e      	beq.n	8004d9a <HAL_UART_IRQHandler+0x1f6>
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	03db      	lsls	r3, r3, #15
 8004d82:	4013      	ands	r3, r2
 8004d84:	d009      	beq.n	8004d9a <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2280      	movs	r2, #128	; 0x80
 8004d8c:	0352      	lsls	r2, r2, #13
 8004d8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	0018      	movs	r0, r3
 8004d94:	f000 fdae 	bl	80058f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d98:	e024      	b.n	8004de4 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d00d      	beq.n	8004dbe <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2280      	movs	r2, #128	; 0x80
 8004da6:	4013      	ands	r3, r2
 8004da8:	d009      	beq.n	8004dbe <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d017      	beq.n	8004de2 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	0010      	movs	r0, r2
 8004dba:	4798      	blx	r3
    }
    return;
 8004dbc:	e011      	b.n	8004de2 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2240      	movs	r2, #64	; 0x40
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <HAL_UART_IRQHandler+0x240>
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2240      	movs	r2, #64	; 0x40
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d00a      	beq.n	8004de4 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f000 fcb8 	bl	8005746 <UART_EndTransmit_IT>
    return;
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	e004      	b.n	8004de4 <HAL_UART_IRQHandler+0x240>
      return;
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	e002      	b.n	8004de4 <HAL_UART_IRQHandler+0x240>
    return;
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	e000      	b.n	8004de4 <HAL_UART_IRQHandler+0x240>
    return;
 8004de2:	46c0      	nop			; (mov r8, r8)
  }

}
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b008      	add	sp, #32
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	08005719 	.word	0x08005719

08004df0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004e08:	46c0      	nop			; (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b002      	add	sp, #8
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b002      	add	sp, #8
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e20:	b5b0      	push	{r4, r5, r7, lr}
 8004e22:	b08e      	sub	sp, #56	; 0x38
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004e28:	231b      	movs	r3, #27
 8004e2a:	2218      	movs	r2, #24
 8004e2c:	4694      	mov	ip, r2
 8004e2e:	44bc      	add	ip, r7
 8004e30:	4463      	add	r3, ip
 8004e32:	2210      	movs	r2, #16
 8004e34:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e3a:	2313      	movs	r3, #19
 8004e3c:	2218      	movs	r2, #24
 8004e3e:	4694      	mov	ip, r2
 8004e40:	44bc      	add	ip, r7
 8004e42:	4463      	add	r3, ip
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4ac8      	ldr	r2, [pc, #800]	; (800518c <UART_SetConfig+0x36c>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	0019      	movs	r1, r3
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e76:	430a      	orrs	r2, r1
 8004e78:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4ac3      	ldr	r2, [pc, #780]	; (8005190 <UART_SetConfig+0x370>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	0019      	movs	r1, r3
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4abd      	ldr	r2, [pc, #756]	; (8005194 <UART_SetConfig+0x374>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	4ab9      	ldr	r2, [pc, #740]	; (8005198 <UART_SetConfig+0x378>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	0019      	movs	r1, r3
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4ab5      	ldr	r2, [pc, #724]	; (800519c <UART_SetConfig+0x37c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d134      	bne.n	8004f36 <UART_SetConfig+0x116>
 8004ecc:	4bb4      	ldr	r3, [pc, #720]	; (80051a0 <UART_SetConfig+0x380>)
 8004ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d015      	beq.n	8004f04 <UART_SetConfig+0xe4>
 8004ed8:	d304      	bcc.n	8004ee4 <UART_SetConfig+0xc4>
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d00a      	beq.n	8004ef4 <UART_SetConfig+0xd4>
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d018      	beq.n	8004f14 <UART_SetConfig+0xf4>
 8004ee2:	e01f      	b.n	8004f24 <UART_SetConfig+0x104>
 8004ee4:	231b      	movs	r3, #27
 8004ee6:	2218      	movs	r2, #24
 8004ee8:	4694      	mov	ip, r2
 8004eea:	44bc      	add	ip, r7
 8004eec:	4463      	add	r3, ip
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	e0ab      	b.n	800504c <UART_SetConfig+0x22c>
 8004ef4:	231b      	movs	r3, #27
 8004ef6:	2218      	movs	r2, #24
 8004ef8:	4694      	mov	ip, r2
 8004efa:	44bc      	add	ip, r7
 8004efc:	4463      	add	r3, ip
 8004efe:	2202      	movs	r2, #2
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	e0a3      	b.n	800504c <UART_SetConfig+0x22c>
 8004f04:	231b      	movs	r3, #27
 8004f06:	2218      	movs	r2, #24
 8004f08:	4694      	mov	ip, r2
 8004f0a:	44bc      	add	ip, r7
 8004f0c:	4463      	add	r3, ip
 8004f0e:	2204      	movs	r2, #4
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	e09b      	b.n	800504c <UART_SetConfig+0x22c>
 8004f14:	231b      	movs	r3, #27
 8004f16:	2218      	movs	r2, #24
 8004f18:	4694      	mov	ip, r2
 8004f1a:	44bc      	add	ip, r7
 8004f1c:	4463      	add	r3, ip
 8004f1e:	2208      	movs	r2, #8
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e093      	b.n	800504c <UART_SetConfig+0x22c>
 8004f24:	231b      	movs	r3, #27
 8004f26:	2218      	movs	r2, #24
 8004f28:	4694      	mov	ip, r2
 8004f2a:	44bc      	add	ip, r7
 8004f2c:	4463      	add	r3, ip
 8004f2e:	2210      	movs	r2, #16
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	e08a      	b.n	800504c <UART_SetConfig+0x22c>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a9a      	ldr	r2, [pc, #616]	; (80051a4 <UART_SetConfig+0x384>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d137      	bne.n	8004fb0 <UART_SetConfig+0x190>
 8004f40:	4b97      	ldr	r3, [pc, #604]	; (80051a0 <UART_SetConfig+0x380>)
 8004f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f44:	220c      	movs	r2, #12
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d018      	beq.n	8004f7e <UART_SetConfig+0x15e>
 8004f4c:	d802      	bhi.n	8004f54 <UART_SetConfig+0x134>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <UART_SetConfig+0x13e>
 8004f52:	e024      	b.n	8004f9e <UART_SetConfig+0x17e>
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d00a      	beq.n	8004f6e <UART_SetConfig+0x14e>
 8004f58:	2b0c      	cmp	r3, #12
 8004f5a:	d018      	beq.n	8004f8e <UART_SetConfig+0x16e>
 8004f5c:	e01f      	b.n	8004f9e <UART_SetConfig+0x17e>
 8004f5e:	231b      	movs	r3, #27
 8004f60:	2218      	movs	r2, #24
 8004f62:	4694      	mov	ip, r2
 8004f64:	44bc      	add	ip, r7
 8004f66:	4463      	add	r3, ip
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	e06e      	b.n	800504c <UART_SetConfig+0x22c>
 8004f6e:	231b      	movs	r3, #27
 8004f70:	2218      	movs	r2, #24
 8004f72:	4694      	mov	ip, r2
 8004f74:	44bc      	add	ip, r7
 8004f76:	4463      	add	r3, ip
 8004f78:	2202      	movs	r2, #2
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	e066      	b.n	800504c <UART_SetConfig+0x22c>
 8004f7e:	231b      	movs	r3, #27
 8004f80:	2218      	movs	r2, #24
 8004f82:	4694      	mov	ip, r2
 8004f84:	44bc      	add	ip, r7
 8004f86:	4463      	add	r3, ip
 8004f88:	2204      	movs	r2, #4
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e05e      	b.n	800504c <UART_SetConfig+0x22c>
 8004f8e:	231b      	movs	r3, #27
 8004f90:	2218      	movs	r2, #24
 8004f92:	4694      	mov	ip, r2
 8004f94:	44bc      	add	ip, r7
 8004f96:	4463      	add	r3, ip
 8004f98:	2208      	movs	r2, #8
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e056      	b.n	800504c <UART_SetConfig+0x22c>
 8004f9e:	231b      	movs	r3, #27
 8004fa0:	2218      	movs	r2, #24
 8004fa2:	4694      	mov	ip, r2
 8004fa4:	44bc      	add	ip, r7
 8004fa6:	4463      	add	r3, ip
 8004fa8:	2210      	movs	r2, #16
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	e04d      	b.n	800504c <UART_SetConfig+0x22c>
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a77      	ldr	r2, [pc, #476]	; (8005194 <UART_SetConfig+0x374>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d141      	bne.n	800503e <UART_SetConfig+0x21e>
 8004fba:	4b79      	ldr	r3, [pc, #484]	; (80051a0 <UART_SetConfig+0x380>)
 8004fbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fbe:	23c0      	movs	r3, #192	; 0xc0
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2280      	movs	r2, #128	; 0x80
 8004fc6:	00d2      	lsls	r2, r2, #3
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d01f      	beq.n	800500c <UART_SetConfig+0x1ec>
 8004fcc:	2280      	movs	r2, #128	; 0x80
 8004fce:	00d2      	lsls	r2, r2, #3
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d802      	bhi.n	8004fda <UART_SetConfig+0x1ba>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d009      	beq.n	8004fec <UART_SetConfig+0x1cc>
 8004fd8:	e028      	b.n	800502c <UART_SetConfig+0x20c>
 8004fda:	2280      	movs	r2, #128	; 0x80
 8004fdc:	0112      	lsls	r2, r2, #4
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00c      	beq.n	8004ffc <UART_SetConfig+0x1dc>
 8004fe2:	22c0      	movs	r2, #192	; 0xc0
 8004fe4:	0112      	lsls	r2, r2, #4
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d018      	beq.n	800501c <UART_SetConfig+0x1fc>
 8004fea:	e01f      	b.n	800502c <UART_SetConfig+0x20c>
 8004fec:	231b      	movs	r3, #27
 8004fee:	2218      	movs	r2, #24
 8004ff0:	4694      	mov	ip, r2
 8004ff2:	44bc      	add	ip, r7
 8004ff4:	4463      	add	r3, ip
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e027      	b.n	800504c <UART_SetConfig+0x22c>
 8004ffc:	231b      	movs	r3, #27
 8004ffe:	2218      	movs	r2, #24
 8005000:	4694      	mov	ip, r2
 8005002:	44bc      	add	ip, r7
 8005004:	4463      	add	r3, ip
 8005006:	2202      	movs	r2, #2
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	e01f      	b.n	800504c <UART_SetConfig+0x22c>
 800500c:	231b      	movs	r3, #27
 800500e:	2218      	movs	r2, #24
 8005010:	4694      	mov	ip, r2
 8005012:	44bc      	add	ip, r7
 8005014:	4463      	add	r3, ip
 8005016:	2204      	movs	r2, #4
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e017      	b.n	800504c <UART_SetConfig+0x22c>
 800501c:	231b      	movs	r3, #27
 800501e:	2218      	movs	r2, #24
 8005020:	4694      	mov	ip, r2
 8005022:	44bc      	add	ip, r7
 8005024:	4463      	add	r3, ip
 8005026:	2208      	movs	r2, #8
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	e00f      	b.n	800504c <UART_SetConfig+0x22c>
 800502c:	231b      	movs	r3, #27
 800502e:	2218      	movs	r2, #24
 8005030:	4694      	mov	ip, r2
 8005032:	44bc      	add	ip, r7
 8005034:	4463      	add	r3, ip
 8005036:	2210      	movs	r2, #16
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	e006      	b.n	800504c <UART_SetConfig+0x22c>
 800503e:	231b      	movs	r3, #27
 8005040:	2218      	movs	r2, #24
 8005042:	4694      	mov	ip, r2
 8005044:	44bc      	add	ip, r7
 8005046:	4463      	add	r3, ip
 8005048:	2210      	movs	r2, #16
 800504a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a50      	ldr	r2, [pc, #320]	; (8005194 <UART_SetConfig+0x374>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d000      	beq.n	8005058 <UART_SetConfig+0x238>
 8005056:	e083      	b.n	8005160 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005058:	231b      	movs	r3, #27
 800505a:	2218      	movs	r2, #24
 800505c:	4694      	mov	ip, r2
 800505e:	44bc      	add	ip, r7
 8005060:	4463      	add	r3, ip
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d00d      	beq.n	8005084 <UART_SetConfig+0x264>
 8005068:	dc02      	bgt.n	8005070 <UART_SetConfig+0x250>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <UART_SetConfig+0x25a>
 800506e:	e01d      	b.n	80050ac <UART_SetConfig+0x28c>
 8005070:	2b04      	cmp	r3, #4
 8005072:	d012      	beq.n	800509a <UART_SetConfig+0x27a>
 8005074:	2b08      	cmp	r3, #8
 8005076:	d015      	beq.n	80050a4 <UART_SetConfig+0x284>
 8005078:	e018      	b.n	80050ac <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800507a:	f7ff fa19 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 800507e:	0003      	movs	r3, r0
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005082:	e01b      	b.n	80050bc <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005084:	4b46      	ldr	r3, [pc, #280]	; (80051a0 <UART_SetConfig+0x380>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2210      	movs	r2, #16
 800508a:	4013      	ands	r3, r2
 800508c:	d002      	beq.n	8005094 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800508e:	4b46      	ldr	r3, [pc, #280]	; (80051a8 <UART_SetConfig+0x388>)
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8005092:	e013      	b.n	80050bc <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005094:	4b45      	ldr	r3, [pc, #276]	; (80051ac <UART_SetConfig+0x38c>)
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005098:	e010      	b.n	80050bc <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800509a:	f7ff f97b 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 800509e:	0003      	movs	r3, r0
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050a2:	e00b      	b.n	80050bc <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050aa:	e007      	b.n	80050bc <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80050ac:	2313      	movs	r3, #19
 80050ae:	2218      	movs	r2, #24
 80050b0:	4694      	mov	ip, r2
 80050b2:	44bc      	add	ip, r7
 80050b4:	4463      	add	r3, ip
 80050b6:	2201      	movs	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
        break;
 80050ba:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d100      	bne.n	80050c4 <UART_SetConfig+0x2a4>
 80050c2:	e1a6      	b.n	8005412 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	0013      	movs	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	189b      	adds	r3, r3, r2
 80050ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d305      	bcc.n	80050e0 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050dc:	429a      	cmp	r2, r3
 80050de:	d907      	bls.n	80050f0 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 80050e0:	2313      	movs	r3, #19
 80050e2:	2218      	movs	r2, #24
 80050e4:	4694      	mov	ip, r2
 80050e6:	44bc      	add	ip, r7
 80050e8:	4463      	add	r3, ip
 80050ea:	2201      	movs	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	e190      	b.n	8005412 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	6939      	ldr	r1, [r7, #16]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	000b      	movs	r3, r1
 80050fe:	0e1b      	lsrs	r3, r3, #24
 8005100:	0010      	movs	r0, r2
 8005102:	0205      	lsls	r5, r0, #8
 8005104:	431d      	orrs	r5, r3
 8005106:	000b      	movs	r3, r1
 8005108:	021c      	lsls	r4, r3, #8
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	68b8      	ldr	r0, [r7, #8]
 8005118:	68f9      	ldr	r1, [r7, #12]
 800511a:	1900      	adds	r0, r0, r4
 800511c:	4169      	adcs	r1, r5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	607b      	str	r3, [r7, #4]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f7fb f9b2 	bl	8000494 <__aeabi_uldivmod>
 8005130:	0003      	movs	r3, r0
 8005132:	000c      	movs	r4, r1
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	4a1d      	ldr	r2, [pc, #116]	; (80051b0 <UART_SetConfig+0x390>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d908      	bls.n	8005150 <UART_SetConfig+0x330>
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	4a1c      	ldr	r2, [pc, #112]	; (80051b4 <UART_SetConfig+0x394>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d804      	bhi.n	8005150 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800514c:	60da      	str	r2, [r3, #12]
 800514e:	e160      	b.n	8005412 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8005150:	2313      	movs	r3, #19
 8005152:	2218      	movs	r2, #24
 8005154:	4694      	mov	ip, r2
 8005156:	44bc      	add	ip, r7
 8005158:	4463      	add	r3, ip
 800515a:	2201      	movs	r2, #1
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e158      	b.n	8005412 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	69da      	ldr	r2, [r3, #28]
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	429a      	cmp	r2, r3
 800516a:	d000      	beq.n	800516e <UART_SetConfig+0x34e>
 800516c:	e0c3      	b.n	80052f6 <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 800516e:	231b      	movs	r3, #27
 8005170:	2218      	movs	r2, #24
 8005172:	4694      	mov	ip, r2
 8005174:	44bc      	add	ip, r7
 8005176:	4463      	add	r3, ip
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b08      	cmp	r3, #8
 800517c:	d900      	bls.n	8005180 <UART_SetConfig+0x360>
 800517e:	e086      	b.n	800528e <UART_SetConfig+0x46e>
 8005180:	009a      	lsls	r2, r3, #2
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <UART_SetConfig+0x398>)
 8005184:	18d3      	adds	r3, r2, r3
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	469f      	mov	pc, r3
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	efff69f3 	.word	0xefff69f3
 8005190:	ffffcfff 	.word	0xffffcfff
 8005194:	40004800 	.word	0x40004800
 8005198:	fffff4ff 	.word	0xfffff4ff
 800519c:	40013800 	.word	0x40013800
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40004400 	.word	0x40004400
 80051a8:	003d0900 	.word	0x003d0900
 80051ac:	00f42400 	.word	0x00f42400
 80051b0:	000002ff 	.word	0x000002ff
 80051b4:	000fffff 	.word	0x000fffff
 80051b8:	08009d3c 	.word	0x08009d3c
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80051bc:	f7ff f978 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 80051c0:	0003      	movs	r3, r0
 80051c2:	005a      	lsls	r2, r3, #1
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	18d2      	adds	r2, r2, r3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	0019      	movs	r1, r3
 80051d2:	0010      	movs	r0, r2
 80051d4:	f7fa ffaa 	bl	800012c <__udivsi3>
 80051d8:	0003      	movs	r3, r0
 80051da:	b29b      	uxth	r3, r3
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051de:	e05e      	b.n	800529e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80051e0:	f7ff f97c 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 80051e4:	0003      	movs	r3, r0
 80051e6:	005a      	lsls	r2, r3, #1
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	18d2      	adds	r2, r2, r3
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	0019      	movs	r1, r3
 80051f6:	0010      	movs	r0, r2
 80051f8:	f7fa ff98 	bl	800012c <__udivsi3>
 80051fc:	0003      	movs	r3, r0
 80051fe:	b29b      	uxth	r3, r3
 8005200:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005202:	e04c      	b.n	800529e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005204:	4b8b      	ldr	r3, [pc, #556]	; (8005434 <UART_SetConfig+0x614>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2210      	movs	r2, #16
 800520a:	4013      	ands	r3, r2
 800520c:	d00e      	beq.n	800522c <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	4a88      	ldr	r2, [pc, #544]	; (8005438 <UART_SetConfig+0x618>)
 8005216:	189a      	adds	r2, r3, r2
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	0019      	movs	r1, r3
 800521e:	0010      	movs	r0, r2
 8005220:	f7fa ff84 	bl	800012c <__udivsi3>
 8005224:	0003      	movs	r3, r0
 8005226:	b29b      	uxth	r3, r3
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800522a:	e038      	b.n	800529e <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	4a82      	ldr	r2, [pc, #520]	; (800543c <UART_SetConfig+0x61c>)
 8005234:	189a      	adds	r2, r3, r2
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	0019      	movs	r1, r3
 800523c:	0010      	movs	r0, r2
 800523e:	f7fa ff75 	bl	800012c <__udivsi3>
 8005242:	0003      	movs	r3, r0
 8005244:	b29b      	uxth	r3, r3
 8005246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005248:	e029      	b.n	800529e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800524a:	f7ff f8a3 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 800524e:	0003      	movs	r3, r0
 8005250:	005a      	lsls	r2, r3, #1
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	18d2      	adds	r2, r2, r3
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	0019      	movs	r1, r3
 8005260:	0010      	movs	r0, r2
 8005262:	f7fa ff63 	bl	800012c <__udivsi3>
 8005266:	0003      	movs	r3, r0
 8005268:	b29b      	uxth	r3, r3
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800526c:	e017      	b.n	800529e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	2280      	movs	r2, #128	; 0x80
 8005276:	0252      	lsls	r2, r2, #9
 8005278:	189a      	adds	r2, r3, r2
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	0019      	movs	r1, r3
 8005280:	0010      	movs	r0, r2
 8005282:	f7fa ff53 	bl	800012c <__udivsi3>
 8005286:	0003      	movs	r3, r0
 8005288:	b29b      	uxth	r3, r3
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800528c:	e007      	b.n	800529e <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800528e:	2313      	movs	r3, #19
 8005290:	2218      	movs	r2, #24
 8005292:	4694      	mov	ip, r2
 8005294:	44bc      	add	ip, r7
 8005296:	4463      	add	r3, ip
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]
        break;
 800529c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	2b0f      	cmp	r3, #15
 80052a2:	d920      	bls.n	80052e6 <UART_SetConfig+0x4c6>
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	4a66      	ldr	r2, [pc, #408]	; (8005440 <UART_SetConfig+0x620>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d81c      	bhi.n	80052e6 <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	200a      	movs	r0, #10
 80052b2:	2418      	movs	r4, #24
 80052b4:	193b      	adds	r3, r7, r4
 80052b6:	181b      	adds	r3, r3, r0
 80052b8:	210f      	movs	r1, #15
 80052ba:	438a      	bics	r2, r1
 80052bc:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2207      	movs	r2, #7
 80052c6:	4013      	ands	r3, r2
 80052c8:	b299      	uxth	r1, r3
 80052ca:	193b      	adds	r3, r7, r4
 80052cc:	181b      	adds	r3, r3, r0
 80052ce:	193a      	adds	r2, r7, r4
 80052d0:	1812      	adds	r2, r2, r0
 80052d2:	8812      	ldrh	r2, [r2, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	193a      	adds	r2, r7, r4
 80052de:	1812      	adds	r2, r2, r0
 80052e0:	8812      	ldrh	r2, [r2, #0]
 80052e2:	60da      	str	r2, [r3, #12]
 80052e4:	e095      	b.n	8005412 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80052e6:	2313      	movs	r3, #19
 80052e8:	2218      	movs	r2, #24
 80052ea:	4694      	mov	ip, r2
 80052ec:	44bc      	add	ip, r7
 80052ee:	4463      	add	r3, ip
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e08d      	b.n	8005412 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 80052f6:	231b      	movs	r3, #27
 80052f8:	2218      	movs	r2, #24
 80052fa:	4694      	mov	ip, r2
 80052fc:	44bc      	add	ip, r7
 80052fe:	4463      	add	r3, ip
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b08      	cmp	r3, #8
 8005304:	d86a      	bhi.n	80053dc <UART_SetConfig+0x5bc>
 8005306:	009a      	lsls	r2, r3, #2
 8005308:	4b4e      	ldr	r3, [pc, #312]	; (8005444 <UART_SetConfig+0x624>)
 800530a:	18d3      	adds	r3, r2, r3
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005310:	f7ff f8ce 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8005314:	0002      	movs	r2, r0
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	18d2      	adds	r2, r2, r3
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	0019      	movs	r1, r3
 8005324:	0010      	movs	r0, r2
 8005326:	f7fa ff01 	bl	800012c <__udivsi3>
 800532a:	0003      	movs	r3, r0
 800532c:	b29b      	uxth	r3, r3
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005330:	e05c      	b.n	80053ec <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005332:	f7ff f8d3 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 8005336:	0002      	movs	r2, r0
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	18d2      	adds	r2, r2, r3
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	0019      	movs	r1, r3
 8005346:	0010      	movs	r0, r2
 8005348:	f7fa fef0 	bl	800012c <__udivsi3>
 800534c:	0003      	movs	r3, r0
 800534e:	b29b      	uxth	r3, r3
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005352:	e04b      	b.n	80053ec <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005354:	4b37      	ldr	r3, [pc, #220]	; (8005434 <UART_SetConfig+0x614>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2210      	movs	r2, #16
 800535a:	4013      	ands	r3, r2
 800535c:	d00e      	beq.n	800537c <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	4a38      	ldr	r2, [pc, #224]	; (8005448 <UART_SetConfig+0x628>)
 8005366:	189a      	adds	r2, r3, r2
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	0019      	movs	r1, r3
 800536e:	0010      	movs	r0, r2
 8005370:	f7fa fedc 	bl	800012c <__udivsi3>
 8005374:	0003      	movs	r3, r0
 8005376:	b29b      	uxth	r3, r3
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800537a:	e037      	b.n	80053ec <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	4a32      	ldr	r2, [pc, #200]	; (800544c <UART_SetConfig+0x62c>)
 8005384:	189a      	adds	r2, r3, r2
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	0019      	movs	r1, r3
 800538c:	0010      	movs	r0, r2
 800538e:	f7fa fecd 	bl	800012c <__udivsi3>
 8005392:	0003      	movs	r3, r0
 8005394:	b29b      	uxth	r3, r3
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005398:	e028      	b.n	80053ec <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800539a:	f7fe fffb 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 800539e:	0002      	movs	r2, r0
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	18d2      	adds	r2, r2, r3
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	0019      	movs	r1, r3
 80053ae:	0010      	movs	r0, r2
 80053b0:	f7fa febc 	bl	800012c <__udivsi3>
 80053b4:	0003      	movs	r3, r0
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053ba:	e017      	b.n	80053ec <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	2280      	movs	r2, #128	; 0x80
 80053c4:	0212      	lsls	r2, r2, #8
 80053c6:	189a      	adds	r2, r3, r2
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	0019      	movs	r1, r3
 80053ce:	0010      	movs	r0, r2
 80053d0:	f7fa feac 	bl	800012c <__udivsi3>
 80053d4:	0003      	movs	r3, r0
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053da:	e007      	b.n	80053ec <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80053dc:	2313      	movs	r3, #19
 80053de:	2218      	movs	r2, #24
 80053e0:	4694      	mov	ip, r2
 80053e2:	44bc      	add	ip, r7
 80053e4:	4463      	add	r3, ip
 80053e6:	2201      	movs	r2, #1
 80053e8:	701a      	strb	r2, [r3, #0]
        break;
 80053ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b0f      	cmp	r3, #15
 80053f0:	d908      	bls.n	8005404 <UART_SetConfig+0x5e4>
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	4a12      	ldr	r2, [pc, #72]	; (8005440 <UART_SetConfig+0x620>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d804      	bhi.n	8005404 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005400:	60da      	str	r2, [r3, #12]
 8005402:	e006      	b.n	8005412 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8005404:	2313      	movs	r3, #19
 8005406:	2218      	movs	r2, #24
 8005408:	4694      	mov	ip, r2
 800540a:	44bc      	add	ip, r7
 800540c:	4463      	add	r3, ip
 800540e:	2201      	movs	r2, #1
 8005410:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	2200      	movs	r2, #0
 8005416:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	2200      	movs	r2, #0
 800541c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800541e:	2313      	movs	r3, #19
 8005420:	2218      	movs	r2, #24
 8005422:	4694      	mov	ip, r2
 8005424:	44bc      	add	ip, r7
 8005426:	4463      	add	r3, ip
 8005428:	781b      	ldrb	r3, [r3, #0]
}
 800542a:	0018      	movs	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	b00e      	add	sp, #56	; 0x38
 8005430:	bdb0      	pop	{r4, r5, r7, pc}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	40021000 	.word	0x40021000
 8005438:	007a1200 	.word	0x007a1200
 800543c:	01e84800 	.word	0x01e84800
 8005440:	0000ffff 	.word	0x0000ffff
 8005444:	08009d60 	.word	0x08009d60
 8005448:	003d0900 	.word	0x003d0900
 800544c:	00f42400 	.word	0x00f42400

08005450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	2201      	movs	r2, #1
 800545e:	4013      	ands	r3, r2
 8005460:	d00b      	beq.n	800547a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4a4a      	ldr	r2, [pc, #296]	; (8005594 <UART_AdvFeatureConfig+0x144>)
 800546a:	4013      	ands	r3, r2
 800546c:	0019      	movs	r1, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2202      	movs	r2, #2
 8005480:	4013      	ands	r3, r2
 8005482:	d00b      	beq.n	800549c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4a43      	ldr	r2, [pc, #268]	; (8005598 <UART_AdvFeatureConfig+0x148>)
 800548c:	4013      	ands	r3, r2
 800548e:	0019      	movs	r1, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2204      	movs	r2, #4
 80054a2:	4013      	ands	r3, r2
 80054a4:	d00b      	beq.n	80054be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4a3b      	ldr	r2, [pc, #236]	; (800559c <UART_AdvFeatureConfig+0x14c>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	2208      	movs	r2, #8
 80054c4:	4013      	ands	r3, r2
 80054c6:	d00b      	beq.n	80054e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	4a34      	ldr	r2, [pc, #208]	; (80055a0 <UART_AdvFeatureConfig+0x150>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	0019      	movs	r1, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	2210      	movs	r2, #16
 80054e6:	4013      	ands	r3, r2
 80054e8:	d00b      	beq.n	8005502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	4a2c      	ldr	r2, [pc, #176]	; (80055a4 <UART_AdvFeatureConfig+0x154>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	0019      	movs	r1, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	2220      	movs	r2, #32
 8005508:	4013      	ands	r3, r2
 800550a:	d00b      	beq.n	8005524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	4a25      	ldr	r2, [pc, #148]	; (80055a8 <UART_AdvFeatureConfig+0x158>)
 8005514:	4013      	ands	r3, r2
 8005516:	0019      	movs	r1, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	2240      	movs	r2, #64	; 0x40
 800552a:	4013      	ands	r3, r2
 800552c:	d01d      	beq.n	800556a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <UART_AdvFeatureConfig+0x15c>)
 8005536:	4013      	ands	r3, r2
 8005538:	0019      	movs	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800554a:	2380      	movs	r3, #128	; 0x80
 800554c:	035b      	lsls	r3, r3, #13
 800554e:	429a      	cmp	r2, r3
 8005550:	d10b      	bne.n	800556a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <UART_AdvFeatureConfig+0x160>)
 800555a:	4013      	ands	r3, r2
 800555c:	0019      	movs	r1, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	2280      	movs	r2, #128	; 0x80
 8005570:	4013      	ands	r3, r2
 8005572:	d00b      	beq.n	800558c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <UART_AdvFeatureConfig+0x164>)
 800557c:	4013      	ands	r3, r2
 800557e:	0019      	movs	r1, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	605a      	str	r2, [r3, #4]
  }
}
 800558c:	46c0      	nop			; (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b002      	add	sp, #8
 8005592:	bd80      	pop	{r7, pc}
 8005594:	fffdffff 	.word	0xfffdffff
 8005598:	fffeffff 	.word	0xfffeffff
 800559c:	fffbffff 	.word	0xfffbffff
 80055a0:	ffff7fff 	.word	0xffff7fff
 80055a4:	ffffefff 	.word	0xffffefff
 80055a8:	ffffdfff 	.word	0xffffdfff
 80055ac:	ffefffff 	.word	0xffefffff
 80055b0:	ff9fffff 	.word	0xff9fffff
 80055b4:	fff7ffff 	.word	0xfff7ffff

080055b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af02      	add	r7, sp, #8
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80055c6:	f7fc fe67 	bl	8002298 <HAL_GetTick>
 80055ca:	0003      	movs	r3, r0
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2208      	movs	r2, #8
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d10d      	bne.n	80055f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	2380      	movs	r3, #128	; 0x80
 80055e0:	0399      	lsls	r1, r3, #14
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	4b16      	ldr	r3, [pc, #88]	; (8005640 <UART_CheckIdleState+0x88>)
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	0013      	movs	r3, r2
 80055ea:	2200      	movs	r2, #0
 80055ec:	f000 f82a 	bl	8005644 <UART_WaitOnFlagUntilTimeout>
 80055f0:	1e03      	subs	r3, r0, #0
 80055f2:	d001      	beq.n	80055f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e01f      	b.n	8005638 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2204      	movs	r2, #4
 8005600:	4013      	ands	r3, r2
 8005602:	2b04      	cmp	r3, #4
 8005604:	d10d      	bne.n	8005622 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	2380      	movs	r3, #128	; 0x80
 800560a:	03d9      	lsls	r1, r3, #15
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <UART_CheckIdleState+0x88>)
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	0013      	movs	r3, r2
 8005614:	2200      	movs	r2, #0
 8005616:	f000 f815 	bl	8005644 <UART_WaitOnFlagUntilTimeout>
 800561a:	1e03      	subs	r3, r0, #0
 800561c:	d001      	beq.n	8005622 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e00a      	b.n	8005638 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2220      	movs	r2, #32
 8005626:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2270      	movs	r2, #112	; 0x70
 8005632:	2100      	movs	r1, #0
 8005634:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	0018      	movs	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	b004      	add	sp, #16
 800563e:	bd80      	pop	{r7, pc}
 8005640:	01ffffff 	.word	0x01ffffff

08005644 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	603b      	str	r3, [r7, #0]
 8005650:	1dfb      	adds	r3, r7, #7
 8005652:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005654:	e029      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	3301      	adds	r3, #1
 800565a:	d026      	beq.n	80056aa <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565c:	f7fc fe1c 	bl	8002298 <HAL_GetTick>
 8005660:	0002      	movs	r2, r0
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	429a      	cmp	r2, r3
 800566a:	d302      	bcc.n	8005672 <UART_WaitOnFlagUntilTimeout+0x2e>
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d11b      	bne.n	80056aa <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4915      	ldr	r1, [pc, #84]	; (80056d4 <UART_WaitOnFlagUntilTimeout+0x90>)
 800567e:	400a      	ands	r2, r1
 8005680:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2101      	movs	r1, #1
 800568e:	438a      	bics	r2, r1
 8005690:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2220      	movs	r2, #32
 8005696:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2270      	movs	r2, #112	; 0x70
 80056a2:	2100      	movs	r1, #0
 80056a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e00f      	b.n	80056ca <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	4013      	ands	r3, r2
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	425a      	negs	r2, r3
 80056ba:	4153      	adcs	r3, r2
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	001a      	movs	r2, r3
 80056c0:	1dfb      	adds	r3, r7, #7
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d0c6      	beq.n	8005656 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	0018      	movs	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b004      	add	sp, #16
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	fffffe5f 	.word	0xfffffe5f

080056d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	490a      	ldr	r1, [pc, #40]	; (8005714 <UART_EndRxTransfer+0x3c>)
 80056ec:	400a      	ands	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2101      	movs	r1, #1
 80056fc:	438a      	bics	r2, r1
 80056fe:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800570c:	46c0      	nop			; (mov r8, r8)
 800570e:	46bd      	mov	sp, r7
 8005710:	b002      	add	sp, #8
 8005712:	bd80      	pop	{r7, pc}
 8005714:	fffffedf 	.word	0xfffffedf

08005718 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	225a      	movs	r2, #90	; 0x5a
 800572a:	2100      	movs	r1, #0
 800572c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2252      	movs	r2, #82	; 0x52
 8005732:	2100      	movs	r1, #0
 8005734:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	0018      	movs	r0, r3
 800573a:	f7ff fb69 	bl	8004e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	46bd      	mov	sp, r7
 8005742:	b004      	add	sp, #16
 8005744:	bd80      	pop	{r7, pc}

08005746 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2140      	movs	r1, #64	; 0x40
 800575a:	438a      	bics	r2, r1
 800575c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0018      	movs	r0, r3
 800576e:	f7ff fb3f 	bl	8004df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	46bd      	mov	sp, r7
 8005776:	b002      	add	sp, #8
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005784:	230e      	movs	r3, #14
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	215c      	movs	r1, #92	; 0x5c
 800578c:	5a52      	ldrh	r2, [r2, r1]
 800578e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005794:	2b22      	cmp	r3, #34	; 0x22
 8005796:	d140      	bne.n	800581a <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800579e:	210c      	movs	r1, #12
 80057a0:	187b      	adds	r3, r7, r1
 80057a2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057a4:	187b      	adds	r3, r7, r1
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	230e      	movs	r3, #14
 80057ac:	18fb      	adds	r3, r7, r3
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b2d9      	uxtb	r1, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	400a      	ands	r2, r1
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	225a      	movs	r2, #90	; 0x5a
 80057ca:	5a9b      	ldrh	r3, [r3, r2]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b299      	uxth	r1, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	225a      	movs	r2, #90	; 0x5a
 80057d6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	225a      	movs	r2, #90	; 0x5a
 80057dc:	5a9b      	ldrh	r3, [r3, r2]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d122      	bne.n	800582a <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4911      	ldr	r1, [pc, #68]	; (8005834 <UART_RxISR_8BIT+0xb8>)
 80057f0:	400a      	ands	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2101      	movs	r1, #1
 8005800:	438a      	bics	r2, r1
 8005802:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	0018      	movs	r0, r3
 8005814:	f7ff faf4 	bl	8004e00 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005818:	e007      	b.n	800582a <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2108      	movs	r1, #8
 8005826:	430a      	orrs	r2, r1
 8005828:	619a      	str	r2, [r3, #24]
}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	46bd      	mov	sp, r7
 800582e:	b004      	add	sp, #16
 8005830:	bd80      	pop	{r7, pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	fffffedf 	.word	0xfffffedf

08005838 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005840:	230e      	movs	r3, #14
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	215c      	movs	r1, #92	; 0x5c
 8005848:	5a52      	ldrh	r2, [r2, r1]
 800584a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005850:	2b22      	cmp	r3, #34	; 0x22
 8005852:	d140      	bne.n	80058d6 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800585a:	210c      	movs	r1, #12
 800585c:	187b      	adds	r3, r7, r1
 800585e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005864:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005866:	187b      	adds	r3, r7, r1
 8005868:	220e      	movs	r2, #14
 800586a:	18ba      	adds	r2, r7, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	8812      	ldrh	r2, [r2, #0]
 8005870:	4013      	ands	r3, r2
 8005872:	b29a      	uxth	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	225a      	movs	r2, #90	; 0x5a
 8005886:	5a9b      	ldrh	r3, [r3, r2]
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b299      	uxth	r1, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	225a      	movs	r2, #90	; 0x5a
 8005892:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	225a      	movs	r2, #90	; 0x5a
 8005898:	5a9b      	ldrh	r3, [r3, r2]
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d122      	bne.n	80058e6 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4911      	ldr	r1, [pc, #68]	; (80058f0 <UART_RxISR_16BIT+0xb8>)
 80058ac:	400a      	ands	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2101      	movs	r1, #1
 80058bc:	438a      	bics	r2, r1
 80058be:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	0018      	movs	r0, r3
 80058d0:	f7ff fa96 	bl	8004e00 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058d4:	e007      	b.n	80058e6 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699a      	ldr	r2, [r3, #24]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2108      	movs	r1, #8
 80058e2:	430a      	orrs	r2, r1
 80058e4:	619a      	str	r2, [r3, #24]
}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	46bd      	mov	sp, r7
 80058ea:	b004      	add	sp, #16
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	fffffedf 	.word	0xfffffedf

080058f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058fc:	46c0      	nop			; (mov r8, r8)
 80058fe:	46bd      	mov	sp, r7
 8005900:	b002      	add	sp, #8
 8005902:	bd80      	pop	{r7, pc}

08005904 <LL_PWR_SetPowerMode>:
  *         it consumes more power without providing any additional feature. 
  *         In MODE_STANDBY the regulator is automatically off.
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t PDMode)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_PDDS, PDMode);
 800590c:	4b06      	ldr	r3, [pc, #24]	; (8005928 <LL_PWR_SetPowerMode+0x24>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2202      	movs	r2, #2
 8005912:	4393      	bics	r3, r2
 8005914:	0019      	movs	r1, r3
 8005916:	4b04      	ldr	r3, [pc, #16]	; (8005928 <LL_PWR_SetPowerMode+0x24>)
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	430a      	orrs	r2, r1
 800591c:	601a      	str	r2, [r3, #0]
}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	46bd      	mov	sp, r7
 8005922:	b002      	add	sp, #8
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	40007000 	.word	0x40007000

0800592c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <LL_LPM_EnableSleep+0x18>)
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	4b03      	ldr	r3, [pc, #12]	; (8005944 <LL_LPM_EnableSleep+0x18>)
 8005936:	2104      	movs	r1, #4
 8005938:	438a      	bics	r2, r1
 800593a:	611a      	str	r2, [r3, #16]
}
 800593c:	46c0      	nop			; (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	e000ed00 	.word	0xe000ed00

08005948 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <LL_LPM_EnableDeepSleep+0x18>)
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	4b03      	ldr	r3, [pc, #12]	; (8005960 <LL_LPM_EnableDeepSleep+0x18>)
 8005952:	2104      	movs	r1, #4
 8005954:	430a      	orrs	r2, r1
 8005956:	611a      	str	r2, [r3, #16]
}
 8005958:	46c0      	nop			; (mov r8, r8)
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <LL_LPM_DisableSleepOnExit>:
  * @brief  Do not sleep when returning to Thread mode.
  * @rmtoll SCB_SCR      SLEEPONEXIT   LL_LPM_DisableSleepOnExit
  * @retval None
  */
__STATIC_INLINE void LL_LPM_DisableSleepOnExit(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <LL_LPM_DisableSleepOnExit+0x18>)
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	4b03      	ldr	r3, [pc, #12]	; (800597c <LL_LPM_DisableSleepOnExit+0x18>)
 800596e:	2102      	movs	r1, #2
 8005970:	438a      	bics	r2, r1
 8005972:	611a      	str	r2, [r3, #16]
}
 8005974:	46c0      	nop			; (mov r8, r8)
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	e000ed00 	.word	0xe000ed00

08005980 <LL_LPM_EnableEventOnPend>:
  *         processor.
  * @rmtoll SCB_SCR      SEVEONPEND    LL_LPM_EnableEventOnPend
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableEventOnPend(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* Set SEVEONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8005984:	4b04      	ldr	r3, [pc, #16]	; (8005998 <LL_LPM_EnableEventOnPend+0x18>)
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	4b03      	ldr	r3, [pc, #12]	; (8005998 <LL_LPM_EnableEventOnPend+0x18>)
 800598a:	2110      	movs	r1, #16
 800598c:	430a      	orrs	r2, r1
 800598e:	611a      	str	r2, [r3, #16]
}
 8005990:	46c0      	nop			; (mov r8, r8)
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <LL_RCC_SetClkAfterWakeFromStop+0x24>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4a06      	ldr	r2, [pc, #24]	; (80059c4 <LL_RCC_SetClkAfterWakeFromStop+0x28>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	0019      	movs	r1, r3
 80059ae:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <LL_RCC_SetClkAfterWakeFromStop+0x24>)
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	60da      	str	r2, [r3, #12]
}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b002      	add	sp, #8
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	40021000 	.word	0x40021000
 80059c4:	ffff7fff 	.word	0xffff7fff

080059c8 <eventWait>:

// Forwards
void eventSleep(uint32_t wakeEvents);

// Wait for any of these events to happen, with a high-granularity timeout (granularity defined by LPTIM1)
bool eventWait(uint32_t events, uint32_t timeoutMs) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]

    if (timeoutMs != 0) {
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00d      	beq.n	80059f4 <eventWait+0x2c>
#ifdef EVENT_TIMER
        eventClear(EVENT_TIMER);
 80059d8:	2001      	movs	r0, #1
 80059da:	f000 f855 	bl	8005a88 <eventClear>
        events |= EVENT_TIMER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	4313      	orrs	r3, r2
 80059e4:	607b      	str	r3, [r7, #4]
        eventTimerExpiresMs = MY_TimerMs() + timeoutMs;
 80059e6:	f000 fb61 	bl	80060ac <MY_TimerMs>
 80059ea:	0002      	movs	r2, r0
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	18d2      	adds	r2, r2, r3
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <eventWait+0x58>)
 80059f2:	601a      	str	r2, [r3, #0]
        eventTimerExpiresMs = HAL_Ticks() + timeoutMs;
#endif
    }

    // Sleep until any of these events happens
    eventSleep(events);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	0018      	movs	r0, r3
 80059f8:	f000 f858 	bl	8005aac <eventSleep>

    // Mask off anything except non-timer events that we're looking for
    events &= eventOccurred();
 80059fc:	f000 f83a 	bl	8005a74 <eventOccurred>
 8005a00:	0002      	movs	r2, r0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4013      	ands	r3, r2
 8005a06:	607b      	str	r3, [r7, #4]
#ifdef EVENT_TIMER
    events &= ~EVENT_TIMER;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	4393      	bics	r3, r2
 8005a0e:	607b      	str	r3, [r7, #4]
#endif

    // Return TRUE if an event other than timeout occurred
    return (events != 0);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	1e5a      	subs	r2, r3, #1
 8005a14:	4193      	sbcs	r3, r2
 8005a16:	b2db      	uxtb	r3, r3

}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b002      	add	sp, #8
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	2000024c 	.word	0x2000024c

08005a24 <eventPollTimer>:

// Poll to see if any timer events transpired
#ifdef EVENT_TIMER
void eventPollTimer() {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
    if (eventTimerExpiresMs != 0 && MY_TimerMs() >= eventTimerExpiresMs) {
 8005a28:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <eventPollTimer+0x2c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00c      	beq.n	8005a4a <eventPollTimer+0x26>
 8005a30:	f000 fb3c 	bl	80060ac <MY_TimerMs>
 8005a34:	0002      	movs	r2, r0
 8005a36:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <eventPollTimer+0x2c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d305      	bcc.n	8005a4a <eventPollTimer+0x26>
        eventTimerExpiresMs = 0;
 8005a3e:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <eventPollTimer+0x2c>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
        event(EVENT_TIMER);
 8005a44:	2001      	movs	r0, #1
 8005a46:	f000 f805 	bl	8005a54 <event>
    }
}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	2000024c 	.word	0x2000024c

08005a54 <event>:
#endif

// Mark that an event has transpired.  Note that this is safe to call from an ISR
void event(uint32_t event) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
    eventsThatHappened |= event;
 8005a5c:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <event+0x1c>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	4b02      	ldr	r3, [pc, #8]	; (8005a70 <event+0x1c>)
 8005a66:	601a      	str	r2, [r3, #0]
}
 8005a68:	46c0      	nop			; (mov r8, r8)
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	b002      	add	sp, #8
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000248 	.word	0x20000248

08005a74 <eventOccurred>:

// Get the mask of events that have occurred
uint32_t eventOccurred() {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
    return eventsThatHappened;
 8005a78:	4b02      	ldr	r3, [pc, #8]	; (8005a84 <eventOccurred+0x10>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
}
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	20000248 	.word	0x20000248

08005a88 <eventClear>:

// Mark that we're no longer interested in an event
void eventClear(uint32_t event) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
    eventsThatHappened &= ~event;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	43da      	mvns	r2, r3
 8005a94:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <eventClear+0x20>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	401a      	ands	r2, r3
 8005a9a:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <eventClear+0x20>)
 8005a9c:	601a      	str	r2, [r3, #0]
}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b002      	add	sp, #8
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	20000248 	.word	0x20000248

08005aac <eventSleep>:

// Go into a sleep state if it's appropriate to do so, else simply return
void eventSleep(uint32_t wakeEvents) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]

    // Exit immediately if the event already occurred
    if ((eventsThatHappened & wakeEvents) != 0)
 8005ab4:	4b25      	ldr	r3, [pc, #148]	; (8005b4c <eventSleep+0xa0>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4013      	ands	r3, r2
 8005abc:	d141      	bne.n	8005b42 <eventSleep+0x96>
    }

#else

    // If any of several conditions hold true, we will wait for events in a loop
    bool highPowerEventWait = false;
 8005abe:	230f      	movs	r3, #15
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	701a      	strb	r2, [r3, #0]

    // If we're debugging, don't sleep
    if (MY_Debug())
 8005ac6:	f000 fbb9 	bl	800623c <MY_Debug>
 8005aca:	1e03      	subs	r3, r0, #0
 8005acc:	d033      	beq.n	8005b36 <eventSleep+0x8a>
        highPowerEventWait = true;
 8005ace:	230f      	movs	r3, #15
 8005ad0:	18fb      	adds	r3, r7, r3
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]

    // Loop in here until an event happens
    while ((eventsThatHappened & wakeEvents) == 0) {
 8005ad6:	e02e      	b.n	8005b36 <eventSleep+0x8a>

        // If we're doing an event wait in a high-power manner, spin
        if (highPowerEventWait) {
 8005ad8:	230f      	movs	r3, #15
 8005ada:	18fb      	adds	r3, r7, r3
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <eventSleep+0x3e>

            HAL_Delay(1);
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	f7fc fbe2 	bl	80022ac <HAL_Delay>
 8005ae8:	e025      	b.n	8005b36 <eventSleep+0x8a>

        } else {

            // Deinitialize all perpherals
            MY_Sleep_DeInit();
 8005aea:	f000 fbad 	bl	8006248 <MY_Sleep_DeInit>

            // Specify what clock we want after stop mode.
            LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	0018      	movs	r0, r3
 8005af4:	f7ff ff52 	bl	800599c <LL_RCC_SetClkAfterWakeFromStop>

            // Set Stop mode
            LL_PWR_SetPowerMode(LL_PWR_MODE_STOP);
 8005af8:	2000      	movs	r0, #0
 8005afa:	f7ff ff03 	bl	8005904 <LL_PWR_SetPowerMode>

            // Enabled events and all interrupts, including disabled interrupts,
            // can wake up the processor
            LL_LPM_EnableEventOnPend();
 8005afe:	f7ff ff3f 	bl	8005980 <LL_LPM_EnableEventOnPend>

            // Make sure that we don't sleep on return from an interrupt
            LL_LPM_DisableSleepOnExit();
 8005b02:	f7ff ff2f 	bl	8005964 <LL_LPM_DisableSleepOnExit>

            // Set SLEEPDEEP bit of Cortex System Control Register
            LL_LPM_EnableDeepSleep();
 8005b06:	f7ff ff1f 	bl	8005948 <LL_LPM_EnableDeepSleep>

            // Give visibility to scheduler because otherwise it's difficult to debug
#if EVENT_SLEEP_LED
            HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_RESET);
 8005b0a:	23a0      	movs	r3, #160	; 0xa0
 8005b0c:	05db      	lsls	r3, r3, #23
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2120      	movs	r1, #32
 8005b12:	0018      	movs	r0, r3
 8005b14:	f7fc ff82 	bl	8002a1c <HAL_GPIO_WritePin>
#endif

            // Wait for interrupt
            HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8005b18:	2101      	movs	r1, #1
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	f7fd ff1c 	bl	8003958 <HAL_PWR_EnterSTOPMode>

            // Give visibility to scheduler because otherwise it's difficult to debug
#if EVENT_SLEEP_LED
            HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_SET);
 8005b20:	23a0      	movs	r3, #160	; 0xa0
 8005b22:	05db      	lsls	r3, r3, #23
 8005b24:	2201      	movs	r2, #1
 8005b26:	2120      	movs	r1, #32
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7fc ff77 	bl	8002a1c <HAL_GPIO_WritePin>
#endif

            // Reset SLEEPDEEP bit of Cortex System Control Register
            // so that we only sleep, not deep sleep, on another wfi
            LL_LPM_EnableSleep();
 8005b2e:	f7ff fefd 	bl	800592c <LL_LPM_EnableSleep>

            // Reset clocks (BEFORE GetHCLKFreq() is called)
            SystemCoreClockUpdate();
 8005b32:	f000 fdb7 	bl	80066a4 <SystemCoreClockUpdate>
    while ((eventsThatHappened & wakeEvents) == 0) {
 8005b36:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <eventSleep+0xa0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d0cb      	beq.n	8005ad8 <eventSleep+0x2c>
 8005b40:	e000      	b.n	8005b44 <eventSleep+0x98>
        return;
 8005b42:	46c0      	nop			; (mov r8, r8)

#endif  // EVENT_TIMER

    }   // loop until an event happens

}
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b004      	add	sp, #16
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	20000248 	.word	0x20000248

08005b50 <setup>:
#else
#define EVENTS_TO_WAIT_FOR  0
#endif

// One-time initialization
void setup() {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0

	// "NoteNewRequest()" uses the bundled "J" json package to allocate a "req", which is a JSON object
	// for the request to which we will then add Request arguments.  The function allocates a "req"
	// request structure using malloc() and initializes its "req" field with the type of request.
	J *req = NoteNewRequest("hub.set");
 8005b56:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <setup+0x3c>)
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f003 faf9 	bl	8009150 <NoteNewRequest>
 8005b5e:	0003      	movs	r3, r0
 8005b60:	607b      	str	r3, [r7, #4]

	// This command (required) causes the data to be delivered to the Project on notehub.io that has claimed
	// this Product ID.  (see above)
	JAddStringToObject(req, "product", myProductID);
 8005b62:	4a0b      	ldr	r2, [pc, #44]	; (8005b90 <setup+0x40>)
 8005b64:	490b      	ldr	r1, [pc, #44]	; (8005b94 <setup+0x44>)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f002 feb0 	bl	80088ce <JAddStringToObject>
	// This command determines how often the Notecard connects to the service.  If "continuous" the Notecard
    // immediately establishes a session with the service at notehub.io, and keeps it active continuously.
    // Because of the power requirements of a continuous connection, a battery powered device would instead
    // only sample its sensors occasionally, and would only upload to the service on a periodic basis.
#if myLiveDemo
	JAddStringToObject(req, "mode", "continuous");
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <setup+0x48>)
 8005b70:	490a      	ldr	r1, [pc, #40]	; (8005b9c <setup+0x4c>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	0018      	movs	r0, r3
 8005b76:	f002 feaa 	bl	80088ce <JAddStringToObject>
	//		 "product" : myProductID,
	//		 "mode"	   : "continuous"
	//	   }
	// Note that NoteRequest() always uses free() to release the request data structure, and it
	// returns "true" if success and "false" if there is any failure.
	NoteRequest(req);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f003 faff 	bl	8009180 <NoteRequest>

}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	46bd      	mov	sp, r7
 8005b86:	b002      	add	sp, #8
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	08009990 	.word	0x08009990
 8005b90:	0800999c 	.word	0x0800999c
 8005b94:	080099c4 	.word	0x080099c4
 8005b98:	080099cc 	.word	0x080099cc
 8005b9c:	080099d8 	.word	0x080099d8

08005ba0 <loop>:

// This  main loop which is called repeatedly, add outbound data every 15 seconds
void loop() {
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b089      	sub	sp, #36	; 0x24
 8005ba4:	af00      	add	r7, sp, #0

	// Simulate an event counter of some kind
	static unsigned eventCounter = 0;
	eventCounter = eventCounter + 1;
 8005ba6:	4b4f      	ldr	r3, [pc, #316]	; (8005ce4 <loop+0x144>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	4b4d      	ldr	r3, [pc, #308]	; (8005ce4 <loop+0x144>)
 8005bae:	601a      	str	r2, [r3, #0]
	// that we would like to examine the response of the transaction.  This method takes a "request" JSON
	// data structure as input, then processes it and returns a "response" JSON data structure with
	// the response.  Note that because the Notecard library uses malloc(), developers must always
	// check for NULL to ensure that there was enough memory available on the microcontroller to
	// satisfy the allocation request.
	double temperature = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	2400      	movs	r4, #0
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	61fc      	str	r4, [r7, #28]
    J *rsp = NoteRequestResponse(NoteNewRequest("card.temp"));
 8005bb8:	4b4b      	ldr	r3, [pc, #300]	; (8005ce8 <loop+0x148>)
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f003 fac8 	bl	8009150 <NoteNewRequest>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f003 fb0e 	bl	80091e4 <NoteRequestResponse>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	60fb      	str	r3, [r7, #12]
    if (rsp != NULL) {
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <loop+0x4e>
        temperature = JGetNumber(rsp, "value");
 8005bd2:	4a46      	ldr	r2, [pc, #280]	; (8005cec <loop+0x14c>)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	0011      	movs	r1, r2
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f002 ff51 	bl	8008a80 <JGetNumber>
 8005bde:	0003      	movs	r3, r0
 8005be0:	000c      	movs	r4, r1
 8005be2:	61bb      	str	r3, [r7, #24]
 8005be4:	61fc      	str	r4, [r7, #28]
        NoteDeleteResponse(rsp);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	0018      	movs	r0, r3
 8005bea:	f001 f863 	bl	8006cb4 <JDelete>
    }

	// Do the same to retrieve the voltage that is detected by the Notecard on its V+ pin.
	double voltage = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2400      	movs	r4, #0
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	617c      	str	r4, [r7, #20]
    rsp = NoteRequestResponse(NoteNewRequest("card.voltage"));
 8005bf6:	4b3e      	ldr	r3, [pc, #248]	; (8005cf0 <loop+0x150>)
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f003 faa9 	bl	8009150 <NoteNewRequest>
 8005bfe:	0003      	movs	r3, r0
 8005c00:	0018      	movs	r0, r3
 8005c02:	f003 faef 	bl	80091e4 <NoteRequestResponse>
 8005c06:	0003      	movs	r3, r0
 8005c08:	60fb      	str	r3, [r7, #12]
    if (rsp != NULL) {
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00d      	beq.n	8005c2c <loop+0x8c>
        voltage = JGetNumber(rsp, "value");
 8005c10:	4a36      	ldr	r2, [pc, #216]	; (8005cec <loop+0x14c>)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	0011      	movs	r1, r2
 8005c16:	0018      	movs	r0, r3
 8005c18:	f002 ff32 	bl	8008a80 <JGetNumber>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	000c      	movs	r4, r1
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	617c      	str	r4, [r7, #20]
        NoteDeleteResponse(rsp);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	0018      	movs	r0, r3
 8005c28:	f001 f844 	bl	8006cb4 <JDelete>
    }

	// Enqueue the measurement to the Notecard for transmission to the Notehub, adding the "start"
	// flag for demonstration purposes to upload the data instantaneously, so that if you are looking
	// at this on notehub.io you will see the data appearing 'live'.)
    J *req = NoteNewRequest("note.add");
 8005c2c:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <loop+0x154>)
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f003 fa8e 	bl	8009150 <NoteNewRequest>
 8005c34:	0003      	movs	r3, r0
 8005c36:	60bb      	str	r3, [r7, #8]
	if (req != NULL) {
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d048      	beq.n	8005cd0 <loop+0x130>
	    JAddStringToObject(req, "file", "sensors.qo");
 8005c3e:	4a2e      	ldr	r2, [pc, #184]	; (8005cf8 <loop+0x158>)
 8005c40:	492e      	ldr	r1, [pc, #184]	; (8005cfc <loop+0x15c>)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f002 fe42 	bl	80088ce <JAddStringToObject>
#if myLiveDemo
	    JAddBoolToObject(req, "start", true);
 8005c4a:	492d      	ldr	r1, [pc, #180]	; (8005d00 <loop+0x160>)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	0018      	movs	r0, r3
 8005c52:	f002 fdfb 	bl	800884c <JAddBoolToObject>
#endif
		J *body = JCreateObject();
 8005c56:	f002 fed7 	bl	8008a08 <JCreateObject>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	607b      	str	r3, [r7, #4]
		if (body != NULL) {
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d031      	beq.n	8005cc8 <loop+0x128>
			JAddNumberToObject(body, "temp", temperature);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	69fc      	ldr	r4, [r7, #28]
 8005c68:	4926      	ldr	r1, [pc, #152]	; (8005d04 <loop+0x164>)
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	001a      	movs	r2, r3
 8005c6e:	0023      	movs	r3, r4
 8005c70:	f002 fe0b 	bl	800888a <JAddNumberToObject>
			JAddNumberToObject(body, "voltage", voltage);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	697c      	ldr	r4, [r7, #20]
 8005c78:	4923      	ldr	r1, [pc, #140]	; (8005d08 <loop+0x168>)
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	001a      	movs	r2, r3
 8005c7e:	0023      	movs	r3, r4
 8005c80:	f002 fe03 	bl	800888a <JAddNumberToObject>
			JAddNumberToObject(body, "count", eventCounter);
 8005c84:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <loop+0x144>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f7fc fa53 	bl	8002134 <__aeabi_ui2d>
 8005c8e:	0003      	movs	r3, r0
 8005c90:	000c      	movs	r4, r1
 8005c92:	491e      	ldr	r1, [pc, #120]	; (8005d0c <loop+0x16c>)
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	001a      	movs	r2, r3
 8005c98:	0023      	movs	r3, r4
 8005c9a:	f002 fdf6 	bl	800888a <JAddNumberToObject>
#ifdef EVENT_BUTTON
            if ((eventOccurred() & EVENT_BUTTON) != 0) {
 8005c9e:	f7ff fee9 	bl	8005a74 <eventOccurred>
 8005ca2:	0002      	movs	r2, r0
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	d008      	beq.n	8005cbc <loop+0x11c>
                JAddBoolToObject(body, "button", true);
 8005caa:	4919      	ldr	r1, [pc, #100]	; (8005d10 <loop+0x170>)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f002 fdcb 	bl	800884c <JAddBoolToObject>
                eventClear(EVENT_BUTTON);
 8005cb6:	2002      	movs	r0, #2
 8005cb8:	f7ff fee6 	bl	8005a88 <eventClear>
            }
#endif
		    JAddItemToObject(req, "body", body);
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	4915      	ldr	r1, [pc, #84]	; (8005d14 <loop+0x174>)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f002 fdb2 	bl	800882c <JAddItemToObject>
		}
	    NoteRequest(req);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f003 fa58 	bl	8009180 <NoteRequest>
	}

	// Delay between measurements
#if EVENTS
    eventWait(EVENTS_TO_WAIT_FOR, DELAY_PERIOD);
 8005cd0:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <loop+0x178>)
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	2002      	movs	r0, #2
 8005cd6:	f7ff fe77 	bl	80059c8 <eventWait>
#else
	delay(DELAY_PERIOD);
#endif

}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b009      	add	sp, #36	; 0x24
 8005ce0:	bd90      	pop	{r4, r7, pc}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	20000250 	.word	0x20000250
 8005ce8:	080099e0 	.word	0x080099e0
 8005cec:	080099ec 	.word	0x080099ec
 8005cf0:	080099f4 	.word	0x080099f4
 8005cf4:	08009a04 	.word	0x08009a04
 8005cf8:	08009a10 	.word	0x08009a10
 8005cfc:	08009a1c 	.word	0x08009a1c
 8005d00:	08009a24 	.word	0x08009a24
 8005d04:	08009a2c 	.word	0x08009a2c
 8005d08:	08009a34 	.word	0x08009a34
 8005d0c:	08009a3c 	.word	0x08009a3c
 8005d10:	08009a44 	.word	0x08009a44
 8005d14:	08009a4c 	.word	0x08009a4c
 8005d18:	00003a98 	.word	0x00003a98

08005d1c <main>:
void noteI2CReset(void);
const char *noteI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size);
const char *noteI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *avail);

// Main entry point
int main(void) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0

    // Initialize peripherals
    HAL_Init();
 8005d20:	f7fc fa64 	bl	80021ec <HAL_Init>
    SystemClock_Config();
 8005d24:	f000 f826 	bl	8005d74 <SystemClock_Config>
    MX_GPIO_Init();
 8005d28:	f000 f9ca 	bl	80060c0 <MX_GPIO_Init>
#ifdef EVENT_TIMER
    MX_LPTIM1_Init();
 8005d2c:	f000 f976 	bl	800601c <MX_LPTIM1_Init>
#endif

    // Register callbacks with note-c subsystem that it needs for I/O, memory, timer
    NoteSetFn(malloc, free, delay, millis);
 8005d30:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <main+0x38>)
 8005d32:	4a09      	ldr	r2, [pc, #36]	; (8005d58 <main+0x3c>)
 8005d34:	4909      	ldr	r1, [pc, #36]	; (8005d5c <main+0x40>)
 8005d36:	480a      	ldr	r0, [pc, #40]	; (8005d60 <main+0x44>)
 8005d38:	f003 f882 	bl	8008e40 <NoteSetFn>

    // Register callbacks for Notecard I/O
#if NOTECARD_USE_I2C
    NoteSetFnI2C(NOTE_I2C_ADDR_DEFAULT, NOTE_I2C_MAX_DEFAULT, noteI2CReset, noteI2CTransmit, noteI2CReceive);
#else
    NoteSetFnSerial(noteSerialReset, noteSerialTransmit, noteSerialAvailable, noteSerialReceive);
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <main+0x48>)
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	; (8005d68 <main+0x4c>)
 8005d40:	490a      	ldr	r1, [pc, #40]	; (8005d6c <main+0x50>)
 8005d42:	480b      	ldr	r0, [pc, #44]	; (8005d70 <main+0x54>)
 8005d44:	f003 f89c 	bl	8008e80 <NoteSetFnSerial>
#endif

    // Use this method of invoking main app code so that we can re-use familiar Arduino examples
    setup();
 8005d48:	f7ff ff02 	bl	8005b50 <setup>
    while (true)
        loop();
 8005d4c:	f7ff ff28 	bl	8005ba0 <loop>
 8005d50:	e7fc      	b.n	8005d4c <main+0x30>
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	0800622d 	.word	0x0800622d
 8005d58:	08006215 	.word	0x08006215
 8005d5c:	08009749 	.word	0x08009749
 8005d60:	08009735 	.word	0x08009735
 8005d64:	080062c1 	.word	0x080062c1
 8005d68:	0800629d 	.word	0x0800629d
 8005d6c:	08006271 	.word	0x08006271
 8005d70:	0800625f 	.word	0x0800625f

08005d74 <SystemClock_Config>:

}

// System clock configuration
void SystemClock_Config(void) {
 8005d74:	b590      	push	{r4, r7, lr}
 8005d76:	b09d      	sub	sp, #116	; 0x74
 8005d78:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d7a:	2438      	movs	r4, #56	; 0x38
 8005d7c:	193b      	adds	r3, r7, r4
 8005d7e:	0018      	movs	r0, r3
 8005d80:	2338      	movs	r3, #56	; 0x38
 8005d82:	001a      	movs	r2, r3
 8005d84:	2100      	movs	r1, #0
 8005d86:	f003 fd04 	bl	8009792 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d8a:	2324      	movs	r3, #36	; 0x24
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	0018      	movs	r0, r3
 8005d90:	2314      	movs	r3, #20
 8005d92:	001a      	movs	r2, r3
 8005d94:	2100      	movs	r1, #0
 8005d96:	f003 fcfc 	bl	8009792 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d9a:	003b      	movs	r3, r7
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	2324      	movs	r3, #36	; 0x24
 8005da0:	001a      	movs	r2, r3
 8005da2:	2100      	movs	r1, #0
 8005da4:	f003 fcf5 	bl	8009792 <memset>

    // Configure the main internal regulator output voltage
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005da8:	4b2e      	ldr	r3, [pc, #184]	; (8005e64 <SystemClock_Config+0xf0>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2e      	ldr	r2, [pc, #184]	; (8005e68 <SystemClock_Config+0xf4>)
 8005dae:	401a      	ands	r2, r3
 8005db0:	4b2c      	ldr	r3, [pc, #176]	; (8005e64 <SystemClock_Config+0xf0>)
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	0109      	lsls	r1, r1, #4
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_LSI;
 8005dba:	0021      	movs	r1, r4
 8005dbc:	187b      	adds	r3, r7, r1
 8005dbe:	2218      	movs	r2, #24
 8005dc0:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005dc2:	187b      	adds	r3, r7, r1
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005dc8:	187b      	adds	r3, r7, r1
 8005dca:	2201      	movs	r2, #1
 8005dcc:	61da      	str	r2, [r3, #28]
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8005dce:	187b      	adds	r3, r7, r1
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8005dd4:	187b      	adds	r3, r7, r1
 8005dd6:	22a0      	movs	r2, #160	; 0xa0
 8005dd8:	0212      	lsls	r2, r2, #8
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005ddc:	187b      	adds	r3, r7, r1
 8005dde:	2200      	movs	r2, #0
 8005de0:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005de2:	187b      	adds	r3, r7, r1
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7fd fdeb 	bl	80039c0 <HAL_RCC_OscConfig>
 8005dea:	1e03      	subs	r3, r0, #0
 8005dec:	d001      	beq.n	8005df2 <SystemClock_Config+0x7e>
        Error_Handler();
 8005dee:	f000 fa0c 	bl	800620a <Error_Handler>

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005df2:	2124      	movs	r1, #36	; 0x24
 8005df4:	187b      	adds	r3, r7, r1
 8005df6:	220f      	movs	r2, #15
 8005df8:	601a      	str	r2, [r3, #0]
        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8005dfa:	187b      	adds	r3, r7, r1
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e00:	187b      	adds	r3, r7, r1
 8005e02:	2200      	movs	r2, #0
 8005e04:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005e06:	187b      	adds	r3, r7, r1
 8005e08:	2200      	movs	r2, #0
 8005e0a:	60da      	str	r2, [r3, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e0c:	187b      	adds	r3, r7, r1
 8005e0e:	2200      	movs	r2, #0
 8005e10:	611a      	str	r2, [r3, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005e12:	187b      	adds	r3, r7, r1
 8005e14:	2100      	movs	r1, #0
 8005e16:	0018      	movs	r0, r3
 8005e18:	f7fe f992 	bl	8004140 <HAL_RCC_ClockConfig>
 8005e1c:	1e03      	subs	r3, r0, #0
 8005e1e:	d001      	beq.n	8005e24 <SystemClock_Config+0xb0>
        Error_Handler();
 8005e20:	f000 f9f3 	bl	800620a <Error_Handler>

    // Initialize peripheral clocks
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8005e24:	003b      	movs	r3, r7
 8005e26:	2209      	movs	r2, #9
 8005e28:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005e2a:	003b      	movs	r3, r7
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	60da      	str	r2, [r3, #12]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005e30:	003b      	movs	r3, r7
 8005e32:	2200      	movs	r2, #0
 8005e34:	619a      	str	r2, [r3, #24]
#ifdef EVENT_TIMER
    PeriphClkInit.PeriphClockSelection |= RCC_PERIPHCLK_LPTIM1;
 8005e36:	003b      	movs	r3, r7
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2280      	movs	r2, #128	; 0x80
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	003b      	movs	r3, r7
 8005e40:	601a      	str	r2, [r3, #0]
    PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8005e42:	003b      	movs	r3, r7
 8005e44:	2280      	movs	r2, #128	; 0x80
 8005e46:	02d2      	lsls	r2, r2, #11
 8005e48:	61da      	str	r2, [r3, #28]
#endif
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e4a:	003b      	movs	r3, r7
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f7fe fb5b 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 8005e52:	1e03      	subs	r3, r0, #0
 8005e54:	d001      	beq.n	8005e5a <SystemClock_Config+0xe6>
        Error_Handler();
 8005e56:	f000 f9d8 	bl	800620a <Error_Handler>

}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b01d      	add	sp, #116	; 0x74
 8005e60:	bd90      	pop	{r4, r7, pc}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	40007000 	.word	0x40007000
 8005e68:	ffffe7ff 	.word	0xffffe7ff

08005e6c <MX_I2C1_DeInit>:
        Error_Handler();

}

// I2C1 De-initialization
void MX_I2C1_DeInit(void) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0

    // Exit if already done
    if (!i2c1Initialized)
 8005e70:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <MX_I2C1_DeInit+0x38>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2201      	movs	r2, #1
 8005e76:	4053      	eors	r3, r2
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10e      	bne.n	8005e9c <MX_I2C1_DeInit+0x30>
        return;
    i2c1Initialized = false;
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <MX_I2C1_DeInit+0x38>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	701a      	strb	r2, [r3, #0]

    // Deconfigure Analogue filter
    HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE);
 8005e84:	2380      	movs	r3, #128	; 0x80
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <MX_I2C1_DeInit+0x3c>)
 8005e8a:	0011      	movs	r1, r2
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f7fd fb7f 	bl	8003590 <HAL_I2CEx_ConfigAnalogFilter>

    // Deinitialize
    HAL_I2C_DeInit(&hi2c1);
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <MX_I2C1_DeInit+0x3c>)
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7fc fdde 	bl	8002a56 <HAL_I2C_DeInit>
 8005e9a:	e000      	b.n	8005e9e <MX_I2C1_DeInit+0x32>
        return;
 8005e9c:	46c0      	nop			; (mov r8, r8)

}
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	20000254 	.word	0x20000254
 8005ea8:	200004bc 	.word	0x200004bc

08005eac <MX_USART1_UART_Init>:

// USART1 Initialization
void MX_USART1_UART_Init(void) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0

    // Exit if already done
    if (uart1Initialized)
 8005eb0:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <MX_USART1_UART_Init+0x84>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d138      	bne.n	8005f2a <MX_USART1_UART_Init+0x7e>
        return;
    uart1Initialized = true;
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <MX_USART1_UART_Init+0x84>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	701a      	strb	r2, [r3, #0]

    // Primary initialization
    huart1.Instance = USART1;
 8005ebe:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	; (8005f38 <MX_USART1_UART_Init+0x8c>)
 8005ec2:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 8005ec4:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005ec6:	2296      	movs	r2, #150	; 0x96
 8005ec8:	0192      	lsls	r2, r2, #6
 8005eca:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8005ed2:	4b18      	ldr	r3, [pc, #96]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8005ed8:	4b16      	ldr	r3, [pc, #88]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8005ede:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005ee0:	220c      	movs	r2, #12
 8005ee2:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ee4:	4b13      	ldr	r3, [pc, #76]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005eea:	4b12      	ldr	r3, [pc, #72]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ef0:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8005efc:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005efe:	0018      	movs	r0, r3
 8005f00:	f7fe fc66 	bl	80047d0 <HAL_UART_Init>
 8005f04:	1e03      	subs	r3, r0, #0
 8005f06:	d001      	beq.n	8005f0c <MX_USART1_UART_Init+0x60>
        Error_Handler();
 8005f08:	f000 f97f 	bl	800620a <Error_Handler>

    // Reset our buffer management
    serialFillIndex = serialDrainIndex = serialOverruns = 0;
 8005f0c:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <MX_USART1_UART_Init+0x90>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	2200      	movs	r2, #0
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <MX_USART1_UART_Init+0x94>)
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <MX_USART1_UART_Init+0x98>)
 8005f1a:	601a      	str	r2, [r3, #0]

    // Unused, but included for documentation
    ((void)(serialOverruns));

    // Start the inbound receive
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 8005f1c:	490a      	ldr	r1, [pc, #40]	; (8005f48 <MX_USART1_UART_Init+0x9c>)
 8005f1e:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <MX_USART1_UART_Init+0x88>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	0018      	movs	r0, r3
 8005f24:	f7fe fd86 	bl	8004a34 <HAL_UART_Receive_IT>
 8005f28:	e000      	b.n	8005f2c <MX_USART1_UART_Init+0x80>
        return;
 8005f2a:	46c0      	nop			; (mov r8, r8)

}
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20000255 	.word	0x20000255
 8005f34:	20000508 	.word	0x20000508
 8005f38:	40013800 	.word	0x40013800
 8005f3c:	20000268 	.word	0x20000268
 8005f40:	20000264 	.word	0x20000264
 8005f44:	20000260 	.word	0x20000260
 8005f48:	2000025c 	.word	0x2000025c

08005f4c <MY_UART_IRQHandler>:

// USART1 IRQ handler
void MY_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]

    // See if the transfer is completed
    if (huart->RxXferCount == 0) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	225a      	movs	r2, #90	; 0x5a
 8005f58:	5a9b      	ldrh	r3, [r3, r2]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d12c      	bne.n	8005fba <MY_UART_IRQHandler+0x6e>
        if (serialFillIndex < sizeof(serialBuffer)) {
 8005f60:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <MY_UART_IRQHandler+0x84>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1b      	ldr	r2, [pc, #108]	; (8005fd4 <MY_UART_IRQHandler+0x88>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d816      	bhi.n	8005f98 <MY_UART_IRQHandler+0x4c>
            if (serialFillIndex+1 == serialDrainIndex)
 8005f6a:	4b19      	ldr	r3, [pc, #100]	; (8005fd0 <MY_UART_IRQHandler+0x84>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	4b19      	ldr	r3, [pc, #100]	; (8005fd8 <MY_UART_IRQHandler+0x8c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d105      	bne.n	8005f84 <MY_UART_IRQHandler+0x38>
                serialOverruns++;
 8005f78:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <MY_UART_IRQHandler+0x90>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <MY_UART_IRQHandler+0x90>)
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	e01a      	b.n	8005fba <MY_UART_IRQHandler+0x6e>
            else
                serialBuffer[serialFillIndex++] = serialInterruptBuffer[0];
 8005f84:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <MY_UART_IRQHandler+0x84>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	1c59      	adds	r1, r3, #1
 8005f8a:	4a11      	ldr	r2, [pc, #68]	; (8005fd0 <MY_UART_IRQHandler+0x84>)
 8005f8c:	6011      	str	r1, [r2, #0]
 8005f8e:	4a14      	ldr	r2, [pc, #80]	; (8005fe0 <MY_UART_IRQHandler+0x94>)
 8005f90:	7811      	ldrb	r1, [r2, #0]
 8005f92:	4a14      	ldr	r2, [pc, #80]	; (8005fe4 <MY_UART_IRQHandler+0x98>)
 8005f94:	54d1      	strb	r1, [r2, r3]
 8005f96:	e010      	b.n	8005fba <MY_UART_IRQHandler+0x6e>
        } else {
            if (serialDrainIndex == 1)
 8005f98:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <MY_UART_IRQHandler+0x8c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d105      	bne.n	8005fac <MY_UART_IRQHandler+0x60>
                serialOverruns++;
 8005fa0:	4b0e      	ldr	r3, [pc, #56]	; (8005fdc <MY_UART_IRQHandler+0x90>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <MY_UART_IRQHandler+0x90>)
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	e006      	b.n	8005fba <MY_UART_IRQHandler+0x6e>
            else {
                serialBuffer[0] = serialInterruptBuffer[0];
 8005fac:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <MY_UART_IRQHandler+0x94>)
 8005fae:	781a      	ldrb	r2, [r3, #0]
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <MY_UART_IRQHandler+0x98>)
 8005fb2:	701a      	strb	r2, [r3, #0]
                serialFillIndex = 1;
 8005fb4:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <MY_UART_IRQHandler+0x84>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Start another receive
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 8005fba:	4909      	ldr	r1, [pc, #36]	; (8005fe0 <MY_UART_IRQHandler+0x94>)
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <MY_UART_IRQHandler+0x9c>)
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f7fe fd37 	bl	8004a34 <HAL_UART_Receive_IT>

}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b002      	add	sp, #8
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	20000260 	.word	0x20000260
 8005fd4:	000001ff 	.word	0x000001ff
 8005fd8:	20000264 	.word	0x20000264
 8005fdc:	20000268 	.word	0x20000268
 8005fe0:	2000025c 	.word	0x2000025c
 8005fe4:	2000026c 	.word	0x2000026c
 8005fe8:	20000508 	.word	0x20000508

08005fec <MX_USART1_UART_DeInit>:

// USART1 De-initialization
void MX_USART1_UART_DeInit(void) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0

    // Exit if already done
    if (!uart1Initialized)
 8005ff0:	4b08      	ldr	r3, [pc, #32]	; (8006014 <MX_USART1_UART_DeInit+0x28>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	4053      	eors	r3, r2
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d107      	bne.n	800600e <MX_USART1_UART_DeInit+0x22>
        return;
    uart1Initialized = false;
 8005ffe:	4b05      	ldr	r3, [pc, #20]	; (8006014 <MX_USART1_UART_DeInit+0x28>)
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]

    // Deinitialize
    HAL_UART_DeInit(&huart1);
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <MX_USART1_UART_DeInit+0x2c>)
 8006006:	0018      	movs	r0, r3
 8006008:	f7fe fc36 	bl	8004878 <HAL_UART_DeInit>
 800600c:	e000      	b.n	8006010 <MX_USART1_UART_DeInit+0x24>
        return;
 800600e:	46c0      	nop			; (mov r8, r8)

}
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000255 	.word	0x20000255
 8006018:	20000508 	.word	0x20000508

0800601c <MX_LPTIM1_Init>:

// LPTIM1 Initialization
#ifdef EVENT_TIMER
void MX_LPTIM1_Init(void) {
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0

    hlptim1.Instance = LPTIM1;
 8006020:	4b14      	ldr	r3, [pc, #80]	; (8006074 <MX_LPTIM1_Init+0x58>)
 8006022:	4a15      	ldr	r2, [pc, #84]	; (8006078 <MX_LPTIM1_Init+0x5c>)
 8006024:	601a      	str	r2, [r3, #0]
    hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8006026:	4b13      	ldr	r3, [pc, #76]	; (8006074 <MX_LPTIM1_Init+0x58>)
 8006028:	2200      	movs	r2, #0
 800602a:	605a      	str	r2, [r3, #4]
    hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <MX_LPTIM1_Init+0x58>)
 800602e:	2200      	movs	r2, #0
 8006030:	609a      	str	r2, [r3, #8]
    hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <MX_LPTIM1_Init+0x58>)
 8006034:	4a11      	ldr	r2, [pc, #68]	; (800607c <MX_LPTIM1_Init+0x60>)
 8006036:	615a      	str	r2, [r3, #20]
    hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8006038:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <MX_LPTIM1_Init+0x58>)
 800603a:	2200      	movs	r2, #0
 800603c:	621a      	str	r2, [r3, #32]
    hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800603e:	4b0d      	ldr	r3, [pc, #52]	; (8006074 <MX_LPTIM1_Init+0x58>)
 8006040:	2200      	movs	r2, #0
 8006042:	625a      	str	r2, [r3, #36]	; 0x24
    hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8006044:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <MX_LPTIM1_Init+0x58>)
 8006046:	2200      	movs	r2, #0
 8006048:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800604a:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <MX_LPTIM1_Init+0x58>)
 800604c:	0018      	movs	r0, r3
 800604e:	f7fd faeb 	bl	8003628 <HAL_LPTIM_Init>
 8006052:	1e03      	subs	r3, r0, #0
 8006054:	d001      	beq.n	800605a <MX_LPTIM1_Init+0x3e>
        Error_Handler();
 8006056:	f000 f8d8 	bl	800620a <Error_Handler>
    // Period is the maximum value of the auto-reload counter - can't go higher.
    // Timeout is the value to be placed into the compare register - this is max
#define Period      (uint32_t) 65535
#define Timeout     (uint32_t) 32767
#define LPTIM_MS    2000
    if (HAL_LPTIM_TimeOut_Start_IT(&hlptim1, Period, Timeout) != HAL_OK)
 800605a:	4a09      	ldr	r2, [pc, #36]	; (8006080 <MX_LPTIM1_Init+0x64>)
 800605c:	4907      	ldr	r1, [pc, #28]	; (800607c <MX_LPTIM1_Init+0x60>)
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <MX_LPTIM1_Init+0x58>)
 8006060:	0018      	movs	r0, r3
 8006062:	f7fd fb61 	bl	8003728 <HAL_LPTIM_TimeOut_Start_IT>
 8006066:	1e03      	subs	r3, r0, #0
 8006068:	d001      	beq.n	800606e <MX_LPTIM1_Init+0x52>
        Error_Handler();
 800606a:	f000 f8ce 	bl	800620a <Error_Handler>

}
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000588 	.word	0x20000588
 8006078:	40007c00 	.word	0x40007c00
 800607c:	0000ffff 	.word	0x0000ffff
 8006080:	00007fff 	.word	0x00007fff

08006084 <HAL_LPTIM_CompareMatchCallback>:
#endif

// Compare match callback in non blocking mode
// NOTE: THIS IS CALLED ONCE PER TICK (EVERY 2 SECONDS AS LPTIM1 IS PROGRAMMED)
#ifdef EVENT_TIMER
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]

    // Add to the total milliseconds since boot
    totalTimerMs += LPTIM_MS;
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <HAL_LPTIM_CompareMatchCallback+0x24>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	22fa      	movs	r2, #250	; 0xfa
 8006092:	00d2      	lsls	r2, r2, #3
 8006094:	189a      	adds	r2, r3, r2
 8006096:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <HAL_LPTIM_CompareMatchCallback+0x24>)
 8006098:	601a      	str	r2, [r3, #0]

    // Poll the event poller to see if any events transpired
    eventPollTimer();
 800609a:	f7ff fcc3 	bl	8005a24 <eventPollTimer>

}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	46bd      	mov	sp, r7
 80060a2:	b002      	add	sp, #8
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	20000258 	.word	0x20000258

080060ac <MY_TimerMs>:
#endif

// This returns milliseconds since boot (which may wrap)
#ifdef EVENT_TIMER
uint32_t MY_TimerMs() {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
    return totalTimerMs;
 80060b0:	4b02      	ldr	r3, [pc, #8]	; (80060bc <MY_TimerMs+0x10>)
 80060b2:	681b      	ldr	r3, [r3, #0]
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	20000258 	.word	0x20000258

080060c0 <MX_GPIO_Init>:
#endif

// GPIO initialization
void MX_GPIO_Init(void) {
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	b08d      	sub	sp, #52	; 0x34
 80060c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060c6:	241c      	movs	r4, #28
 80060c8:	193b      	adds	r3, r7, r4
 80060ca:	0018      	movs	r0, r3
 80060cc:	2314      	movs	r3, #20
 80060ce:	001a      	movs	r2, r3
 80060d0:	2100      	movs	r1, #0
 80060d2:	f003 fb5e 	bl	8009792 <memset>

    // GPIO Ports Clock Enable
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060d6:	4b40      	ldr	r3, [pc, #256]	; (80061d8 <MX_GPIO_Init+0x118>)
 80060d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060da:	4b3f      	ldr	r3, [pc, #252]	; (80061d8 <MX_GPIO_Init+0x118>)
 80060dc:	2104      	movs	r1, #4
 80060de:	430a      	orrs	r2, r1
 80060e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80060e2:	4b3d      	ldr	r3, [pc, #244]	; (80061d8 <MX_GPIO_Init+0x118>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	2204      	movs	r2, #4
 80060e8:	4013      	ands	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ee:	4b3a      	ldr	r3, [pc, #232]	; (80061d8 <MX_GPIO_Init+0x118>)
 80060f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f2:	4b39      	ldr	r3, [pc, #228]	; (80061d8 <MX_GPIO_Init+0x118>)
 80060f4:	2101      	movs	r1, #1
 80060f6:	430a      	orrs	r2, r1
 80060f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80060fa:	4b37      	ldr	r3, [pc, #220]	; (80061d8 <MX_GPIO_Init+0x118>)
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fe:	2201      	movs	r2, #1
 8006100:	4013      	ands	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006106:	4b34      	ldr	r3, [pc, #208]	; (80061d8 <MX_GPIO_Init+0x118>)
 8006108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610a:	4b33      	ldr	r3, [pc, #204]	; (80061d8 <MX_GPIO_Init+0x118>)
 800610c:	2102      	movs	r1, #2
 800610e:	430a      	orrs	r2, r1
 8006110:	62da      	str	r2, [r3, #44]	; 0x2c
 8006112:	4b31      	ldr	r3, [pc, #196]	; (80061d8 <MX_GPIO_Init+0x118>)
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	2202      	movs	r2, #2
 8006118:	4013      	ands	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800611e:	4b2e      	ldr	r3, [pc, #184]	; (80061d8 <MX_GPIO_Init+0x118>)
 8006120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006122:	4b2d      	ldr	r3, [pc, #180]	; (80061d8 <MX_GPIO_Init+0x118>)
 8006124:	2180      	movs	r1, #128	; 0x80
 8006126:	430a      	orrs	r2, r1
 8006128:	62da      	str	r2, [r3, #44]	; 0x2c
 800612a:	4b2b      	ldr	r3, [pc, #172]	; (80061d8 <MX_GPIO_Init+0x118>)
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	2280      	movs	r2, #128	; 0x80
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]

    // Configure LED GPIO pin : LD3_Pin
#if EVENT_SLEEP_LED
    GPIO_LED_ENABLE();
 8006136:	4b28      	ldr	r3, [pc, #160]	; (80061d8 <MX_GPIO_Init+0x118>)
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	4b27      	ldr	r3, [pc, #156]	; (80061d8 <MX_GPIO_Init+0x118>)
 800613c:	2101      	movs	r1, #1
 800613e:	430a      	orrs	r2, r1
 8006140:	62da      	str	r2, [r3, #44]	; 0x2c
 8006142:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <MX_GPIO_Init+0x118>)
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	2201      	movs	r2, #1
 8006148:	4013      	ands	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]
 800614c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_LED_PIN;
 800614e:	193b      	adds	r3, r7, r4
 8006150:	2220      	movs	r2, #32
 8006152:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006154:	193b      	adds	r3, r7, r4
 8006156:	2201      	movs	r2, #1
 8006158:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800615a:	193b      	adds	r3, r7, r4
 800615c:	2202      	movs	r2, #2
 800615e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006160:	193b      	adds	r3, r7, r4
 8006162:	2200      	movs	r2, #0
 8006164:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIO_LED_PORT, &GPIO_InitStruct);
 8006166:	193a      	adds	r2, r7, r4
 8006168:	23a0      	movs	r3, #160	; 0xa0
 800616a:	05db      	lsls	r3, r3, #23
 800616c:	0011      	movs	r1, r2
 800616e:	0018      	movs	r0, r3
 8006170:	f7fc fa04 	bl	800257c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_SET);
 8006174:	23a0      	movs	r3, #160	; 0xa0
 8006176:	05db      	lsls	r3, r3, #23
 8006178:	2201      	movs	r2, #1
 800617a:	2120      	movs	r1, #32
 800617c:	0018      	movs	r0, r3
 800617e:	f7fc fc4d 	bl	8002a1c <HAL_GPIO_WritePin>
#endif

    // Initialize the simulated button, if present
#ifdef EVENT_BUTTON
    GPIO_BUTTON_CLOCK_ENABLE();
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <MX_GPIO_Init+0x118>)
 8006184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <MX_GPIO_Init+0x118>)
 8006188:	2104      	movs	r1, #4
 800618a:	430a      	orrs	r2, r1
 800618c:	62da      	str	r2, [r3, #44]	; 0x2c
 800618e:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <MX_GPIO_Init+0x118>)
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	2204      	movs	r2, #4
 8006194:	4013      	ands	r3, r2
 8006196:	607b      	str	r3, [r7, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619a:	193b      	adds	r3, r7, r4
 800619c:	2200      	movs	r2, #0
 800619e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = GPIO_BUTTON_PIN;
 80061a0:	193b      	adds	r3, r7, r4
 80061a2:	2280      	movs	r2, #128	; 0x80
 80061a4:	0192      	lsls	r2, r2, #6
 80061a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80061a8:	193b      	adds	r3, r7, r4
 80061aa:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <MX_GPIO_Init+0x11c>)
 80061ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ae:	193b      	adds	r3, r7, r4
 80061b0:	2200      	movs	r2, #0
 80061b2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIO_BUTTON_PORT, &GPIO_InitStruct);
 80061b4:	193b      	adds	r3, r7, r4
 80061b6:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <MX_GPIO_Init+0x120>)
 80061b8:	0019      	movs	r1, r3
 80061ba:	0010      	movs	r0, r2
 80061bc:	f7fc f9de 	bl	800257c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(GPIO_BUTTON_IRQ, 0, 0);
 80061c0:	2200      	movs	r2, #0
 80061c2:	2100      	movs	r1, #0
 80061c4:	2007      	movs	r0, #7
 80061c6:	f7fc f94f 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPIO_BUTTON_IRQ);
 80061ca:	2007      	movs	r0, #7
 80061cc:	f7fc f961 	bl	8002492 <HAL_NVIC_EnableIRQ>
#endif

}
 80061d0:	46c0      	nop			; (mov r8, r8)
 80061d2:	46bd      	mov	sp, r7
 80061d4:	b00d      	add	sp, #52	; 0x34
 80061d6:	bd90      	pop	{r4, r7, pc}
 80061d8:	40021000 	.word	0x40021000
 80061dc:	10110000 	.word	0x10110000
 80061e0:	50000800 	.word	0x50000800

080061e4 <HAL_GPIO_EXTI_Callback>:

// Called when a GPIO interrupt occurs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	0002      	movs	r2, r0
 80061ec:	1dbb      	adds	r3, r7, #6
 80061ee:	801a      	strh	r2, [r3, #0]

    // Handle the button
#ifdef EVENT_BUTTON
    if ((GPIO_Pin & GPIO_BUTTON_PIN) != 0)
 80061f0:	1dbb      	adds	r3, r7, #6
 80061f2:	881a      	ldrh	r2, [r3, #0]
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	019b      	lsls	r3, r3, #6
 80061f8:	4013      	ands	r3, r2
 80061fa:	d002      	beq.n	8006202 <HAL_GPIO_EXTI_Callback+0x1e>
        event(EVENT_BUTTON);
 80061fc:	2002      	movs	r0, #2
 80061fe:	f7ff fc29 	bl	8005a54 <event>
#endif

}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	46bd      	mov	sp, r7
 8006206:	b002      	add	sp, #8
 8006208:	bd80      	pop	{r7, pc}

0800620a <Error_Handler>:

// Primary HAL error handler
void Error_Handler(void) {
 800620a:	b580      	push	{r7, lr}
 800620c:	af00      	add	r7, sp, #0
}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <delay>:
void assert_failed(char *file, uint32_t line) {
}
#endif

// Computationally-delay the specified number of milliseconds
void delay(uint32_t ms) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	0018      	movs	r0, r3
 8006220:	f7fc f844 	bl	80022ac <HAL_Delay>
}
 8006224:	46c0      	nop			; (mov r8, r8)
 8006226:	46bd      	mov	sp, r7
 8006228:	b002      	add	sp, #8
 800622a:	bd80      	pop	{r7, pc}

0800622c <millis>:

// Get the number of app milliseconds since boot (this will wrap)
long unsigned int millis() {
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
    return (long unsigned int) HAL_GetTick();
 8006230:	f7fc f832 	bl	8002298 <HAL_GetTick>
 8006234:	0003      	movs	r3, r0
}
 8006236:	0018      	movs	r0, r3
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <MY_Debug>:

// Determine whether or not a debugger is actively connected.  We use
// this to suppress STOP2 mode so that code can be maintained/debugged.
bool MY_Debug() {
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
    return DEBUGGING;
 8006240:	2300      	movs	r3, #0
}
 8006242:	0018      	movs	r0, r3
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <MY_Sleep_DeInit>:

// Deinitialize everything that might block a sleep from happening
void MY_Sleep_DeInit() {
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0

    // Deinitialize the peripherals
    MX_I2C1_DeInit();
 800624c:	f7ff fe0e 	bl	8005e6c <MX_I2C1_DeInit>
    MX_USART1_UART_DeInit();
 8006250:	f7ff fecc 	bl	8005fec <MX_USART1_UART_DeInit>

    // Notify the Note subsystem that these will need to be reinitialized
    // on the next call to any of the Note I/O functions
    NoteResetRequired();
 8006254:	f003 f870 	bl	8009338 <NoteResetRequired>

}
 8006258:	46c0      	nop			; (mov r8, r8)
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <noteSerialReset>:

// Serial port reset procedure, called before any I/O and called again upon I/O error
void noteSerialReset() {
 800625e:	b580      	push	{r7, lr}
 8006260:	af00      	add	r7, sp, #0
    MX_USART1_UART_DeInit();
 8006262:	f7ff fec3 	bl	8005fec <MX_USART1_UART_DeInit>
    MX_USART1_UART_Init();
 8006266:	f7ff fe21 	bl	8005eac <MX_USART1_UART_Init>
}
 800626a:	46c0      	nop			; (mov r8, r8)
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <noteSerialTransmit>:

// Serial write data function
void noteSerialTransmit(uint8_t *text, size_t len, bool flush) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	1dfb      	adds	r3, r7, #7
 800627c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, text, len, 5000);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	b29a      	uxth	r2, r3
 8006282:	4b04      	ldr	r3, [pc, #16]	; (8006294 <noteSerialTransmit+0x24>)
 8006284:	68f9      	ldr	r1, [r7, #12]
 8006286:	4804      	ldr	r0, [pc, #16]	; (8006298 <noteSerialTransmit+0x28>)
 8006288:	f7fe fb2c 	bl	80048e4 <HAL_UART_Transmit>
}
 800628c:	46c0      	nop			; (mov r8, r8)
 800628e:	46bd      	mov	sp, r7
 8006290:	b004      	add	sp, #16
 8006292:	bd80      	pop	{r7, pc}
 8006294:	00001388 	.word	0x00001388
 8006298:	20000508 	.word	0x20000508

0800629c <noteSerialAvailable>:

// Serial "is anything available" function, which does a read-ahead for data into a serial buffer
bool noteSerialAvailable() {
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
    return (serialFillIndex != serialDrainIndex);
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <noteSerialAvailable+0x1c>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	4b05      	ldr	r3, [pc, #20]	; (80062bc <noteSerialAvailable+0x20>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	1e5a      	subs	r2, r3, #1
 80062ac:	4193      	sbcs	r3, r2
 80062ae:	b2db      	uxtb	r3, r3
}
 80062b0:	0018      	movs	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	20000260 	.word	0x20000260
 80062bc:	20000264 	.word	0x20000264

080062c0 <noteSerialReceive>:

// Blocking serial read a byte function (generally only called if known to be available)
char noteSerialReceive() {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
    char data;
    while (!noteSerialAvailable()) ;
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	f7ff ffe8 	bl	800629c <noteSerialAvailable>
 80062cc:	0003      	movs	r3, r0
 80062ce:	001a      	movs	r2, r3
 80062d0:	2301      	movs	r3, #1
 80062d2:	4053      	eors	r3, r2
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f6      	bne.n	80062c8 <noteSerialReceive+0x8>
    if (serialDrainIndex < sizeof(serialBuffer))
 80062da:	4b0e      	ldr	r3, [pc, #56]	; (8006314 <noteSerialReceive+0x54>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a0e      	ldr	r2, [pc, #56]	; (8006318 <noteSerialReceive+0x58>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d809      	bhi.n	80062f8 <noteSerialReceive+0x38>
        data = serialBuffer[serialDrainIndex++];
 80062e4:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <noteSerialReceive+0x54>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	4a0a      	ldr	r2, [pc, #40]	; (8006314 <noteSerialReceive+0x54>)
 80062ec:	6011      	str	r1, [r2, #0]
 80062ee:	1dfa      	adds	r2, r7, #7
 80062f0:	490a      	ldr	r1, [pc, #40]	; (800631c <noteSerialReceive+0x5c>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	7013      	strb	r3, [r2, #0]
 80062f6:	e006      	b.n	8006306 <noteSerialReceive+0x46>
    else {
        data = serialBuffer[0];
 80062f8:	1dfb      	adds	r3, r7, #7
 80062fa:	4a08      	ldr	r2, [pc, #32]	; (800631c <noteSerialReceive+0x5c>)
 80062fc:	7812      	ldrb	r2, [r2, #0]
 80062fe:	701a      	strb	r2, [r3, #0]
        serialDrainIndex = 1;
 8006300:	4b04      	ldr	r3, [pc, #16]	; (8006314 <noteSerialReceive+0x54>)
 8006302:	2201      	movs	r2, #1
 8006304:	601a      	str	r2, [r3, #0]
    }
    return data;
 8006306:	1dfb      	adds	r3, r7, #7
 8006308:	781b      	ldrb	r3, [r3, #0]
}
 800630a:	0018      	movs	r0, r3
 800630c:	46bd      	mov	sp, r7
 800630e:	b002      	add	sp, #8
 8006310:	bd80      	pop	{r7, pc}
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	20000264 	.word	0x20000264
 8006318:	000001ff 	.word	0x000001ff
 800631c:	2000026c 	.word	0x2000026c

08006320 <HAL_MspInit>:

#include "main.h"
#include "event.h"

// Initialize global peripheral init
void HAL_MspInit(void) {
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006324:	4b07      	ldr	r3, [pc, #28]	; (8006344 <HAL_MspInit+0x24>)
 8006326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_MspInit+0x24>)
 800632a:	2101      	movs	r1, #1
 800632c:	430a      	orrs	r2, r1
 800632e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_PWR_CLK_ENABLE();
 8006330:	4b04      	ldr	r3, [pc, #16]	; (8006344 <HAL_MspInit+0x24>)
 8006332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006334:	4b03      	ldr	r3, [pc, #12]	; (8006344 <HAL_MspInit+0x24>)
 8006336:	2180      	movs	r1, #128	; 0x80
 8006338:	0549      	lsls	r1, r1, #21
 800633a:	430a      	orrs	r2, r1
 800633c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40021000 	.word	0x40021000

08006348 <HAL_I2C_MspDeInit>:
    }

}

// Deinitialize all I2C ports
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]

    // Handle I2C1
    if (hi2c->Instance==I2C1) {
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a0b      	ldr	r2, [pc, #44]	; (8006384 <HAL_I2C_MspDeInit+0x3c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d10f      	bne.n	800637a <HAL_I2C_MspDeInit+0x32>

        // Peripheral clock disable
        __HAL_RCC_I2C1_CLK_DISABLE();
 800635a:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_I2C_MspDeInit+0x40>)
 800635c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800635e:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <HAL_I2C_MspDeInit+0x40>)
 8006360:	490a      	ldr	r1, [pc, #40]	; (800638c <HAL_I2C_MspDeInit+0x44>)
 8006362:	400a      	ands	r2, r1
 8006364:	639a      	str	r2, [r3, #56]	; 0x38

        // I2C1 GPIO deconfigure
        HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8006366:	23c0      	movs	r3, #192	; 0xc0
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4a09      	ldr	r2, [pc, #36]	; (8006390 <HAL_I2C_MspDeInit+0x48>)
 800636c:	0019      	movs	r1, r3
 800636e:	0010      	movs	r0, r2
 8006370:	f7fc fa7a 	bl	8002868 <HAL_GPIO_DeInit>

        // I2C1 interrupt DeInit
        HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8006374:	2017      	movs	r0, #23
 8006376:	f7fc f89c 	bl	80024b2 <HAL_NVIC_DisableIRQ>

    }

}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	46bd      	mov	sp, r7
 800637e:	b002      	add	sp, #8
 8006380:	bd80      	pop	{r7, pc}
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	40005400 	.word	0x40005400
 8006388:	40021000 	.word	0x40021000
 800638c:	ffdfffff 	.word	0xffdfffff
 8006390:	50000400 	.word	0x50000400

08006394 <HAL_UART_MspInit>:


// Initialize all UART ports
void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b089      	sub	sp, #36	; 0x24
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]

    // Handle USART1
    if (huart->Instance==USART1) {
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a20      	ldr	r2, [pc, #128]	; (8006424 <HAL_UART_MspInit+0x90>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d13a      	bne.n	800641c <HAL_UART_MspInit+0x88>
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063a6:	240c      	movs	r4, #12
 80063a8:	193b      	adds	r3, r7, r4
 80063aa:	0018      	movs	r0, r3
 80063ac:	2314      	movs	r3, #20
 80063ae:	001a      	movs	r2, r3
 80063b0:	2100      	movs	r1, #0
 80063b2:	f003 f9ee 	bl	8009792 <memset>

        // Peripheral clock
        __HAL_RCC_USART1_CLK_ENABLE();
 80063b6:	4b1c      	ldr	r3, [pc, #112]	; (8006428 <HAL_UART_MspInit+0x94>)
 80063b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ba:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <HAL_UART_MspInit+0x94>)
 80063bc:	2180      	movs	r1, #128	; 0x80
 80063be:	01c9      	lsls	r1, r1, #7
 80063c0:	430a      	orrs	r2, r1
 80063c2:	635a      	str	r2, [r3, #52]	; 0x34

        // USART1 GPIO Configuration
        // PA9     ------> USART1_TX
        // PA10     ------> USART1_RX
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80063c4:	4b18      	ldr	r3, [pc, #96]	; (8006428 <HAL_UART_MspInit+0x94>)
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <HAL_UART_MspInit+0x94>)
 80063ca:	2101      	movs	r1, #1
 80063cc:	430a      	orrs	r2, r1
 80063ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80063d0:	4b15      	ldr	r3, [pc, #84]	; (8006428 <HAL_UART_MspInit+0x94>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	2201      	movs	r2, #1
 80063d6:	4013      	ands	r3, r2
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80063dc:	193b      	adds	r3, r7, r4
 80063de:	22c0      	movs	r2, #192	; 0xc0
 80063e0:	00d2      	lsls	r2, r2, #3
 80063e2:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e4:	0021      	movs	r1, r4
 80063e6:	187b      	adds	r3, r7, r1
 80063e8:	2202      	movs	r2, #2
 80063ea:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ec:	187b      	adds	r3, r7, r1
 80063ee:	2200      	movs	r2, #0
 80063f0:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063f2:	187b      	adds	r3, r7, r1
 80063f4:	2203      	movs	r2, #3
 80063f6:	60da      	str	r2, [r3, #12]
        GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80063f8:	187b      	adds	r3, r7, r1
 80063fa:	2204      	movs	r2, #4
 80063fc:	611a      	str	r2, [r3, #16]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063fe:	187a      	adds	r2, r7, r1
 8006400:	23a0      	movs	r3, #160	; 0xa0
 8006402:	05db      	lsls	r3, r3, #23
 8006404:	0011      	movs	r1, r2
 8006406:	0018      	movs	r0, r3
 8006408:	f7fc f8b8 	bl	800257c <HAL_GPIO_Init>

        // USART interrupt Init
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800640c:	2200      	movs	r2, #0
 800640e:	2100      	movs	r1, #0
 8006410:	201b      	movs	r0, #27
 8006412:	f7fc f829 	bl	8002468 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006416:	201b      	movs	r0, #27
 8006418:	f7fc f83b 	bl	8002492 <HAL_NVIC_EnableIRQ>

    }

}
 800641c:	46c0      	nop			; (mov r8, r8)
 800641e:	46bd      	mov	sp, r7
 8006420:	b009      	add	sp, #36	; 0x24
 8006422:	bd90      	pop	{r4, r7, pc}
 8006424:	40013800 	.word	0x40013800
 8006428:	40021000 	.word	0x40021000

0800642c <HAL_UART_MspDeInit>:

// Deinitialize all UARTs
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]

    // Handle USART1
    if (huart->Instance==USART1) {
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a0b      	ldr	r2, [pc, #44]	; (8006468 <HAL_UART_MspDeInit+0x3c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d110      	bne.n	8006460 <HAL_UART_MspDeInit+0x34>

        // Peripheral clock disable
        __HAL_RCC_USART1_CLK_DISABLE();
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <HAL_UART_MspDeInit+0x40>)
 8006440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006442:	4b0a      	ldr	r3, [pc, #40]	; (800646c <HAL_UART_MspDeInit+0x40>)
 8006444:	490a      	ldr	r1, [pc, #40]	; (8006470 <HAL_UART_MspDeInit+0x44>)
 8006446:	400a      	ands	r2, r1
 8006448:	635a      	str	r2, [r3, #52]	; 0x34

        // GPIO deconfigure
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800644a:	23c0      	movs	r3, #192	; 0xc0
 800644c:	00da      	lsls	r2, r3, #3
 800644e:	23a0      	movs	r3, #160	; 0xa0
 8006450:	05db      	lsls	r3, r3, #23
 8006452:	0011      	movs	r1, r2
 8006454:	0018      	movs	r0, r3
 8006456:	f7fc fa07 	bl	8002868 <HAL_GPIO_DeInit>

        // Interrupt DeInit
        HAL_NVIC_DisableIRQ(USART1_IRQn);
 800645a:	201b      	movs	r0, #27
 800645c:	f7fc f829 	bl	80024b2 <HAL_NVIC_DisableIRQ>

    }

}
 8006460:	46c0      	nop			; (mov r8, r8)
 8006462:	46bd      	mov	sp, r7
 8006464:	b002      	add	sp, #8
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40013800 	.word	0x40013800
 800646c:	40021000 	.word	0x40021000
 8006470:	ffffbfff 	.word	0xffffbfff

08006474 <HAL_LPTIM_MspInit>:

// Initialize all low power timers
#ifdef EVENT_TIMER
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

    // Handle LPTIM1
    if (hlptim->Instance==LPTIM1) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <HAL_LPTIM_MspInit+0x38>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d10e      	bne.n	80064a4 <HAL_LPTIM_MspInit+0x30>

        // Clock
        __HAL_RCC_LPTIM1_CLK_ENABLE();
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <HAL_LPTIM_MspInit+0x3c>)
 8006488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800648a:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <HAL_LPTIM_MspInit+0x3c>)
 800648c:	2180      	movs	r1, #128	; 0x80
 800648e:	0609      	lsls	r1, r1, #24
 8006490:	430a      	orrs	r2, r1
 8006492:	639a      	str	r2, [r3, #56]	; 0x38

        // LPTIM1 interrupt Init
        HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8006494:	2200      	movs	r2, #0
 8006496:	2100      	movs	r1, #0
 8006498:	200d      	movs	r0, #13
 800649a:	f7fb ffe5 	bl	8002468 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800649e:	200d      	movs	r0, #13
 80064a0:	f7fb fff7 	bl	8002492 <HAL_NVIC_EnableIRQ>

    }

}
 80064a4:	46c0      	nop			; (mov r8, r8)
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b002      	add	sp, #8
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40007c00 	.word	0x40007c00
 80064b0:	40021000 	.word	0x40021000

080064b4 <NMI_Handler>:
#ifdef EVENT_TIMER
extern LPTIM_HandleTypeDef hlptim1;
#endif

// Cortex-M4 non-maskable interrupt
void NMI_Handler(void) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
}
 80064b8:	46c0      	nop			; (mov r8, r8)
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <HardFault_Handler>:

// Cortex-M4 hardware fault interrupt
void HardFault_Handler(void) {
 80064be:	b580      	push	{r7, lr}
 80064c0:	af00      	add	r7, sp, #0
    while (1) ;
 80064c2:	e7fe      	b.n	80064c2 <HardFault_Handler+0x4>

080064c4 <SVC_Handler>:
void UsageFault_Handler(void) {
    while (1) ;
}

// System service call via SWI instruction
void SVC_Handler(void) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
}
 80064c8:	46c0      	nop			; (mov r8, r8)
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <PendSV_Handler>:
// Debug monitor
void DebugMon_Handler(void) {
}

// Pendable request for system service.
void PendSV_Handler(void) {
 80064ce:	b580      	push	{r7, lr}
 80064d0:	af00      	add	r7, sp, #0
}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <SysTick_Handler>:

// System tick timer
void SysTick_Handler(void) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80064dc:	f7fb fed0 	bl	8002280 <HAL_IncTick>
}
 80064e0:	46c0      	nop			; (mov r8, r8)
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <I2C1_IRQHandler>:

// I2C1 event interrupt
void I2C1_IRQHandler(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
    if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80064ec:	4b09      	ldr	r3, [pc, #36]	; (8006514 <I2C1_IRQHandler+0x2c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	23e0      	movs	r3, #224	; 0xe0
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4013      	ands	r3, r2
 80064f8:	d004      	beq.n	8006504 <I2C1_IRQHandler+0x1c>
        HAL_I2C_ER_IRQHandler(&hi2c1);
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <I2C1_IRQHandler+0x2c>)
 80064fc:	0018      	movs	r0, r3
 80064fe:	f7fc faf4 	bl	8002aea <HAL_I2C_ER_IRQHandler>
    } else {
        HAL_I2C_EV_IRQHandler(&hi2c1);
    }
}
 8006502:	e003      	b.n	800650c <I2C1_IRQHandler+0x24>
        HAL_I2C_EV_IRQHandler(&hi2c1);
 8006504:	4b03      	ldr	r3, [pc, #12]	; (8006514 <I2C1_IRQHandler+0x2c>)
 8006506:	0018      	movs	r0, r3
 8006508:	f7fc fad5 	bl	8002ab6 <HAL_I2C_EV_IRQHandler>
}
 800650c:	46c0      	nop			; (mov r8, r8)
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	46c0      	nop			; (mov r8, r8)
 8006514:	200004bc 	.word	0x200004bc

08006518 <USART1_IRQHandler>:

// USART1 global interrupt
void USART1_IRQHandler(void) {
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 800651c:	4b05      	ldr	r3, [pc, #20]	; (8006534 <USART1_IRQHandler+0x1c>)
 800651e:	0018      	movs	r0, r3
 8006520:	f7fe fb40 	bl	8004ba4 <HAL_UART_IRQHandler>
    MY_UART_IRQHandler(&huart1);
 8006524:	4b03      	ldr	r3, [pc, #12]	; (8006534 <USART1_IRQHandler+0x1c>)
 8006526:	0018      	movs	r0, r3
 8006528:	f7ff fd10 	bl	8005f4c <MY_UART_IRQHandler>
}
 800652c:	46c0      	nop			; (mov r8, r8)
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	20000508 	.word	0x20000508

08006538 <MY_GPIO_EXTI_IRQHandler>:

// GPIO handler, enhanced from the base ST handler in a way that enables us to distinguish from the multiple
// pins that sharing the same EXTI.
void MY_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	0002      	movs	r2, r0
 8006540:	1dbb      	adds	r3, r7, #6
 8006542:	801a      	strh	r2, [r3, #0]
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 8006544:	4b0d      	ldr	r3, [pc, #52]	; (800657c <MY_GPIO_EXTI_IRQHandler+0x44>)
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	1dba      	adds	r2, r7, #6
 800654a:	8812      	ldrh	r2, [r2, #0]
 800654c:	4013      	ands	r3, r2
 800654e:	d011      	beq.n	8006574 <MY_GPIO_EXTI_IRQHandler+0x3c>
        uint16_t GPIO_Line = GPIO_Pin & EXTI->PR;
 8006550:	4b0a      	ldr	r3, [pc, #40]	; (800657c <MY_GPIO_EXTI_IRQHandler+0x44>)
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	b29a      	uxth	r2, r3
 8006556:	200e      	movs	r0, #14
 8006558:	183b      	adds	r3, r7, r0
 800655a:	1db9      	adds	r1, r7, #6
 800655c:	8809      	ldrh	r1, [r1, #0]
 800655e:	400a      	ands	r2, r1
 8006560:	801a      	strh	r2, [r3, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006562:	4b06      	ldr	r3, [pc, #24]	; (800657c <MY_GPIO_EXTI_IRQHandler+0x44>)
 8006564:	1dba      	adds	r2, r7, #6
 8006566:	8812      	ldrh	r2, [r2, #0]
 8006568:	615a      	str	r2, [r3, #20]
        HAL_GPIO_EXTI_Callback(GPIO_Line);
 800656a:	183b      	adds	r3, r7, r0
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	0018      	movs	r0, r3
 8006570:	f7ff fe38 	bl	80061e4 <HAL_GPIO_EXTI_Callback>
    }
}
 8006574:	46c0      	nop			; (mov r8, r8)
 8006576:	46bd      	mov	sp, r7
 8006578:	b004      	add	sp, #16
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40010400 	.word	0x40010400

08006580 <EXTI0_1_IRQHandler>:

// GPIO interrupts
void EXTI0_1_IRQHandler( void ) {
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
    MY_GPIO_EXTI_IRQHandler(GPIO_PIN_0|GPIO_PIN_1);
 8006584:	2003      	movs	r0, #3
 8006586:	f7ff ffd7 	bl	8006538 <MY_GPIO_EXTI_IRQHandler>
}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <EXTI2_3_IRQHandler>:
void EXTI2_3_IRQHandler( void ) {
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
    MY_GPIO_EXTI_IRQHandler(GPIO_PIN_2|GPIO_PIN_3);
 8006594:	200c      	movs	r0, #12
 8006596:	f7ff ffcf 	bl	8006538 <MY_GPIO_EXTI_IRQHandler>
}
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler( void ) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
    MY_GPIO_EXTI_IRQHandler(GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80065a4:	4b03      	ldr	r3, [pc, #12]	; (80065b4 <EXTI4_15_IRQHandler+0x14>)
 80065a6:	0018      	movs	r0, r3
 80065a8:	f7ff ffc6 	bl	8006538 <MY_GPIO_EXTI_IRQHandler>
}
 80065ac:	46c0      	nop			; (mov r8, r8)
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	0000fff0 	.word	0x0000fff0

080065b8 <LPTIM1_IRQHandler>:

// LPTIM1 global interrupt
#ifdef EVENT_TIMER
void LPTIM1_IRQHandler(void) {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
    HAL_LPTIM_IRQHandler(&hlptim1);
 80065bc:	4b03      	ldr	r3, [pc, #12]	; (80065cc <LPTIM1_IRQHandler+0x14>)
 80065be:	0018      	movs	r0, r3
 80065c0:	f7fd f8f8 	bl	80037b4 <HAL_LPTIM_IRQHandler>
}
 80065c4:	46c0      	nop			; (mov r8, r8)
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	46c0      	nop			; (mov r8, r8)
 80065cc:	20000588 	.word	0x20000588

080065d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80065d8:	4b11      	ldr	r3, [pc, #68]	; (8006620 <_sbrk+0x50>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d102      	bne.n	80065e6 <_sbrk+0x16>
		heap_end = &end;
 80065e0:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <_sbrk+0x50>)
 80065e2:	4a10      	ldr	r2, [pc, #64]	; (8006624 <_sbrk+0x54>)
 80065e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80065e6:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <_sbrk+0x50>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80065ec:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <_sbrk+0x50>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	18d3      	adds	r3, r2, r3
 80065f4:	466a      	mov	r2, sp
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d907      	bls.n	800660a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80065fa:	f003 f863 	bl	80096c4 <__errno>
 80065fe:	0003      	movs	r3, r0
 8006600:	220c      	movs	r2, #12
 8006602:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006604:	2301      	movs	r3, #1
 8006606:	425b      	negs	r3, r3
 8006608:	e006      	b.n	8006618 <_sbrk+0x48>
	}

	heap_end += incr;
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <_sbrk+0x50>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	18d2      	adds	r2, r2, r3
 8006612:	4b03      	ldr	r3, [pc, #12]	; (8006620 <_sbrk+0x50>)
 8006614:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8006616:	68fb      	ldr	r3, [r7, #12]
}
 8006618:	0018      	movs	r0, r3
 800661a:	46bd      	mov	sp, r7
 800661c:	b004      	add	sp, #16
 800661e:	bd80      	pop	{r7, pc}
 8006620:	2000046c 	.word	0x2000046c
 8006624:	200005c0 	.word	0x200005c0

08006628 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800662c:	4b17      	ldr	r3, [pc, #92]	; (800668c <SystemInit+0x64>)
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	4b16      	ldr	r3, [pc, #88]	; (800668c <SystemInit+0x64>)
 8006632:	2180      	movs	r1, #128	; 0x80
 8006634:	0049      	lsls	r1, r1, #1
 8006636:	430a      	orrs	r2, r1
 8006638:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800663a:	4b14      	ldr	r3, [pc, #80]	; (800668c <SystemInit+0x64>)
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <SystemInit+0x64>)
 8006640:	4913      	ldr	r1, [pc, #76]	; (8006690 <SystemInit+0x68>)
 8006642:	400a      	ands	r2, r1
 8006644:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8006646:	4b11      	ldr	r3, [pc, #68]	; (800668c <SystemInit+0x64>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4b10      	ldr	r3, [pc, #64]	; (800668c <SystemInit+0x64>)
 800664c:	4911      	ldr	r1, [pc, #68]	; (8006694 <SystemInit+0x6c>)
 800664e:	400a      	ands	r2, r1
 8006650:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006652:	4b0e      	ldr	r3, [pc, #56]	; (800668c <SystemInit+0x64>)
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	4b0d      	ldr	r3, [pc, #52]	; (800668c <SystemInit+0x64>)
 8006658:	2101      	movs	r1, #1
 800665a:	438a      	bics	r2, r1
 800665c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800665e:	4b0b      	ldr	r3, [pc, #44]	; (800668c <SystemInit+0x64>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b0a      	ldr	r3, [pc, #40]	; (800668c <SystemInit+0x64>)
 8006664:	490c      	ldr	r1, [pc, #48]	; (8006698 <SystemInit+0x70>)
 8006666:	400a      	ands	r2, r1
 8006668:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800666a:	4b08      	ldr	r3, [pc, #32]	; (800668c <SystemInit+0x64>)
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	4b07      	ldr	r3, [pc, #28]	; (800668c <SystemInit+0x64>)
 8006670:	490a      	ldr	r1, [pc, #40]	; (800669c <SystemInit+0x74>)
 8006672:	400a      	ands	r2, r1
 8006674:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006676:	4b05      	ldr	r3, [pc, #20]	; (800668c <SystemInit+0x64>)
 8006678:	2200      	movs	r2, #0
 800667a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800667c:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <SystemInit+0x78>)
 800667e:	2280      	movs	r2, #128	; 0x80
 8006680:	0512      	lsls	r2, r2, #20
 8006682:	609a      	str	r2, [r3, #8]
#endif
}
 8006684:	46c0      	nop			; (mov r8, r8)
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	46c0      	nop			; (mov r8, r8)
 800668c:	40021000 	.word	0x40021000
 8006690:	88ff400c 	.word	0x88ff400c
 8006694:	fef6fff6 	.word	0xfef6fff6
 8006698:	fffbffff 	.word	0xfffbffff
 800669c:	ff02ffff 	.word	0xff02ffff
 80066a0:	e000ed00 	.word	0xe000ed00

080066a4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	617b      	str	r3, [r7, #20]
 80066ae:	2300      	movs	r3, #0
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	2300      	movs	r3, #0
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	2300      	movs	r3, #0
 80066bc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80066be:	4b4b      	ldr	r3, [pc, #300]	; (80067ec <SystemCoreClockUpdate+0x148>)
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	220c      	movs	r2, #12
 80066c4:	4013      	ands	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

  switch (tmp)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d011      	beq.n	80066f2 <SystemCoreClockUpdate+0x4e>
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d01c      	beq.n	800670c <SystemCoreClockUpdate+0x68>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d11e      	bne.n	8006714 <SystemCoreClockUpdate+0x70>
  {
    case 0x00U:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> RCC_ICSCR_MSIRANGE_Pos;
 80066d6:	4b45      	ldr	r3, [pc, #276]	; (80067ec <SystemCoreClockUpdate+0x148>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	0b5b      	lsrs	r3, r3, #13
 80066dc:	2207      	movs	r2, #7
 80066de:	4013      	ands	r3, r2
 80066e0:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3301      	adds	r3, #1
 80066e6:	2280      	movs	r2, #128	; 0x80
 80066e8:	0212      	lsls	r2, r2, #8
 80066ea:	409a      	lsls	r2, r3
 80066ec:	4b40      	ldr	r3, [pc, #256]	; (80067f0 <SystemCoreClockUpdate+0x14c>)
 80066ee:	601a      	str	r2, [r3, #0]
      break;
 80066f0:	e069      	b.n	80067c6 <SystemCoreClockUpdate+0x122>
    case 0x04U:  /* HSI used as system clock */
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80066f2:	4b3e      	ldr	r3, [pc, #248]	; (80067ec <SystemCoreClockUpdate+0x148>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2210      	movs	r2, #16
 80066f8:	4013      	ands	r3, r2
 80066fa:	d003      	beq.n	8006704 <SystemCoreClockUpdate+0x60>
      {
        SystemCoreClock = HSI_VALUE / 4U;
 80066fc:	4b3c      	ldr	r3, [pc, #240]	; (80067f0 <SystemCoreClockUpdate+0x14c>)
 80066fe:	4a3d      	ldr	r2, [pc, #244]	; (80067f4 <SystemCoreClockUpdate+0x150>)
 8006700:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = HSI_VALUE;
      }
      break;
 8006702:	e060      	b.n	80067c6 <SystemCoreClockUpdate+0x122>
        SystemCoreClock = HSI_VALUE;
 8006704:	4b3a      	ldr	r3, [pc, #232]	; (80067f0 <SystemCoreClockUpdate+0x14c>)
 8006706:	4a3c      	ldr	r2, [pc, #240]	; (80067f8 <SystemCoreClockUpdate+0x154>)
 8006708:	601a      	str	r2, [r3, #0]
      break;
 800670a:	e05c      	b.n	80067c6 <SystemCoreClockUpdate+0x122>
    case 0x08U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800670c:	4b38      	ldr	r3, [pc, #224]	; (80067f0 <SystemCoreClockUpdate+0x14c>)
 800670e:	4a3b      	ldr	r2, [pc, #236]	; (80067fc <SystemCoreClockUpdate+0x158>)
 8006710:	601a      	str	r2, [r3, #0]
      break;
 8006712:	e058      	b.n	80067c6 <SystemCoreClockUpdate+0x122>
    default:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8006714:	4b35      	ldr	r3, [pc, #212]	; (80067ec <SystemCoreClockUpdate+0x148>)
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	23f0      	movs	r3, #240	; 0xf0
 800671a:	039b      	lsls	r3, r3, #14
 800671c:	4013      	ands	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8006720:	4b32      	ldr	r3, [pc, #200]	; (80067ec <SystemCoreClockUpdate+0x148>)
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	23c0      	movs	r3, #192	; 0xc0
 8006726:	041b      	lsls	r3, r3, #16
 8006728:	4013      	ands	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	0c9b      	lsrs	r3, r3, #18
 8006730:	4a33      	ldr	r2, [pc, #204]	; (8006800 <SystemCoreClockUpdate+0x15c>)
 8006732:	5cd3      	ldrb	r3, [r2, r3]
 8006734:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	0d9b      	lsrs	r3, r3, #22
 800673a:	3301      	adds	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]

      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800673e:	4b2b      	ldr	r3, [pc, #172]	; (80067ec <SystemCoreClockUpdate+0x148>)
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	2380      	movs	r3, #128	; 0x80
 8006744:	025b      	lsls	r3, r3, #9
 8006746:	4013      	ands	r3, r2
 8006748:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00U)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d128      	bne.n	80067a2 <SystemCoreClockUpdate+0xfe>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006750:	4b26      	ldr	r3, [pc, #152]	; (80067ec <SystemCoreClockUpdate+0x148>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2210      	movs	r2, #16
 8006756:	4013      	ands	r3, r2
 8006758:	d011      	beq.n	800677e <SystemCoreClockUpdate+0xda>
        {
          SystemCoreClock = (((HSI_VALUE / 4U) * pllmul) / plldiv);
 800675a:	6939      	ldr	r1, [r7, #16]
 800675c:	000a      	movs	r2, r1
 800675e:	0152      	lsls	r2, r2, #5
 8006760:	1a52      	subs	r2, r2, r1
 8006762:	0193      	lsls	r3, r2, #6
 8006764:	1a9b      	subs	r3, r3, r2
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	185b      	adds	r3, r3, r1
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	68f9      	ldr	r1, [r7, #12]
 800676e:	0018      	movs	r0, r3
 8006770:	f7f9 fcdc 	bl	800012c <__udivsi3>
 8006774:	0003      	movs	r3, r0
 8006776:	001a      	movs	r2, r3
 8006778:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <SystemCoreClockUpdate+0x14c>)
 800677a:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800677c:	e022      	b.n	80067c4 <SystemCoreClockUpdate+0x120>
          SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 800677e:	6939      	ldr	r1, [r7, #16]
 8006780:	000a      	movs	r2, r1
 8006782:	0152      	lsls	r2, r2, #5
 8006784:	1a52      	subs	r2, r2, r1
 8006786:	0193      	lsls	r3, r2, #6
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	185b      	adds	r3, r3, r1
 800678e:	029b      	lsls	r3, r3, #10
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	0018      	movs	r0, r3
 8006794:	f7f9 fcca 	bl	800012c <__udivsi3>
 8006798:	0003      	movs	r3, r0
 800679a:	001a      	movs	r2, r3
 800679c:	4b14      	ldr	r3, [pc, #80]	; (80067f0 <SystemCoreClockUpdate+0x14c>)
 800679e:	601a      	str	r2, [r3, #0]
      break;
 80067a0:	e010      	b.n	80067c4 <SystemCoreClockUpdate+0x120>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 80067a2:	6939      	ldr	r1, [r7, #16]
 80067a4:	000a      	movs	r2, r1
 80067a6:	0152      	lsls	r2, r2, #5
 80067a8:	1a52      	subs	r2, r2, r1
 80067aa:	0193      	lsls	r3, r2, #6
 80067ac:	1a9b      	subs	r3, r3, r2
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	185b      	adds	r3, r3, r1
 80067b2:	025b      	lsls	r3, r3, #9
 80067b4:	68f9      	ldr	r1, [r7, #12]
 80067b6:	0018      	movs	r0, r3
 80067b8:	f7f9 fcb8 	bl	800012c <__udivsi3>
 80067bc:	0003      	movs	r3, r0
 80067be:	001a      	movs	r2, r3
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <SystemCoreClockUpdate+0x14c>)
 80067c2:	601a      	str	r2, [r3, #0]
      break;
 80067c4:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80067c6:	4b09      	ldr	r3, [pc, #36]	; (80067ec <SystemCoreClockUpdate+0x148>)
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	091b      	lsrs	r3, r3, #4
 80067cc:	220f      	movs	r2, #15
 80067ce:	4013      	ands	r3, r2
 80067d0:	4a0c      	ldr	r2, [pc, #48]	; (8006804 <SystemCoreClockUpdate+0x160>)
 80067d2:	5cd3      	ldrb	r3, [r2, r3]
 80067d4:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <SystemCoreClockUpdate+0x14c>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	40da      	lsrs	r2, r3
 80067de:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <SystemCoreClockUpdate+0x14c>)
 80067e0:	601a      	str	r2, [r3, #0]
}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b006      	add	sp, #24
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	40021000 	.word	0x40021000
 80067f0:	20000000 	.word	0x20000000
 80067f4:	003d0900 	.word	0x003d0900
 80067f8:	00f42400 	.word	0x00f42400
 80067fc:	007a1200 	.word	0x007a1200
 8006800:	08009d9c 	.word	0x08009d9c
 8006804:	08009d84 	.word	0x08009d84

08006808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8006808:	480d      	ldr	r0, [pc, #52]	; (8006840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800680a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800680c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800680e:	e003      	b.n	8006818 <LoopCopyDataInit>

08006810 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006810:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8006812:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006814:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006816:	3104      	adds	r1, #4

08006818 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006818:	480b      	ldr	r0, [pc, #44]	; (8006848 <LoopForever+0xa>)
  ldr  r3, =_edata
 800681a:	4b0c      	ldr	r3, [pc, #48]	; (800684c <LoopForever+0xe>)
  adds  r2, r0, r1
 800681c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800681e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006820:	d3f6      	bcc.n	8006810 <CopyDataInit>
  ldr  r2, =_sbss
 8006822:	4a0b      	ldr	r2, [pc, #44]	; (8006850 <LoopForever+0x12>)
  b  LoopFillZerobss
 8006824:	e002      	b.n	800682c <LoopFillZerobss>

08006826 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006826:	2300      	movs	r3, #0
  str  r3, [r2]
 8006828:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800682a:	3204      	adds	r2, #4

0800682c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <LoopForever+0x16>)
  cmp  r2, r3
 800682e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006830:	d3f9      	bcc.n	8006826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006832:	f7ff fef9 	bl	8006628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006836:	f002 ff4b 	bl	80096d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800683a:	f7ff fa6f 	bl	8005d1c <main>

0800683e <LoopForever>:

LoopForever:
    b LoopForever
 800683e:	e7fe      	b.n	800683e <LoopForever>
  ldr   r0, =_estack
 8006840:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8006844:	0800a15c 	.word	0x0800a15c
  ldr  r0, =_sdata
 8006848:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800684c:	2000022c 	.word	0x2000022c
  ldr  r2, =_sbss
 8006850:	2000022c 	.word	0x2000022c
  ldr  r3, = _ebss
 8006854:	200005bc 	.word	0x200005bc

08006858 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006858:	e7fe      	b.n	8006858 <ADC1_COMP_IRQHandler>
	...

0800685c <JAtoN>:
                                 * The "E" may actually be an "e".  E and X
                                 * may both be omitted (but not just one).
                                 */
    char **endPtr;              /* If non-NULL, store terminating character's
                                 * address here. */
{
 800685c:	b5b0      	push	{r4, r5, r7, lr}
 800685e:	b092      	sub	sp, #72	; 0x48
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
    int sign, expSign = FALSE;
 8006866:	2300      	movs	r3, #0
 8006868:	643b      	str	r3, [r7, #64]	; 0x40
    JNUMBER fraction, dblExp, *d;
    register const char *p;
    register int c;
    int exp = 0;                /* Exponent read from "EX" field. */
 800686a:	2300      	movs	r3, #0
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
    int fracExp = 0;            /* Exponent that derives from the fractional
 800686e:	2300      	movs	r3, #0
 8006870:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Strip off leading blanks and check for a sign.
     */

    p = string;
 8006872:	68fc      	ldr	r4, [r7, #12]
    while (*p == ' ') {
 8006874:	e000      	b.n	8006878 <JAtoN+0x1c>
        p += 1;
 8006876:	3401      	adds	r4, #1
    while (*p == ' ') {
 8006878:	7823      	ldrb	r3, [r4, #0]
 800687a:	2b20      	cmp	r3, #32
 800687c:	d0fb      	beq.n	8006876 <JAtoN+0x1a>
    }
    if (*p == '-') {
 800687e:	7823      	ldrb	r3, [r4, #0]
 8006880:	2b2d      	cmp	r3, #45	; 0x2d
 8006882:	d103      	bne.n	800688c <JAtoN+0x30>
        sign = TRUE;
 8006884:	2301      	movs	r3, #1
 8006886:	647b      	str	r3, [r7, #68]	; 0x44
        p += 1;
 8006888:	3401      	adds	r4, #1
 800688a:	e005      	b.n	8006898 <JAtoN+0x3c>
    } else {
        if (*p == '+') {
 800688c:	7823      	ldrb	r3, [r4, #0]
 800688e:	2b2b      	cmp	r3, #43	; 0x2b
 8006890:	d100      	bne.n	8006894 <JAtoN+0x38>
            p += 1;
 8006892:	3401      	adds	r4, #1
        }
        sign = FALSE;
 8006894:	2300      	movs	r3, #0
 8006896:	647b      	str	r3, [r7, #68]	; 0x44
    /*
     * Count the number of digits in the mantissa (including the decimal
     * point), and also locate the decimal point.
     */

    decPt = -1;
 8006898:	2301      	movs	r3, #1
 800689a:	425b      	negs	r3, r3
 800689c:	61fb      	str	r3, [r7, #28]
    for (mantSize = 0; ; mantSize += 1)
 800689e:	2300      	movs	r3, #0
 80068a0:	623b      	str	r3, [r7, #32]
    {
        c = *p;
 80068a2:	7823      	ldrb	r3, [r4, #0]
 80068a4:	001d      	movs	r5, r3
        if (c < '0' || c > '9') {
 80068a6:	2d2f      	cmp	r5, #47	; 0x2f
 80068a8:	dd01      	ble.n	80068ae <JAtoN+0x52>
 80068aa:	2d39      	cmp	r5, #57	; 0x39
 80068ac:	dd06      	ble.n	80068bc <JAtoN+0x60>
            if ((c != '.') || (decPt >= 0)) {
 80068ae:	2d2e      	cmp	r5, #46	; 0x2e
 80068b0:	d109      	bne.n	80068c6 <JAtoN+0x6a>
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	da06      	bge.n	80068c6 <JAtoN+0x6a>
                break;
            }
            decPt = mantSize;
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	61fb      	str	r3, [r7, #28]
        }
        p += 1;
 80068bc:	3401      	adds	r4, #1
    for (mantSize = 0; ; mantSize += 1)
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	3301      	adds	r3, #1
 80068c2:	623b      	str	r3, [r7, #32]
        c = *p;
 80068c4:	e7ed      	b.n	80068a2 <JAtoN+0x46>
     * collect 9 digits each (this is faster than using floating-point).
     * If the mantissa has more than 18 digits, ignore the extras, since
     * they can't affect the value anyway.
     */
    
    pExp  = p;
 80068c6:	613c      	str	r4, [r7, #16]
    p -= mantSize;
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	425b      	negs	r3, r3
 80068cc:	18e4      	adds	r4, r4, r3
    if (decPt < 0) {
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	da02      	bge.n	80068da <JAtoN+0x7e>
        decPt = mantSize;
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	e002      	b.n	80068e0 <JAtoN+0x84>
    } else {
        mantSize -= 1;                  /* One of the digits was the point. */
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	3b01      	subs	r3, #1
 80068de:	623b      	str	r3, [r7, #32]
    }
    if (mantSize > 18) {
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	2b12      	cmp	r3, #18
 80068e4:	dd05      	ble.n	80068f2 <JAtoN+0x96>
        fracExp = decPt - 18;
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	3b12      	subs	r3, #18
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
        mantSize = 18;
 80068ec:	2312      	movs	r3, #18
 80068ee:	623b      	str	r3, [r7, #32]
 80068f0:	e003      	b.n	80068fa <JAtoN+0x9e>
    } else {
        fracExp = decPt - mantSize;
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (mantSize == 0) {
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <JAtoN+0xb0>
        fraction = 0.0;
 8006900:	2300      	movs	r3, #0
 8006902:	2400      	movs	r4, #0
 8006904:	63bb      	str	r3, [r7, #56]	; 0x38
 8006906:	63fc      	str	r4, [r7, #60]	; 0x3c
        p = string;
 8006908:	68fc      	ldr	r4, [r7, #12]
        goto done;
 800690a:	e0d3      	b.n	8006ab4 <JAtoN+0x258>
    } else {
        long frac1, frac2;
        frac1 = 0L;
 800690c:	2300      	movs	r3, #0
 800690e:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 8006910:	e014      	b.n	800693c <JAtoN+0xe0>
        {
            c = *p;
 8006912:	7823      	ldrb	r3, [r4, #0]
 8006914:	001d      	movs	r5, r3
            p += 1;
 8006916:	3401      	adds	r4, #1
            if (c == '.') {
 8006918:	2d2e      	cmp	r5, #46	; 0x2e
 800691a:	d102      	bne.n	8006922 <JAtoN+0xc6>
                c = *p;
 800691c:	7823      	ldrb	r3, [r4, #0]
 800691e:	001d      	movs	r5, r3
                p += 1;
 8006920:	3401      	adds	r4, #1
            }
            frac1 = 10*frac1 + (c - '0');
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	0013      	movs	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	189b      	adds	r3, r3, r2
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	001a      	movs	r2, r3
 800692e:	002b      	movs	r3, r5
 8006930:	3b30      	subs	r3, #48	; 0x30
 8006932:	18d3      	adds	r3, r2, r3
 8006934:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	3b01      	subs	r3, #1
 800693a:	623b      	str	r3, [r7, #32]
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	2b09      	cmp	r3, #9
 8006940:	dce7      	bgt.n	8006912 <JAtoN+0xb6>
        }
        frac2 = 0L;
 8006942:	2300      	movs	r3, #0
 8006944:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 8006946:	e014      	b.n	8006972 <JAtoN+0x116>
        {
            c = *p;
 8006948:	7823      	ldrb	r3, [r4, #0]
 800694a:	001d      	movs	r5, r3
            p += 1;
 800694c:	3401      	adds	r4, #1
            if (c == '.') {
 800694e:	2d2e      	cmp	r5, #46	; 0x2e
 8006950:	d102      	bne.n	8006958 <JAtoN+0xfc>
                c = *p;
 8006952:	7823      	ldrb	r3, [r4, #0]
 8006954:	001d      	movs	r5, r3
                p += 1;
 8006956:	3401      	adds	r4, #1
            }
            frac2 = 10*frac2 + (c - '0');
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	0013      	movs	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	189b      	adds	r3, r3, r2
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	001a      	movs	r2, r3
 8006964:	002b      	movs	r3, r5
 8006966:	3b30      	subs	r3, #48	; 0x30
 8006968:	18d3      	adds	r3, r2, r3
 800696a:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	3b01      	subs	r3, #1
 8006970:	623b      	str	r3, [r7, #32]
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	2b00      	cmp	r3, #0
 8006976:	dce7      	bgt.n	8006948 <JAtoN+0xec>
        }
        fraction = (1.0e9 * frac1) + frac2;
 8006978:	69b8      	ldr	r0, [r7, #24]
 800697a:	f7fb fba1 	bl	80020c0 <__aeabi_i2d>
 800697e:	2200      	movs	r2, #0
 8006980:	4b5a      	ldr	r3, [pc, #360]	; (8006aec <JAtoN+0x290>)
 8006982:	f7fa fdad 	bl	80014e0 <__aeabi_dmul>
 8006986:	0003      	movs	r3, r0
 8006988:	000c      	movs	r4, r1
 800698a:	0025      	movs	r5, r4
 800698c:	001c      	movs	r4, r3
 800698e:	6978      	ldr	r0, [r7, #20]
 8006990:	f7fb fb96 	bl	80020c0 <__aeabi_i2d>
 8006994:	0002      	movs	r2, r0
 8006996:	000b      	movs	r3, r1
 8006998:	0020      	movs	r0, r4
 800699a:	0029      	movs	r1, r5
 800699c:	f7f9 fe7a 	bl	8000694 <__aeabi_dadd>
 80069a0:	0003      	movs	r3, r0
 80069a2:	000c      	movs	r4, r1
 80069a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80069a6:	63fc      	str	r4, [r7, #60]	; 0x3c

    /*
     * Skim off the exponent.
     */

    p = pExp;
 80069a8:	693c      	ldr	r4, [r7, #16]
    if ((*p == 'E') || (*p == 'e')) {
 80069aa:	7823      	ldrb	r3, [r4, #0]
 80069ac:	2b45      	cmp	r3, #69	; 0x45
 80069ae:	d002      	beq.n	80069b6 <JAtoN+0x15a>
 80069b0:	7823      	ldrb	r3, [r4, #0]
 80069b2:	2b65      	cmp	r3, #101	; 0x65
 80069b4:	d11f      	bne.n	80069f6 <JAtoN+0x19a>
        p += 1;
 80069b6:	3401      	adds	r4, #1
        if (*p == '-') {
 80069b8:	7823      	ldrb	r3, [r4, #0]
 80069ba:	2b2d      	cmp	r3, #45	; 0x2d
 80069bc:	d103      	bne.n	80069c6 <JAtoN+0x16a>
            expSign = TRUE;
 80069be:	2301      	movs	r3, #1
 80069c0:	643b      	str	r3, [r7, #64]	; 0x40
            p += 1;
 80069c2:	3401      	adds	r4, #1
 80069c4:	e011      	b.n	80069ea <JAtoN+0x18e>
        } else {
            if (*p == '+') {
 80069c6:	7823      	ldrb	r3, [r4, #0]
 80069c8:	2b2b      	cmp	r3, #43	; 0x2b
 80069ca:	d100      	bne.n	80069ce <JAtoN+0x172>
                p += 1;
 80069cc:	3401      	adds	r4, #1
            }
            expSign = FALSE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	643b      	str	r3, [r7, #64]	; 0x40
        }
        while (*p >= '0' && *p <= '9') {
 80069d2:	e00a      	b.n	80069ea <JAtoN+0x18e>
            exp = exp * 10 + (*p - '0');
 80069d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d6:	0013      	movs	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	001a      	movs	r2, r3
 80069e0:	7823      	ldrb	r3, [r4, #0]
 80069e2:	3b30      	subs	r3, #48	; 0x30
 80069e4:	18d3      	adds	r3, r2, r3
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28
            p += 1;
 80069e8:	3401      	adds	r4, #1
        while (*p >= '0' && *p <= '9') {
 80069ea:	7823      	ldrb	r3, [r4, #0]
 80069ec:	2b2f      	cmp	r3, #47	; 0x2f
 80069ee:	d902      	bls.n	80069f6 <JAtoN+0x19a>
 80069f0:	7823      	ldrb	r3, [r4, #0]
 80069f2:	2b39      	cmp	r3, #57	; 0x39
 80069f4:	d9ee      	bls.n	80069d4 <JAtoN+0x178>
        }
    }
    if (expSign) {
 80069f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <JAtoN+0x1aa>
        exp = fracExp - exp;
 80069fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a04:	e003      	b.n	8006a0e <JAtoN+0x1b2>
    } else {
        exp = fracExp + exp;
 8006a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	18d3      	adds	r3, r2, r3
 8006a0c:	62bb      	str	r3, [r7, #40]	; 0x28
     * Do this by processing the exponent one bit at a time to combine
     * many powers of 2 of 10. Then combine the exponent with the
     * fraction.
     */
    
    if (exp < 0) {
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	da05      	bge.n	8006a20 <JAtoN+0x1c4>
        expSign = TRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	643b      	str	r3, [r7, #64]	; 0x40
        exp = -exp;
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	425b      	negs	r3, r3
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a1e:	e001      	b.n	8006a24 <JAtoN+0x1c8>
    } else {
        expSign = FALSE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	643b      	str	r3, [r7, #64]	; 0x40
    }
    if (exp > maxExponent) {
 8006a24:	4b32      	ldr	r3, [pc, #200]	; (8006af0 <JAtoN+0x294>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	dd02      	ble.n	8006a34 <JAtoN+0x1d8>
        exp = maxExponent;
 8006a2e:	4b30      	ldr	r3, [pc, #192]	; (8006af0 <JAtoN+0x294>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    dblExp = 1.0;
 8006a34:	2200      	movs	r2, #0
 8006a36:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <JAtoN+0x298>)
 8006a38:	633a      	str	r2, [r7, #48]	; 0x30
 8006a3a:	637b      	str	r3, [r7, #52]	; 0x34
    for (d = powersOf10; *d != 0.0 && exp != 0; exp >>= 1, d += 1) {
 8006a3c:	4b2e      	ldr	r3, [pc, #184]	; (8006af8 <JAtoN+0x29c>)
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a40:	e014      	b.n	8006a6c <JAtoN+0x210>
        if (exp & 01) {
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	2201      	movs	r2, #1
 8006a46:	4013      	ands	r3, r2
 8006a48:	d00a      	beq.n	8006a60 <JAtoN+0x204>
            dblExp *= *d;
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a54:	f7fa fd44 	bl	80014e0 <__aeabi_dmul>
 8006a58:	0002      	movs	r2, r0
 8006a5a:	000b      	movs	r3, r1
 8006a5c:	633a      	str	r2, [r7, #48]	; 0x30
 8006a5e:	637b      	str	r3, [r7, #52]	; 0x34
    for (d = powersOf10; *d != 0.0 && exp != 0; exp >>= 1, d += 1) {
 8006a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a62:	105b      	asrs	r3, r3, #1
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	3308      	adds	r3, #8
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	6859      	ldr	r1, [r3, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	2300      	movs	r3, #0
 8006a76:	f7f9 fcdf 	bl	8000438 <__aeabi_dcmpeq>
 8006a7a:	1e03      	subs	r3, r0, #0
 8006a7c:	d102      	bne.n	8006a84 <JAtoN+0x228>
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1de      	bne.n	8006a42 <JAtoN+0x1e6>
        }
    }
    if (expSign) {
 8006a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <JAtoN+0x244>
        fraction /= dblExp;
 8006a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a92:	f7fa f91b 	bl	8000ccc <__aeabi_ddiv>
 8006a96:	0002      	movs	r2, r0
 8006a98:	000b      	movs	r3, r1
 8006a9a:	63ba      	str	r2, [r7, #56]	; 0x38
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a9e:	e009      	b.n	8006ab4 <JAtoN+0x258>
    } else {
        fraction *= dblExp;
 8006aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006aa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aa8:	f7fa fd1a 	bl	80014e0 <__aeabi_dmul>
 8006aac:	0002      	movs	r2, r0
 8006aae:	000b      	movs	r3, r1
 8006ab0:	63ba      	str	r2, [r7, #56]	; 0x38
 8006ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

done:
    if (endPtr != NULL) {
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <JAtoN+0x262>
        *endPtr = (char *) p;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	601c      	str	r4, [r3, #0]
    }

    if (sign) {
 8006abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d007      	beq.n	8006ad4 <JAtoN+0x278>
        return -fraction;
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aca:	2280      	movs	r2, #128	; 0x80
 8006acc:	0612      	lsls	r2, r2, #24
 8006ace:	405a      	eors	r2, r3
 8006ad0:	607a      	str	r2, [r7, #4]
 8006ad2:	e003      	b.n	8006adc <JAtoN+0x280>
    }
    return fraction;
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	607c      	str	r4, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	687c      	ldr	r4, [r7, #4]
}
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	0021      	movs	r1, r4
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b012      	add	sp, #72	; 0x48
 8006ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	41cdcd65 	.word	0x41cdcd65
 8006af0:	20000004 	.word	0x20000004
 8006af4:	3ff00000 	.word	0x3ff00000
 8006af8:	20000008 	.word	0x20000008

08006afc <case_insensitive_strcmp>:
    return STRINGIFY(N_CJSON_VERSION_MAJOR) "." STRINGIFY(N_CJSON_VERSION_MINOR) "." STRINGIFY(N_CJSON_VERSION_PATCH);
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8006afc:	b5b0      	push	{r4, r5, r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <case_insensitive_strcmp+0x16>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e07e      	b.n	8006c14 <case_insensitive_strcmp+0x118>
    }

    if (string1 == string2)
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d10d      	bne.n	8006b3a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e078      	b.n	8006c14 <case_insensitive_strcmp+0x118>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <case_insensitive_strcmp+0x32>
        {
            return 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e072      	b.n	8006c14 <case_insensitive_strcmp+0x118>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3301      	adds	r3, #1
 8006b32:	607b      	str	r3, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	603b      	str	r3, [r7, #0]
 8006b3a:	240f      	movs	r4, #15
 8006b3c:	193b      	adds	r3, r7, r4
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	f002 fde8 	bl	8009718 <__locale_ctype_ptr>
 8006b48:	0002      	movs	r2, r0
 8006b4a:	193b      	adds	r3, r7, r4
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	18d3      	adds	r3, r2, r3
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	001a      	movs	r2, r3
 8006b56:	2303      	movs	r3, #3
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d105      	bne.n	8006b6a <case_insensitive_strcmp+0x6e>
 8006b5e:	230f      	movs	r3, #15
 8006b60:	18fb      	adds	r3, r7, r3
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	3320      	adds	r3, #32
 8006b66:	001c      	movs	r4, r3
 8006b68:	e002      	b.n	8006b70 <case_insensitive_strcmp+0x74>
 8006b6a:	230f      	movs	r3, #15
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	781c      	ldrb	r4, [r3, #0]
 8006b70:	250e      	movs	r5, #14
 8006b72:	197b      	adds	r3, r7, r5
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	f002 fdcd 	bl	8009718 <__locale_ctype_ptr>
 8006b7e:	0002      	movs	r2, r0
 8006b80:	197b      	adds	r3, r7, r5
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	3301      	adds	r3, #1
 8006b86:	18d3      	adds	r3, r2, r3
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	001a      	movs	r2, r3
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	4013      	ands	r3, r2
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d104      	bne.n	8006b9e <case_insensitive_strcmp+0xa2>
 8006b94:	230e      	movs	r3, #14
 8006b96:	18fb      	adds	r3, r7, r3
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	3320      	adds	r3, #32
 8006b9c:	e002      	b.n	8006ba4 <case_insensitive_strcmp+0xa8>
 8006b9e:	230e      	movs	r3, #14
 8006ba0:	18fb      	adds	r3, r7, r3
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	429c      	cmp	r4, r3
 8006ba6:	d0bc      	beq.n	8006b22 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8006ba8:	240d      	movs	r4, #13
 8006baa:	193b      	adds	r3, r7, r4
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	7812      	ldrb	r2, [r2, #0]
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	f002 fdb1 	bl	8009718 <__locale_ctype_ptr>
 8006bb6:	0002      	movs	r2, r0
 8006bb8:	193b      	adds	r3, r7, r4
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	18d3      	adds	r3, r2, r3
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d105      	bne.n	8006bd8 <case_insensitive_strcmp+0xdc>
 8006bcc:	230d      	movs	r3, #13
 8006bce:	18fb      	adds	r3, r7, r3
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	3320      	adds	r3, #32
 8006bd4:	001c      	movs	r4, r3
 8006bd6:	e002      	b.n	8006bde <case_insensitive_strcmp+0xe2>
 8006bd8:	230d      	movs	r3, #13
 8006bda:	18fb      	adds	r3, r7, r3
 8006bdc:	781c      	ldrb	r4, [r3, #0]
 8006bde:	250c      	movs	r5, #12
 8006be0:	197b      	adds	r3, r7, r5
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	7812      	ldrb	r2, [r2, #0]
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	f002 fd96 	bl	8009718 <__locale_ctype_ptr>
 8006bec:	0002      	movs	r2, r0
 8006bee:	197b      	adds	r3, r7, r5
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	18d3      	adds	r3, r2, r3
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	001a      	movs	r2, r3
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d104      	bne.n	8006c0c <case_insensitive_strcmp+0x110>
 8006c02:	230c      	movs	r3, #12
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	3320      	adds	r3, #32
 8006c0a:	e002      	b.n	8006c12 <case_insensitive_strcmp+0x116>
 8006c0c:	230c      	movs	r3, #12
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	1ae3      	subs	r3, r4, r3
}
 8006c14:	0018      	movs	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b004      	add	sp, #16
 8006c1a:	bdb0      	pop	{r4, r5, r7, pc}

08006c1c <Jstrdup>:

static unsigned char* Jstrdup(const unsigned char* string)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
    size_t length = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <Jstrdup+0x1a>
    {
        return NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e018      	b.n	8006c68 <Jstrdup+0x4c>
    }

    length = strlen((const char*)string) + sizeof("");
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f7f9 fa6f 	bl	800011c <strlen>
 8006c3e:	0003      	movs	r3, r0
 8006c40:	3301      	adds	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)_Malloc(length);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	0018      	movs	r0, r3
 8006c48:	f002 f986 	bl	8008f58 <NoteFnMalloc>
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	60bb      	str	r3, [r7, #8]
    if (copy == NULL)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <Jstrdup+0x3e>
    {
        return NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	e006      	b.n	8006c68 <Jstrdup+0x4c>
    }
    memcpy(copy, string, length);
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	0018      	movs	r0, r3
 8006c62:	f002 fd8d 	bl	8009780 <memcpy>

    return copy;
 8006c66:	68bb      	ldr	r3, [r7, #8]
}
 8006c68:	0018      	movs	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b004      	add	sp, #16
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <JFree>:

N_CJSON_PUBLIC(void *) JMalloc(size_t size) {
    return _Malloc(size);
}
N_CJSON_PUBLIC(void) JFree(void *p) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
    _Free(p);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f002 f982 	bl	8008f84 <NoteFnFree>
}
 8006c80:	46c0      	nop			; (mov r8, r8)
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b002      	add	sp, #8
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <JNew_Item>:

/* Internal constructor. */
static J *JNew_Item()
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
    J* node = (J*)_Malloc(sizeof(J));
 8006c8e:	2028      	movs	r0, #40	; 0x28
 8006c90:	f002 f962 	bl	8008f58 <NoteFnMalloc>
 8006c94:	0003      	movs	r3, r0
 8006c96:	607b      	str	r3, [r7, #4]
    if (node)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d005      	beq.n	8006caa <JNew_Item+0x22>
    {
        memset(node, '\0', sizeof(J));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2228      	movs	r2, #40	; 0x28
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f002 fd74 	bl	8009792 <memset>
    }

    return node;
 8006caa:	687b      	ldr	r3, [r7, #4]
}
 8006cac:	0018      	movs	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b002      	add	sp, #8
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <JDelete>:

/* Delete a J structure. */
N_CJSON_PUBLIC(void) JDelete(J *item)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
    J *next = NULL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8006cc0:	e035      	b.n	8006d2e <JDelete+0x7a>
    {
        next = item->next;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60fb      	str	r3, [r7, #12]
        if (!(item->type & JIsReference) && (item->child != NULL))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	2380      	movs	r3, #128	; 0x80
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d108      	bne.n	8006ce6 <JDelete+0x32>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d004      	beq.n	8006ce6 <JDelete+0x32>
        {
            JDelete(item->child);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f7ff ffe7 	bl	8006cb4 <JDelete>
        }
        if (!(item->type & JIsReference) && (item->valuestring != NULL))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	2380      	movs	r3, #128	; 0x80
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	4013      	ands	r3, r2
 8006cf0:	d108      	bne.n	8006d04 <JDelete+0x50>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d004      	beq.n	8006d04 <JDelete+0x50>
        {
            _Free(item->valuestring);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f002 f940 	bl	8008f84 <NoteFnFree>
        }
        if (!(item->type & JStringIsConst) && (item->string != NULL))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	2380      	movs	r3, #128	; 0x80
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d108      	bne.n	8006d22 <JDelete+0x6e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <JDelete+0x6e>
        {
            _Free(item->string);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f002 f931 	bl	8008f84 <NoteFnFree>
        }
        _Free(item);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	0018      	movs	r0, r3
 8006d26:	f002 f92d 	bl	8008f84 <NoteFnFree>
        item = next;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1c6      	bne.n	8006cc2 <JDelete+0xe>
    }
}
 8006d34:	46c0      	nop			; (mov r8, r8)
 8006d36:	46bd      	mov	sp, r7
 8006d38:	b004      	add	sp, #16
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8006d40:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8006d42:	0018      	movs	r0, r3
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static Jbool parse_number(J * const item, parse_buffer * const input_buffer)
{
 8006d48:	b5b0      	push	{r4, r5, r7, lr}
 8006d4a:	b098      	sub	sp, #96	; 0x60
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
    JNUMBER number = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	2400      	movs	r4, #0
 8006d56:	653b      	str	r3, [r7, #80]	; 0x50
 8006d58:	657c      	str	r4, [r7, #84]	; 0x54
    unsigned char *after_end = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8006d5e:	234f      	movs	r3, #79	; 0x4f
 8006d60:	18fc      	adds	r4, r7, r3
 8006d62:	f7ff ffeb 	bl	8006d3c <get_decimal_point>
 8006d66:	0003      	movs	r3, r0
 8006d68:	7023      	strb	r3, [r4, #0]
    size_t i = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <parse_number+0x34>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <parse_number+0x38>
    {
        return false;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e08b      	b.n	8006e98 <parse_number+0x150>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8006d80:	2300      	movs	r3, #0
 8006d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d84:	e02a      	b.n	8006ddc <parse_number+0x94>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	6899      	ldr	r1, [r3, #8]
 8006d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d90:	18cb      	adds	r3, r1, r3
 8006d92:	18d3      	adds	r3, r2, r3
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	3b2b      	subs	r3, #43	; 0x2b
 8006d98:	2b3a      	cmp	r3, #58	; 0x3a
 8006d9a:	d82e      	bhi.n	8006dfa <parse_number+0xb2>
 8006d9c:	009a      	lsls	r2, r3, #2
 8006d9e:	4b40      	ldr	r3, [pc, #256]	; (8006ea0 <parse_number+0x158>)
 8006da0:	18d3      	adds	r3, r2, r3
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	469f      	mov	pc, r3
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6899      	ldr	r1, [r3, #8]
 8006dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db0:	18cb      	adds	r3, r1, r3
 8006db2:	18d3      	adds	r3, r2, r3
 8006db4:	7819      	ldrb	r1, [r3, #0]
 8006db6:	2308      	movs	r3, #8
 8006db8:	18fa      	adds	r2, r7, r3
 8006dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dbc:	18d3      	adds	r3, r2, r3
 8006dbe:	1c0a      	adds	r2, r1, #0
 8006dc0:	701a      	strb	r2, [r3, #0]
                break;
 8006dc2:	e008      	b.n	8006dd6 <parse_number+0x8e>

            case '.':
                number_c_string[i] = decimal_point;
 8006dc4:	2308      	movs	r3, #8
 8006dc6:	18fa      	adds	r2, r7, r3
 8006dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dca:	18d3      	adds	r3, r2, r3
 8006dcc:	224f      	movs	r2, #79	; 0x4f
 8006dce:	18ba      	adds	r2, r7, r2
 8006dd0:	7812      	ldrb	r2, [r2, #0]
 8006dd2:	701a      	strb	r2, [r3, #0]
                break;
 8006dd4:	46c0      	nop			; (mov r8, r8)
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8006dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd8:	3301      	adds	r3, #1
 8006dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dde:	2b3e      	cmp	r3, #62	; 0x3e
 8006de0:	d80d      	bhi.n	8006dfe <parse_number+0xb6>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00a      	beq.n	8006dfe <parse_number+0xb6>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dee:	18d2      	adds	r2, r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d3c6      	bcc.n	8006d86 <parse_number+0x3e>

            default:
                goto loop_end;
        }
    }
loop_end:
 8006df8:	e001      	b.n	8006dfe <parse_number+0xb6>
                goto loop_end;
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	e000      	b.n	8006e00 <parse_number+0xb8>
loop_end:
 8006dfe:	46c0      	nop			; (mov r8, r8)
    number_c_string[i] = '\0';
 8006e00:	2108      	movs	r1, #8
 8006e02:	187a      	adds	r2, r7, r1
 8006e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e06:	18d3      	adds	r3, r2, r3
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]

    /* some platforms may not have locale support */
#if !MINIMIZE_CLIB_DEPENDENCIES
    number = strtod((const char*)number_c_string, (char**)&after_end);
#else
    number = JAtoN((const char*)number_c_string, (char**)&after_end);
 8006e0c:	2348      	movs	r3, #72	; 0x48
 8006e0e:	18fa      	adds	r2, r7, r3
 8006e10:	000d      	movs	r5, r1
 8006e12:	187b      	adds	r3, r7, r1
 8006e14:	0011      	movs	r1, r2
 8006e16:	0018      	movs	r0, r3
 8006e18:	f7ff fd20 	bl	800685c <JAtoN>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	000c      	movs	r4, r1
 8006e20:	653b      	str	r3, [r7, #80]	; 0x50
 8006e22:	657c      	str	r4, [r7, #84]	; 0x54
#endif
    if (number_c_string == after_end)
 8006e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e26:	0029      	movs	r1, r5
 8006e28:	187b      	adds	r3, r7, r1
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d101      	bne.n	8006e32 <parse_number+0xea>
    {
        return false; /* parse_error */
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e032      	b.n	8006e98 <parse_number+0x150>
    }

    item->valuenumber = number;
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e36:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8006e38:	6193      	str	r3, [r2, #24]
 8006e3a:	61d4      	str	r4, [r2, #28]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8006e3c:	4a19      	ldr	r2, [pc, #100]	; (8006ea4 <parse_number+0x15c>)
 8006e3e:	4b1a      	ldr	r3, [pc, #104]	; (8006ea8 <parse_number+0x160>)
 8006e40:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e44:	f7f9 fb1c 	bl	8000480 <__aeabi_dcmpge>
 8006e48:	1e03      	subs	r3, r0, #0
 8006e4a:	d003      	beq.n	8006e54 <parse_number+0x10c>
    {
        item->valueint = INT_MAX;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a17      	ldr	r2, [pc, #92]	; (8006eac <parse_number+0x164>)
 8006e50:	615a      	str	r2, [r3, #20]
 8006e52:	e013      	b.n	8006e7c <parse_number+0x134>
    }
    else if (number <= INT_MIN)
 8006e54:	2200      	movs	r2, #0
 8006e56:	4b16      	ldr	r3, [pc, #88]	; (8006eb0 <parse_number+0x168>)
 8006e58:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e5c:	f7f9 fafc 	bl	8000458 <__aeabi_dcmple>
 8006e60:	1e03      	subs	r3, r0, #0
 8006e62:	d004      	beq.n	8006e6e <parse_number+0x126>
    {
        item->valueint = INT_MIN;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2280      	movs	r2, #128	; 0x80
 8006e68:	0612      	lsls	r2, r2, #24
 8006e6a:	615a      	str	r2, [r3, #20]
 8006e6c:	e006      	b.n	8006e7c <parse_number+0x134>
    }
    else
    {
        item->valueint = (int)number;
 8006e6e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e72:	f7fb f8ef 	bl	8002054 <__aeabi_d2iz>
 8006e76:	0002      	movs	r2, r0
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	615a      	str	r2, [r3, #20]
    }

    item->type = JNumber;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2208      	movs	r2, #8
 8006e80:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e88:	0011      	movs	r1, r2
 8006e8a:	2208      	movs	r2, #8
 8006e8c:	18ba      	adds	r2, r7, r2
 8006e8e:	1a8a      	subs	r2, r1, r2
 8006e90:	189a      	adds	r2, r3, r2
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	609a      	str	r2, [r3, #8]
    return true;
 8006e96:	2301      	movs	r3, #1
}
 8006e98:	0018      	movs	r0, r3
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	b018      	add	sp, #96	; 0x60
 8006e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8006ea0:	08009da8 	.word	0x08009da8
 8006ea4:	ffc00000 	.word	0xffc00000
 8006ea8:	41dfffff 	.word	0x41dfffff
 8006eac:	7fffffff 	.word	0x7fffffff
 8006eb0:	c1e00000 	.word	0xc1e00000

08006eb4 <ensure>:
    Jbool format; /* is this print a formatted print */
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60bb      	str	r3, [r7, #8]
    size_t newsize = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]

    if ((p == NULL) || (p->buffer == NULL))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <ensure+0x20>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <ensure+0x24>
    {
        return NULL;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e067      	b.n	8006fa8 <ensure+0xf4>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d007      	beq.n	8006ef0 <ensure+0x3c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d301      	bcc.n	8006ef0 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e05b      	b.n	8006fa8 <ensure+0xf4>
    }

    if (needed > INT_MAX)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	da01      	bge.n	8006efa <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e056      	b.n	8006fa8 <ensure+0xf4>
    }

    needed += p->offset + 1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	18d3      	adds	r3, r2, r3
 8006f02:	3301      	adds	r3, #1
 8006f04:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d805      	bhi.n	8006f1c <ensure+0x68>
    {
        return p->buffer + p->offset;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	18d3      	adds	r3, r2, r3
 8006f1a:	e045      	b.n	8006fa8 <ensure+0xf4>
    }

    if (p->noalloc) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <ensure+0x74>
        return NULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e03f      	b.n	8006fa8 <ensure+0xf4>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	4a21      	ldr	r2, [pc, #132]	; (8006fb0 <ensure+0xfc>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d907      	bls.n	8006f40 <ensure+0x8c>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	db02      	blt.n	8006f3c <ensure+0x88>
        {
            newsize = INT_MAX;
 8006f36:	4b1f      	ldr	r3, [pc, #124]	; (8006fb4 <ensure+0x100>)
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	e004      	b.n	8006f46 <ensure+0x92>
        }
        else
        {
            return NULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e033      	b.n	8006fa8 <ensure+0xf4>
        }
    }
    else
    {
        newsize = needed * 2;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]
    }

    /* otherwise reallocate manually */
    newbuffer = (unsigned char*)_Malloc(newsize);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f002 f805 	bl	8008f58 <NoteFnMalloc>
 8006f4e:	0003      	movs	r3, r0
 8006f50:	60bb      	str	r3, [r7, #8]
    if (!newbuffer)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10c      	bne.n	8006f72 <ensure+0xbe>
    {
        _Free(p->buffer);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f002 f811 	bl	8008f84 <NoteFnFree>
        p->length = 0;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	605a      	str	r2, [r3, #4]
        p->buffer = NULL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
        return NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e01a      	b.n	8006fa8 <ensure+0xf4>
    }
    if (newbuffer)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <ensure+0xd6>
    {
        memcpy(newbuffer, p->buffer, p->offset + 1);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6819      	ldr	r1, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f002 fbfb 	bl	8009780 <memcpy>
    }
    _Free(p->buffer);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	0018      	movs	r0, r3
 8006f90:	f001 fff8 	bl	8008f84 <NoteFnFree>

    p->length = newsize;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	18d3      	adds	r3, r2, r3
}
 8006fa8:	0018      	movs	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	b004      	add	sp, #16
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	3fffffff 	.word	0x3fffffff
 8006fb4:	7fffffff 	.word	0x7fffffff

08006fb8 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8006fb8:	b590      	push	{r4, r7, lr}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d014      	beq.n	8006ff4 <update_offset+0x3c>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d010      	beq.n	8006ff4 <update_offset+0x3c>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	18d3      	adds	r3, r2, r3
 8006fdc:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689c      	ldr	r4, [r3, #8]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f7f9 f899 	bl	800011c <strlen>
 8006fea:	0003      	movs	r3, r0
 8006fec:	18e2      	adds	r2, r4, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	609a      	str	r2, [r3, #8]
 8006ff2:	e000      	b.n	8006ff6 <update_offset+0x3e>
        return;
 8006ff4:	46c0      	nop			; (mov r8, r8)
}
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b005      	add	sp, #20
 8006ffa:	bd90      	pop	{r4, r7, pc}

08006ffc <print_number>:

/* Render the number nicely from the given item into a string. */
static Jbool print_number(const J * const item, printbuffer * const output_buffer)
{
 8006ffc:	b590      	push	{r4, r7, lr}
 8006ffe:	b093      	sub	sp, #76	; 0x4c
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8007006:	2300      	movs	r3, #0
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
    JNUMBER d = item->valuenumber;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69dc      	ldr	r4, [r3, #28]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	633b      	str	r3, [r7, #48]	; 0x30
 8007012:	637c      	str	r4, [r7, #52]	; 0x34
    int length = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26]; /* temporary buffer to print the number into */
    unsigned char decimal_point = get_decimal_point();
 800701c:	232f      	movs	r3, #47	; 0x2f
 800701e:	18fc      	adds	r4, r7, r3
 8007020:	f7ff fe8c 	bl	8006d3c <get_decimal_point>
 8007024:	0003      	movs	r3, r0
 8007026:	7023      	strb	r3, [r4, #0]

    if (output_buffer == NULL)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <print_number+0x36>
    {
        return false;
 800702e:	2300      	movs	r3, #0
 8007030:	e076      	b.n	8007120 <print_number+0x124>
    }

    /* This checks for NaN and Infinity */
    if ((d * 0) != 0)
 8007032:	2200      	movs	r2, #0
 8007034:	2300      	movs	r3, #0
 8007036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007038:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800703a:	f7fa fa51 	bl	80014e0 <__aeabi_dmul>
 800703e:	0003      	movs	r3, r0
 8007040:	000c      	movs	r4, r1
 8007042:	0018      	movs	r0, r3
 8007044:	0021      	movs	r1, r4
 8007046:	2200      	movs	r2, #0
 8007048:	2300      	movs	r3, #0
 800704a:	f7f9 f9f5 	bl	8000438 <__aeabi_dcmpeq>
 800704e:	1e03      	subs	r3, r0, #0
 8007050:	d111      	bne.n	8007076 <print_number+0x7a>
    {
        char *nbuf = (char *) number_buffer;
 8007052:	2308      	movs	r3, #8
 8007054:	18fb      	adds	r3, r7, r3
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
        strcpy(nbuf, "null");
 8007058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800705a:	4b33      	ldr	r3, [pc, #204]	; (8007128 <print_number+0x12c>)
 800705c:	0010      	movs	r0, r2
 800705e:	0019      	movs	r1, r3
 8007060:	2305      	movs	r3, #5
 8007062:	001a      	movs	r2, r3
 8007064:	f002 fb8c 	bl	8009780 <memcpy>
        length = strlen(nbuf);
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	0018      	movs	r0, r3
 800706c:	f7f9 f856 	bl	800011c <strlen>
 8007070:	0003      	movs	r3, r0
 8007072:	647b      	str	r3, [r7, #68]	; 0x44
 8007074:	e00f      	b.n	8007096 <print_number+0x9a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
        }
#else
        char *nbuf = (char *) number_buffer;
 8007076:	2308      	movs	r3, #8
 8007078:	18fb      	adds	r3, r7, r3
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
        JNtoA(d, nbuf, -1);
 800707c:	2301      	movs	r3, #1
 800707e:	425b      	negs	r3, r3
 8007080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007084:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007086:	f001 fd57 	bl	8008b38 <JNtoA>
        length = strlen(nbuf);
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	0018      	movs	r0, r3
 800708e:	f7f9 f845 	bl	800011c <strlen>
 8007092:	0003      	movs	r3, r0
 8007094:	647b      	str	r3, [r7, #68]	; 0x44
#endif
    }

    /* conversion failed or buffer overrun occured */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8007096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007098:	2b00      	cmp	r3, #0
 800709a:	db02      	blt.n	80070a2 <print_number+0xa6>
 800709c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709e:	2b19      	cmp	r3, #25
 80070a0:	dd01      	ble.n	80070a6 <print_number+0xaa>
    {
        return false;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e03c      	b.n	8007120 <print_number+0x124>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 80070a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	0011      	movs	r1, r2
 80070ae:	0018      	movs	r0, r3
 80070b0:	f7ff ff00 	bl	8006eb4 <ensure>
 80070b4:	0003      	movs	r3, r0
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 80070b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <print_number+0xc6>
    {
        return false;
 80070be:	2300      	movs	r3, #0
 80070c0:	e02e      	b.n	8007120 <print_number+0x124>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 80070c2:	2300      	movs	r3, #0
 80070c4:	643b      	str	r3, [r7, #64]	; 0x40
 80070c6:	e01b      	b.n	8007100 <print_number+0x104>
    {
        if (number_buffer[i] == decimal_point)
 80070c8:	2308      	movs	r3, #8
 80070ca:	18fa      	adds	r2, r7, r3
 80070cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ce:	18d3      	adds	r3, r2, r3
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	222f      	movs	r2, #47	; 0x2f
 80070d4:	18ba      	adds	r2, r7, r2
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d105      	bne.n	80070e8 <print_number+0xec>
        {
            output_pointer[i] = '.';
 80070dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e0:	18d3      	adds	r3, r2, r3
 80070e2:	222e      	movs	r2, #46	; 0x2e
 80070e4:	701a      	strb	r2, [r3, #0]
            continue;
 80070e6:	e008      	b.n	80070fa <print_number+0xfe>
        }

        output_pointer[i] = number_buffer[i];
 80070e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ec:	18d3      	adds	r3, r2, r3
 80070ee:	2208      	movs	r2, #8
 80070f0:	18b9      	adds	r1, r7, r2
 80070f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070f4:	188a      	adds	r2, r1, r2
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80070fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070fc:	3301      	adds	r3, #1
 80070fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007104:	429a      	cmp	r2, r3
 8007106:	d3df      	bcc.n	80070c8 <print_number+0xcc>
    }
    output_pointer[i] = '\0';
 8007108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800710a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800710c:	18d3      	adds	r3, r2, r3
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007118:	18d2      	adds	r2, r2, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	609a      	str	r2, [r3, #8]

    return true;
 800711e:	2301      	movs	r3, #1
}
 8007120:	0018      	movs	r0, r3
 8007122:	46bd      	mov	sp, r7
 8007124:	b013      	add	sp, #76	; 0x4c
 8007126:	bd90      	pop	{r4, r7, pc}
 8007128:	08009a5c 	.word	0x08009a5c

0800712c <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800713c:	2300      	movs	r3, #0
 800713e:	60bb      	str	r3, [r7, #8]
 8007140:	e04c      	b.n	80071dc <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	18d3      	adds	r3, r2, r3
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b2f      	cmp	r3, #47	; 0x2f
 800714c:	d90f      	bls.n	800716e <parse_hex4+0x42>
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	18d3      	adds	r3, r2, r3
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b39      	cmp	r3, #57	; 0x39
 8007158:	d809      	bhi.n	800716e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	18d3      	adds	r3, r2, r3
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	001a      	movs	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	18d3      	adds	r3, r2, r3
 8007168:	3b30      	subs	r3, #48	; 0x30
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	e02d      	b.n	80071ca <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	18d3      	adds	r3, r2, r3
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b40      	cmp	r3, #64	; 0x40
 8007178:	d90f      	bls.n	800719a <parse_hex4+0x6e>
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	18d3      	adds	r3, r2, r3
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b46      	cmp	r3, #70	; 0x46
 8007184:	d809      	bhi.n	800719a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	18d3      	adds	r3, r2, r3
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	001a      	movs	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	18d3      	adds	r3, r2, r3
 8007194:	3b37      	subs	r3, #55	; 0x37
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	e017      	b.n	80071ca <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	18d3      	adds	r3, r2, r3
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b60      	cmp	r3, #96	; 0x60
 80071a4:	d90f      	bls.n	80071c6 <parse_hex4+0x9a>
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	18d3      	adds	r3, r2, r3
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b66      	cmp	r3, #102	; 0x66
 80071b0:	d809      	bhi.n	80071c6 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	18d3      	adds	r3, r2, r3
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	001a      	movs	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	18d3      	adds	r3, r2, r3
 80071c0:	3b57      	subs	r3, #87	; 0x57
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e001      	b.n	80071ca <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	e00c      	b.n	80071e4 <parse_hex4+0xb8>
        }

        if (i < 3)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d802      	bhi.n	80071d6 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	3301      	adds	r3, #1
 80071da:	60bb      	str	r3, [r7, #8]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d9af      	bls.n	8007142 <parse_hex4+0x16>
        }
    }

    return h;
 80071e2:	68fb      	ldr	r3, [r7, #12]
}
 80071e4:	0018      	movs	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b004      	add	sp, #16
 80071ea:	bd80      	pop	{r7, pc}

080071ec <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08a      	sub	sp, #40	; 0x28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8007204:	2323      	movs	r3, #35	; 0x23
 8007206:	18fb      	adds	r3, r7, r3
 8007208:	2200      	movs	r2, #0
 800720a:	701a      	strb	r2, [r3, #0]
    unsigned char utf8_position = 0;
 800720c:	2322      	movs	r3, #34	; 0x22
 800720e:	18fb      	adds	r3, r7, r3
 8007210:	2200      	movs	r2, #0
 8007212:	701a      	strb	r2, [r3, #0]
    unsigned char sequence_length = 0;
 8007214:	2321      	movs	r3, #33	; 0x21
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	2200      	movs	r2, #0
 800721a:	701a      	strb	r2, [r3, #0]
    unsigned char first_byte_mark = 0;
 800721c:	2320      	movs	r3, #32
 800721e:	18fb      	adds	r3, r7, r3
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]

    if ((input_end - first_sequence) < 6)
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b05      	cmp	r3, #5
 800722c:	dc00      	bgt.n	8007230 <utf16_literal_to_utf8+0x44>
 800722e:	e0cd      	b.n	80073cc <utf16_literal_to_utf8+0x1e0>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	3302      	adds	r3, #2
 8007234:	0018      	movs	r0, r3
 8007236:	f7ff ff79 	bl	800712c <parse_hex4>
 800723a:	0003      	movs	r3, r0
 800723c:	61fb      	str	r3, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	4a69      	ldr	r2, [pc, #420]	; (80073e8 <utf16_literal_to_utf8+0x1fc>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d904      	bls.n	8007250 <utf16_literal_to_utf8+0x64>
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	4a68      	ldr	r2, [pc, #416]	; (80073ec <utf16_literal_to_utf8+0x200>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d800      	bhi.n	8007250 <utf16_literal_to_utf8+0x64>
 800724e:	e0bf      	b.n	80073d0 <utf16_literal_to_utf8+0x1e4>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	4a67      	ldr	r2, [pc, #412]	; (80073f0 <utf16_literal_to_utf8+0x204>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d93c      	bls.n	80072d2 <utf16_literal_to_utf8+0xe6>
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	4a63      	ldr	r2, [pc, #396]	; (80073e8 <utf16_literal_to_utf8+0x1fc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d838      	bhi.n	80072d2 <utf16_literal_to_utf8+0xe6>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	3306      	adds	r3, #6
 8007264:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800726a:	2321      	movs	r3, #33	; 0x21
 800726c:	18fb      	adds	r3, r7, r3
 800726e:	220c      	movs	r2, #12
 8007270:	701a      	strb	r2, [r3, #0]

        if ((input_end - second_sequence) < 6)
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b05      	cmp	r3, #5
 800727a:	dc00      	bgt.n	800727e <utf16_literal_to_utf8+0x92>
 800727c:	e0aa      	b.n	80073d4 <utf16_literal_to_utf8+0x1e8>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b5c      	cmp	r3, #92	; 0x5c
 8007284:	d000      	beq.n	8007288 <utf16_literal_to_utf8+0x9c>
 8007286:	e0a7      	b.n	80073d8 <utf16_literal_to_utf8+0x1ec>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	3301      	adds	r3, #1
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b75      	cmp	r3, #117	; 0x75
 8007290:	d000      	beq.n	8007294 <utf16_literal_to_utf8+0xa8>
 8007292:	e0a1      	b.n	80073d8 <utf16_literal_to_utf8+0x1ec>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	3302      	adds	r3, #2
 8007298:	0018      	movs	r0, r3
 800729a:	f7ff ff47 	bl	800712c <parse_hex4>
 800729e:	0003      	movs	r3, r0
 80072a0:	613b      	str	r3, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	4a50      	ldr	r2, [pc, #320]	; (80073e8 <utf16_literal_to_utf8+0x1fc>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d800      	bhi.n	80072ac <utf16_literal_to_utf8+0xc0>
 80072aa:	e095      	b.n	80073d8 <utf16_literal_to_utf8+0x1ec>
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	4a4f      	ldr	r2, [pc, #316]	; (80073ec <utf16_literal_to_utf8+0x200>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d900      	bls.n	80072b6 <utf16_literal_to_utf8+0xca>
 80072b4:	e090      	b.n	80073d8 <utf16_literal_to_utf8+0x1ec>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	029b      	lsls	r3, r3, #10
 80072ba:	4a4e      	ldr	r2, [pc, #312]	; (80073f4 <utf16_literal_to_utf8+0x208>)
 80072bc:	401a      	ands	r2, r3
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	059b      	lsls	r3, r3, #22
 80072c2:	0d9b      	lsrs	r3, r3, #22
 80072c4:	4313      	orrs	r3, r2
 80072c6:	2280      	movs	r2, #128	; 0x80
 80072c8:	0252      	lsls	r2, r2, #9
 80072ca:	4694      	mov	ip, r2
 80072cc:	4463      	add	r3, ip
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80072d0:	e005      	b.n	80072de <utf16_literal_to_utf8+0xf2>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80072d2:	2321      	movs	r3, #33	; 0x21
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	2206      	movs	r2, #6
 80072d8:	701a      	strb	r2, [r3, #0]
        codepoint = first_code;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	2b7f      	cmp	r3, #127	; 0x7f
 80072e2:	d804      	bhi.n	80072ee <utf16_literal_to_utf8+0x102>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80072e4:	2323      	movs	r3, #35	; 0x23
 80072e6:	18fb      	adds	r3, r7, r3
 80072e8:	2201      	movs	r2, #1
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e025      	b.n	800733a <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint < 0x800)
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	4a41      	ldr	r2, [pc, #260]	; (80073f8 <utf16_literal_to_utf8+0x20c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d808      	bhi.n	8007308 <utf16_literal_to_utf8+0x11c>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80072f6:	2323      	movs	r3, #35	; 0x23
 80072f8:	18fb      	adds	r3, r7, r3
 80072fa:	2202      	movs	r2, #2
 80072fc:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xC0; /* 11000000 */
 80072fe:	2320      	movs	r3, #32
 8007300:	18fb      	adds	r3, r7, r3
 8007302:	22c0      	movs	r2, #192	; 0xc0
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	e018      	b.n	800733a <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint < 0x10000)
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	4a3c      	ldr	r2, [pc, #240]	; (80073fc <utf16_literal_to_utf8+0x210>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d808      	bhi.n	8007322 <utf16_literal_to_utf8+0x136>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8007310:	2323      	movs	r3, #35	; 0x23
 8007312:	18fb      	adds	r3, r7, r3
 8007314:	2203      	movs	r2, #3
 8007316:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xE0; /* 11100000 */
 8007318:	2320      	movs	r3, #32
 800731a:	18fb      	adds	r3, r7, r3
 800731c:	22e0      	movs	r2, #224	; 0xe0
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e00b      	b.n	800733a <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint <= 0x10FFFF)
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	4a36      	ldr	r2, [pc, #216]	; (8007400 <utf16_literal_to_utf8+0x214>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d858      	bhi.n	80073dc <utf16_literal_to_utf8+0x1f0>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800732a:	2323      	movs	r3, #35	; 0x23
 800732c:	18fb      	adds	r3, r7, r3
 800732e:	2204      	movs	r2, #4
 8007330:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xF0; /* 11110000 */
 8007332:	2320      	movs	r3, #32
 8007334:	18fb      	adds	r3, r7, r3
 8007336:	22f0      	movs	r2, #240	; 0xf0
 8007338:	701a      	strb	r2, [r3, #0]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800733a:	2322      	movs	r3, #34	; 0x22
 800733c:	18fb      	adds	r3, r7, r3
 800733e:	2223      	movs	r2, #35	; 0x23
 8007340:	18ba      	adds	r2, r7, r2
 8007342:	7812      	ldrb	r2, [r2, #0]
 8007344:	3a01      	subs	r2, #1
 8007346:	701a      	strb	r2, [r3, #0]
 8007348:	e017      	b.n	800737a <utf16_literal_to_utf8+0x18e>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	b2db      	uxtb	r3, r3
 800734e:	223f      	movs	r2, #63	; 0x3f
 8007350:	4013      	ands	r3, r2
 8007352:	b2da      	uxtb	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6819      	ldr	r1, [r3, #0]
 8007358:	2022      	movs	r0, #34	; 0x22
 800735a:	183b      	adds	r3, r7, r0
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	18cb      	adds	r3, r1, r3
 8007360:	2180      	movs	r1, #128	; 0x80
 8007362:	4249      	negs	r1, r1
 8007364:	430a      	orrs	r2, r1
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	099b      	lsrs	r3, r3, #6
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8007370:	183b      	adds	r3, r7, r0
 8007372:	781a      	ldrb	r2, [r3, #0]
 8007374:	183b      	adds	r3, r7, r0
 8007376:	3a01      	subs	r2, #1
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	2322      	movs	r3, #34	; 0x22
 800737c:	18fb      	adds	r3, r7, r3
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e2      	bne.n	800734a <utf16_literal_to_utf8+0x15e>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8007384:	2323      	movs	r3, #35	; 0x23
 8007386:	18fb      	adds	r3, r7, r3
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d90a      	bls.n	80073a4 <utf16_literal_to_utf8+0x1b8>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	b2d9      	uxtb	r1, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2220      	movs	r2, #32
 8007398:	18ba      	adds	r2, r7, r2
 800739a:	7812      	ldrb	r2, [r2, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	e007      	b.n	80073b4 <utf16_literal_to_utf8+0x1c8>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	217f      	movs	r1, #127	; 0x7f
 80073ae:	400a      	ands	r2, r1
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	2323      	movs	r3, #35	; 0x23
 80073ba:	18fb      	adds	r3, r7, r3
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	18d2      	adds	r2, r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80073c4:	2321      	movs	r3, #33	; 0x21
 80073c6:	18fb      	adds	r3, r7, r3
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	e009      	b.n	80073e0 <utf16_literal_to_utf8+0x1f4>
        goto fail;
 80073cc:	46c0      	nop			; (mov r8, r8)
 80073ce:	e006      	b.n	80073de <utf16_literal_to_utf8+0x1f2>
        goto fail;
 80073d0:	46c0      	nop			; (mov r8, r8)
 80073d2:	e004      	b.n	80073de <utf16_literal_to_utf8+0x1f2>
            goto fail;
 80073d4:	46c0      	nop			; (mov r8, r8)
 80073d6:	e002      	b.n	80073de <utf16_literal_to_utf8+0x1f2>

fail:
 80073d8:	46c0      	nop			; (mov r8, r8)
 80073da:	e000      	b.n	80073de <utf16_literal_to_utf8+0x1f2>
        goto fail;
 80073dc:	46c0      	nop			; (mov r8, r8)
    return 0;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	0018      	movs	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b00a      	add	sp, #40	; 0x28
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	0000dbff 	.word	0x0000dbff
 80073ec:	0000dfff 	.word	0x0000dfff
 80073f0:	0000d7ff 	.word	0x0000d7ff
 80073f4:	000ffc00 	.word	0x000ffc00
 80073f8:	000007ff 	.word	0x000007ff
 80073fc:	0000ffff 	.word	0x0000ffff
 8007400:	0010ffff 	.word	0x0010ffff

08007404 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static Jbool parse_string(J * const item, parse_buffer * const input_buffer)
{
 8007404:	b5b0      	push	{r4, r5, r7, lr}
 8007406:	b08a      	sub	sp, #40	; 0x28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	3301      	adds	r3, #1
 8007418:	18d3      	adds	r3, r2, r3
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	3301      	adds	r3, #1
 8007426:	18d3      	adds	r3, r2, r3
 8007428:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800742e:	2300      	movs	r3, #0
 8007430:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	18d3      	adds	r3, r2, r3
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b22      	cmp	r3, #34	; 0x22
 8007440:	d000      	beq.n	8007444 <parse_string+0x40>
 8007442:	e0c9      	b.n	80075d8 <parse_string+0x1d4>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800744c:	e018      	b.n	8007480 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b5c      	cmp	r3, #92	; 0x5c
 8007454:	d111      	bne.n	800747a <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	3301      	adds	r3, #1
 800745a:	001a      	movs	r2, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	001a      	movs	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	429a      	cmp	r2, r3
 800746a:	d300      	bcc.n	800746e <parse_string+0x6a>
 800746c:	e0b6      	b.n	80075dc <parse_string+0x1d8>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	3301      	adds	r3, #1
 8007472:	61bb      	str	r3, [r7, #24]
                input_end++;
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	3301      	adds	r3, #1
 8007478:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	3301      	adds	r3, #1
 800747e:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8007480:	6a3a      	ldr	r2, [r7, #32]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	001a      	movs	r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	d203      	bcs.n	800749a <parse_string+0x96>
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b22      	cmp	r3, #34	; 0x22
 8007498:	d1d9      	bne.n	800744e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800749a:	6a3a      	ldr	r2, [r7, #32]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	001a      	movs	r2, r3
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d300      	bcc.n	80074ae <parse_string+0xaa>
 80074ac:	e098      	b.n	80075e0 <parse_string+0x1dc>
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b22      	cmp	r3, #34	; 0x22
 80074b4:	d000      	beq.n	80074b8 <parse_string+0xb4>
 80074b6:	e093      	b.n	80075e0 <parse_string+0x1dc>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80074b8:	6a3a      	ldr	r2, [r7, #32]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	6819      	ldr	r1, [r3, #0]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	18cb      	adds	r3, r1, r3
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	001a      	movs	r2, r3
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)_Malloc(allocation_length + sizeof(""));
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	3301      	adds	r3, #1
 80074d2:	0018      	movs	r0, r3
 80074d4:	f001 fd40 	bl	8008f58 <NoteFnMalloc>
 80074d8:	0003      	movs	r3, r0
 80074da:	61fb      	str	r3, [r7, #28]
        if (output == NULL)
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d100      	bne.n	80074e4 <parse_string+0xe0>
 80074e2:	e07f      	b.n	80075e4 <parse_string+0x1e0>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80074e8:	e05b      	b.n	80075a2 <parse_string+0x19e>
    {
        if (*input_pointer != '\\')
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b5c      	cmp	r3, #92	; 0x5c
 80074f0:	d008      	beq.n	8007504 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 80074f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f4:	1c53      	adds	r3, r2, #1
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	1c59      	adds	r1, r3, #1
 80074fc:	60f9      	str	r1, [r7, #12]
 80074fe:	7812      	ldrb	r2, [r2, #0]
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	e04e      	b.n	80075a2 <parse_string+0x19e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8007504:	2317      	movs	r3, #23
 8007506:	18fb      	adds	r3, r7, r3
 8007508:	2202      	movs	r2, #2
 800750a:	701a      	strb	r2, [r3, #0]
            if ((input_end - input_pointer) < 1)
 800750c:	6a3a      	ldr	r2, [r7, #32]
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	dd68      	ble.n	80075e8 <parse_string+0x1e4>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	3301      	adds	r3, #1
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	3b22      	subs	r3, #34	; 0x22
 800751e:	2b53      	cmp	r3, #83	; 0x53
 8007520:	d864      	bhi.n	80075ec <parse_string+0x1e8>
 8007522:	009a      	lsls	r2, r3, #2
 8007524:	4b3e      	ldr	r3, [pc, #248]	; (8007620 <parse_string+0x21c>)
 8007526:	18d3      	adds	r3, r2, r3
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	469f      	mov	pc, r3
            {
                case 'b':
                    *output_pointer++ = '\b';
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	60fa      	str	r2, [r7, #12]
 8007532:	2208      	movs	r2, #8
 8007534:	701a      	strb	r2, [r3, #0]
                    break;
 8007536:	e02e      	b.n	8007596 <parse_string+0x192>
                case 'f':
                    *output_pointer++ = '\f';
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	60fa      	str	r2, [r7, #12]
 800753e:	220c      	movs	r2, #12
 8007540:	701a      	strb	r2, [r3, #0]
                    break;
 8007542:	e028      	b.n	8007596 <parse_string+0x192>
                case 'n':
                    *output_pointer++ = '\n';
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	60fa      	str	r2, [r7, #12]
 800754a:	220a      	movs	r2, #10
 800754c:	701a      	strb	r2, [r3, #0]
                    break;
 800754e:	e022      	b.n	8007596 <parse_string+0x192>
                case 'r':
                    *output_pointer++ = '\r';
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	60fa      	str	r2, [r7, #12]
 8007556:	220d      	movs	r2, #13
 8007558:	701a      	strb	r2, [r3, #0]
                    break;
 800755a:	e01c      	b.n	8007596 <parse_string+0x192>
                case 't':
                    *output_pointer++ = '\t';
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	60fa      	str	r2, [r7, #12]
 8007562:	2209      	movs	r2, #9
 8007564:	701a      	strb	r2, [r3, #0]
                    break;
 8007566:	e016      	b.n	8007596 <parse_string+0x192>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	60fa      	str	r2, [r7, #12]
 800756e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007570:	7852      	ldrb	r2, [r2, #1]
 8007572:	701a      	strb	r2, [r3, #0]
                    break;
 8007574:	e00f      	b.n	8007596 <parse_string+0x192>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8007576:	2517      	movs	r5, #23
 8007578:	197c      	adds	r4, r7, r5
 800757a:	230c      	movs	r3, #12
 800757c:	18fa      	adds	r2, r7, r3
 800757e:	6a39      	ldr	r1, [r7, #32]
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	0018      	movs	r0, r3
 8007584:	f7ff fe32 	bl	80071ec <utf16_literal_to_utf8>
 8007588:	0003      	movs	r3, r0
 800758a:	7023      	strb	r3, [r4, #0]
                    if (sequence_length == 0)
 800758c:	197b      	adds	r3, r7, r5
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d02d      	beq.n	80075f0 <parse_string+0x1ec>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8007594:	46c0      	nop			; (mov r8, r8)

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8007596:	2317      	movs	r3, #23
 8007598:	18fb      	adds	r3, r7, r3
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759e:	18d3      	adds	r3, r2, r3
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80075a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d39f      	bcc.n	80074ea <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	701a      	strb	r2, [r3, #0]

    item->type = JString;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2210      	movs	r2, #16
 80075b4:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80075bc:	6a3a      	ldr	r2, [r7, #32]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	001a      	movs	r2, r3
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	609a      	str	r2, [r3, #8]

    return true;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e01e      	b.n	8007616 <parse_string+0x212>
        goto fail;
 80075d8:	46c0      	nop			; (mov r8, r8)
 80075da:	e00a      	b.n	80075f2 <parse_string+0x1ee>
                    goto fail;
 80075dc:	46c0      	nop			; (mov r8, r8)
 80075de:	e008      	b.n	80075f2 <parse_string+0x1ee>

fail:
 80075e0:	46c0      	nop			; (mov r8, r8)
 80075e2:	e006      	b.n	80075f2 <parse_string+0x1ee>
            goto fail; /* allocation failure */
 80075e4:	46c0      	nop			; (mov r8, r8)
 80075e6:	e004      	b.n	80075f2 <parse_string+0x1ee>
                goto fail;
 80075e8:	46c0      	nop			; (mov r8, r8)
 80075ea:	e002      	b.n	80075f2 <parse_string+0x1ee>
                    goto fail;
 80075ec:	46c0      	nop			; (mov r8, r8)
 80075ee:	e000      	b.n	80075f2 <parse_string+0x1ee>
                        goto fail;
 80075f0:	46c0      	nop			; (mov r8, r8)
    if (output != NULL)
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <parse_string+0x1fc>
    {
        _Free(output);
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	0018      	movs	r0, r3
 80075fc:	f001 fcc2 	bl	8008f84 <NoteFnFree>
    }

    if (input_pointer != NULL)
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	2b00      	cmp	r3, #0
 8007604:	d006      	beq.n	8007614 <parse_string+0x210>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8007606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	001a      	movs	r2, r3
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	609a      	str	r2, [r3, #8]
    }

    return false;
 8007614:	2300      	movs	r3, #0
}
 8007616:	0018      	movs	r0, r3
 8007618:	46bd      	mov	sp, r7
 800761a:	b00a      	add	sp, #40	; 0x28
 800761c:	bdb0      	pop	{r4, r5, r7, pc}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	08009e94 	.word	0x08009e94

08007624 <htoa16>:

/* Convert a 16-bit number to 4 hex digits, null-terminating it */
void htoa16(uint16_t n, unsigned char *p)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	0002      	movs	r2, r0
 800762c:	6039      	str	r1, [r7, #0]
 800762e:	1dbb      	adds	r3, r7, #6
 8007630:	801a      	strh	r2, [r3, #0]
    int i;
    for (i=0; i<4; i++)
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	e026      	b.n	8007686 <htoa16+0x62>
    {
        uint16_t nibble = (n >> 12) & 0xff;
 8007638:	210a      	movs	r1, #10
 800763a:	187b      	adds	r3, r7, r1
 800763c:	1dba      	adds	r2, r7, #6
 800763e:	8812      	ldrh	r2, [r2, #0]
 8007640:	0b12      	lsrs	r2, r2, #12
 8007642:	801a      	strh	r2, [r3, #0]
        n = n << 4;
 8007644:	1dbb      	adds	r3, r7, #6
 8007646:	1dba      	adds	r2, r7, #6
 8007648:	8812      	ldrh	r2, [r2, #0]
 800764a:	0112      	lsls	r2, r2, #4
 800764c:	801a      	strh	r2, [r3, #0]
        if (nibble >= 10)
 800764e:	187b      	adds	r3, r7, r1
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	2b09      	cmp	r3, #9
 8007654:	d90a      	bls.n	800766c <htoa16+0x48>
            *p++ = 'A' + (nibble-10);
 8007656:	230a      	movs	r3, #10
 8007658:	18fb      	adds	r3, r7, r3
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b2da      	uxtb	r2, r3
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	1c59      	adds	r1, r3, #1
 8007662:	6039      	str	r1, [r7, #0]
 8007664:	3237      	adds	r2, #55	; 0x37
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	e009      	b.n	8007680 <htoa16+0x5c>
        else
            *p++ = '0' + nibble;
 800766c:	230a      	movs	r3, #10
 800766e:	18fb      	adds	r3, r7, r3
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b2da      	uxtb	r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	1c59      	adds	r1, r3, #1
 8007678:	6039      	str	r1, [r7, #0]
 800767a:	3230      	adds	r2, #48	; 0x30
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3301      	adds	r3, #1
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b03      	cmp	r3, #3
 800768a:	ddd5      	ble.n	8007638 <htoa16+0x14>
    }
    *p = '\0';
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	701a      	strb	r2, [r3, #0]
}
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	46bd      	mov	sp, r7
 8007696:	b004      	add	sp, #16
 8007698:	bd80      	pop	{r7, pc}
	...

0800769c <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static Jbool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <print_string_ptr+0x28>
    {
        return false;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e0e2      	b.n	800788a <print_string_ptr+0x1ee>
    }

    /* empty string */
    if (input == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d115      	bne.n	80076f6 <print_string_ptr+0x5a>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2103      	movs	r1, #3
 80076ce:	0018      	movs	r0, r3
 80076d0:	f7ff fbf0 	bl	8006eb4 <ensure>
 80076d4:	0003      	movs	r3, r0
 80076d6:	613b      	str	r3, [r7, #16]
        if (output == NULL)
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <print_string_ptr+0x46>
        {
            return false;
 80076de:	2300      	movs	r3, #0
 80076e0:	e0d3      	b.n	800788a <print_string_ptr+0x1ee>
        }
        strcpy((char*)output, "\"\"");
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4b6b      	ldr	r3, [pc, #428]	; (8007894 <print_string_ptr+0x1f8>)
 80076e6:	0010      	movs	r0, r2
 80076e8:	0019      	movs	r1, r3
 80076ea:	2303      	movs	r3, #3
 80076ec:	001a      	movs	r2, r3
 80076ee:	f002 f847 	bl	8009780 <memcpy>

        return true;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e0c9      	b.n	800788a <print_string_ptr+0x1ee>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	61fb      	str	r3, [r7, #28]
 80076fa:	e01c      	b.n	8007736 <print_string_ptr+0x9a>
    {
        switch (*input_pointer)
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b0d      	cmp	r3, #13
 8007702:	dc05      	bgt.n	8007710 <print_string_ptr+0x74>
 8007704:	2b0c      	cmp	r3, #12
 8007706:	da07      	bge.n	8007718 <print_string_ptr+0x7c>
 8007708:	3b08      	subs	r3, #8
 800770a:	2b02      	cmp	r3, #2
 800770c:	d808      	bhi.n	8007720 <print_string_ptr+0x84>
 800770e:	e003      	b.n	8007718 <print_string_ptr+0x7c>
 8007710:	2b22      	cmp	r3, #34	; 0x22
 8007712:	d001      	beq.n	8007718 <print_string_ptr+0x7c>
 8007714:	2b5c      	cmp	r3, #92	; 0x5c
 8007716:	d103      	bne.n	8007720 <print_string_ptr+0x84>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	3301      	adds	r3, #1
 800771c:	617b      	str	r3, [r7, #20]
                break;
 800771e:	e007      	b.n	8007730 <print_string_ptr+0x94>
            default:
                if (*input_pointer < 32)
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b1f      	cmp	r3, #31
 8007726:	d802      	bhi.n	800772e <print_string_ptr+0x92>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	3305      	adds	r3, #5
 800772c:	617b      	str	r3, [r7, #20]
                }
                break;
 800772e:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer; input_pointer++)
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	3301      	adds	r3, #1
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1de      	bne.n	80076fc <print_string_ptr+0x60>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	001a      	movs	r2, r3
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	189b      	adds	r3, r3, r2
 800774a:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	1cda      	adds	r2, r3, #3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	0011      	movs	r1, r2
 8007754:	0018      	movs	r0, r3
 8007756:	f7ff fbad 	bl	8006eb4 <ensure>
 800775a:	0003      	movs	r3, r0
 800775c:	613b      	str	r3, [r7, #16]
    if (output == NULL)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <print_string_ptr+0xcc>
    {
        return false;
 8007764:	2300      	movs	r3, #0
 8007766:	e090      	b.n	800788a <print_string_ptr+0x1ee>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d117      	bne.n	800779e <print_string_ptr+0x102>
    {
        output[0] = '\"';
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	2222      	movs	r2, #34	; 0x22
 8007772:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	3301      	adds	r3, #1
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	0018      	movs	r0, r3
 800777e:	f001 ffff 	bl	8009780 <memcpy>
        output[output_length + 1] = '\"';
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	18d3      	adds	r3, r2, r3
 800778a:	2222      	movs	r2, #34	; 0x22
 800778c:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3302      	adds	r3, #2
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	18d3      	adds	r3, r2, r3
 8007796:	2200      	movs	r2, #0
 8007798:	701a      	strb	r2, [r3, #0]

        return true;
 800779a:	2301      	movs	r3, #1
 800779c:	e075      	b.n	800788a <print_string_ptr+0x1ee>
    }

    output[0] = '\"';
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2222      	movs	r2, #34	; 0x22
 80077a2:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	3301      	adds	r3, #1
 80077a8:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	e05b      	b.n	8007868 <print_string_ptr+0x1cc>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b1f      	cmp	r3, #31
 80077b6:	d90c      	bls.n	80077d2 <print_string_ptr+0x136>
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b22      	cmp	r3, #34	; 0x22
 80077be:	d008      	beq.n	80077d2 <print_string_ptr+0x136>
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b5c      	cmp	r3, #92	; 0x5c
 80077c6:	d004      	beq.n	80077d2 <print_string_ptr+0x136>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	781a      	ldrb	r2, [r3, #0]
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	701a      	strb	r2, [r3, #0]
 80077d0:	e044      	b.n	800785c <print_string_ptr+0x1c0>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	61ba      	str	r2, [r7, #24]
 80077d8:	225c      	movs	r2, #92	; 0x5c
 80077da:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b0c      	cmp	r3, #12
 80077e2:	d01a      	beq.n	800781a <print_string_ptr+0x17e>
 80077e4:	dc06      	bgt.n	80077f4 <print_string_ptr+0x158>
 80077e6:	2b09      	cmp	r3, #9
 80077e8:	d023      	beq.n	8007832 <print_string_ptr+0x196>
 80077ea:	2b0a      	cmp	r3, #10
 80077ec:	d019      	beq.n	8007822 <print_string_ptr+0x186>
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d00f      	beq.n	8007812 <print_string_ptr+0x176>
 80077f2:	e022      	b.n	800783a <print_string_ptr+0x19e>
 80077f4:	2b22      	cmp	r3, #34	; 0x22
 80077f6:	d008      	beq.n	800780a <print_string_ptr+0x16e>
 80077f8:	2b5c      	cmp	r3, #92	; 0x5c
 80077fa:	d002      	beq.n	8007802 <print_string_ptr+0x166>
 80077fc:	2b0d      	cmp	r3, #13
 80077fe:	d014      	beq.n	800782a <print_string_ptr+0x18e>
 8007800:	e01b      	b.n	800783a <print_string_ptr+0x19e>
            {
                case '\\':
                    *output_pointer = '\\';
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	225c      	movs	r2, #92	; 0x5c
 8007806:	701a      	strb	r2, [r3, #0]
                    break;
 8007808:	e028      	b.n	800785c <print_string_ptr+0x1c0>
                case '\"':
                    *output_pointer = '\"';
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2222      	movs	r2, #34	; 0x22
 800780e:	701a      	strb	r2, [r3, #0]
                    break;
 8007810:	e024      	b.n	800785c <print_string_ptr+0x1c0>
                case '\b':
                    *output_pointer = 'b';
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	2262      	movs	r2, #98	; 0x62
 8007816:	701a      	strb	r2, [r3, #0]
                    break;
 8007818:	e020      	b.n	800785c <print_string_ptr+0x1c0>
                case '\f':
                    *output_pointer = 'f';
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	2266      	movs	r2, #102	; 0x66
 800781e:	701a      	strb	r2, [r3, #0]
                    break;
 8007820:	e01c      	b.n	800785c <print_string_ptr+0x1c0>
                case '\n':
                    *output_pointer = 'n';
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	226e      	movs	r2, #110	; 0x6e
 8007826:	701a      	strb	r2, [r3, #0]
                    break;
 8007828:	e018      	b.n	800785c <print_string_ptr+0x1c0>
                case '\r':
                    *output_pointer = 'r';
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2272      	movs	r2, #114	; 0x72
 800782e:	701a      	strb	r2, [r3, #0]
                    break;
 8007830:	e014      	b.n	800785c <print_string_ptr+0x1c0>
                case '\t':
                    *output_pointer = 't';
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2274      	movs	r2, #116	; 0x74
 8007836:	701a      	strb	r2, [r3, #0]
                    break;
 8007838:	e010      	b.n	800785c <print_string_ptr+0x1c0>
                default:
                    /* escape and print as unicode codepoint */
                    *output_pointer++ = 'u';
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	61ba      	str	r2, [r7, #24]
 8007840:	2275      	movs	r2, #117	; 0x75
 8007842:	701a      	strb	r2, [r3, #0]
                    htoa16(*input_pointer, output_pointer);
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	b29b      	uxth	r3, r3
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	0011      	movs	r1, r2
 800784e:	0018      	movs	r0, r3
 8007850:	f7ff fee8 	bl	8007624 <htoa16>
                    output_pointer += 4;
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	3304      	adds	r3, #4
 8007858:	61bb      	str	r3, [r7, #24]
                    break;
 800785a:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	3301      	adds	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	3301      	adds	r3, #1
 8007866:	61bb      	str	r3, [r7, #24]
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d19f      	bne.n	80077b0 <print_string_ptr+0x114>
            }
        }
    }
    output[output_length + 1] = '\"';
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3301      	adds	r3, #1
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	18d3      	adds	r3, r2, r3
 8007878:	2222      	movs	r2, #34	; 0x22
 800787a:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3302      	adds	r3, #2
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	18d3      	adds	r3, r2, r3
 8007884:	2200      	movs	r2, #0
 8007886:	701a      	strb	r2, [r3, #0]

    return true;
 8007888:	2301      	movs	r3, #1
}
 800788a:	0018      	movs	r0, r3
 800788c:	46bd      	mov	sp, r7
 800788e:	b008      	add	sp, #32
 8007890:	bd80      	pop	{r7, pc}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	08009a64 	.word	0x08009a64

08007898 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static Jbool print_string(const J * const item, printbuffer * const p)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	0011      	movs	r1, r2
 80078aa:	0018      	movs	r0, r3
 80078ac:	f7ff fef6 	bl	800769c <print_string_ptr>
 80078b0:	0003      	movs	r3, r0
}
 80078b2:	0018      	movs	r0, r3
 80078b4:	46bd      	mov	sp, r7
 80078b6:	b002      	add	sp, #8
 80078b8:	bd80      	pop	{r7, pc}

080078ba <buffer_skip_whitespace>:
static Jbool parse_object(J * const item, parse_buffer * const input_buffer);
static Jbool print_object(const J * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <buffer_skip_whitespace+0x16>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <buffer_skip_whitespace+0x24>
    {
        return NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e021      	b.n	8007918 <buffer_skip_whitespace+0x5e>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00d      	beq.n	8007900 <buffer_skip_whitespace+0x46>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d207      	bcs.n	8007900 <buffer_skip_whitespace+0x46>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	18d3      	adds	r3, r2, r3
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d9e9      	bls.n	80078d4 <buffer_skip_whitespace+0x1a>
    }

    if (buffer->offset == buffer->length)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d104      	bne.n	8007916 <buffer_skip_whitespace+0x5c>
    {
        buffer->offset--;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	1e5a      	subs	r2, r3, #1
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8007916:	687b      	ldr	r3, [r7, #4]
}
 8007918:	0018      	movs	r0, r3
 800791a:	46bd      	mov	sp, r7
 800791c:	b002      	add	sp, #8
 800791e:	bd80      	pop	{r7, pc}

08007920 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d007      	beq.n	800793e <skip_utf8_bom+0x1e>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <skip_utf8_bom+0x1e>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <skip_utf8_bom+0x22>
    {
        return NULL;
 800793e:	2300      	movs	r3, #0
 8007940:	e01b      	b.n	800797a <skip_utf8_bom+0x5a>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d017      	beq.n	8007978 <skip_utf8_bom+0x58>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	1d1a      	adds	r2, r3, #4
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	429a      	cmp	r2, r3
 8007954:	d210      	bcs.n	8007978 <skip_utf8_bom+0x58>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	18d3      	adds	r3, r2, r3
 8007960:	4908      	ldr	r1, [pc, #32]	; (8007984 <skip_utf8_bom+0x64>)
 8007962:	2203      	movs	r2, #3
 8007964:	0018      	movs	r0, r3
 8007966:	f001 ffe5 	bl	8009934 <strncmp>
 800796a:	1e03      	subs	r3, r0, #0
 800796c:	d104      	bne.n	8007978 <skip_utf8_bom+0x58>
    {
        buffer->offset += 3;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	1cda      	adds	r2, r3, #3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8007978:	687b      	ldr	r3, [r7, #4]
}
 800797a:	0018      	movs	r0, r3
 800797c:	46bd      	mov	sp, r7
 800797e:	b002      	add	sp, #8
 8007980:	bd80      	pop	{r7, pc}
 8007982:	46c0      	nop			; (mov r8, r8)
 8007984:	08009a68 	.word	0x08009a68

08007988 <JParseWithOpts>:

/* Parse an object - create a new root, and populate. */
N_CJSON_PUBLIC(J *) JParseWithOpts(const char *value, const char **return_parse_end, Jbool require_null_terminated)
{
 8007988:	b590      	push	{r4, r7, lr}
 800798a:	b08d      	sub	sp, #52	; 0x34
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
    parse_buffer buffer = { 0, 0, 0, 0 };
 8007994:	231c      	movs	r3, #28
 8007996:	18fb      	adds	r3, r7, r3
 8007998:	0018      	movs	r0, r3
 800799a:	2310      	movs	r3, #16
 800799c:	001a      	movs	r2, r3
 800799e:	2100      	movs	r1, #0
 80079a0:	f001 fef7 	bl	8009792 <memset>
    J *item = NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* reset error position */
    global_error.json = NULL;
 80079a8:	4b4e      	ldr	r3, [pc, #312]	; (8007ae4 <JParseWithOpts+0x15c>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80079ae:	4b4d      	ldr	r3, [pc, #308]	; (8007ae4 <JParseWithOpts+0x15c>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	605a      	str	r2, [r3, #4]

    if (value == NULL)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d04c      	beq.n	8007a54 <JParseWithOpts+0xcc>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80079ba:	241c      	movs	r4, #28
 80079bc:	193b      	adds	r3, r7, r4
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	601a      	str	r2, [r3, #0]
    buffer.length = strlen((const char*)value) + sizeof("");
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	0018      	movs	r0, r3
 80079c6:	f7f8 fba9 	bl	800011c <strlen>
 80079ca:	0003      	movs	r3, r0
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	193b      	adds	r3, r7, r4
 80079d0:	605a      	str	r2, [r3, #4]
    buffer.offset = 0;
 80079d2:	193b      	adds	r3, r7, r4
 80079d4:	2200      	movs	r2, #0
 80079d6:	609a      	str	r2, [r3, #8]

    item = JNew_Item();
 80079d8:	f7ff f956 	bl	8006c88 <JNew_Item>
 80079dc:	0003      	movs	r3, r0
 80079de:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (item == NULL) /* memory fail */
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d038      	beq.n	8007a58 <JParseWithOpts+0xd0>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80079e6:	231c      	movs	r3, #28
 80079e8:	18fb      	adds	r3, r7, r3
 80079ea:	0018      	movs	r0, r3
 80079ec:	f7ff ff98 	bl	8007920 <skip_utf8_bom>
 80079f0:	0003      	movs	r3, r0
 80079f2:	0018      	movs	r0, r3
 80079f4:	f7ff ff61 	bl	80078ba <buffer_skip_whitespace>
 80079f8:	0002      	movs	r2, r0
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	0011      	movs	r1, r2
 80079fe:	0018      	movs	r0, r3
 8007a00:	f000 f906 	bl	8007c10 <parse_value>
 8007a04:	1e03      	subs	r3, r0, #0
 8007a06:	d029      	beq.n	8007a5c <JParseWithOpts+0xd4>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d015      	beq.n	8007a3a <JParseWithOpts+0xb2>
    {
        buffer_skip_whitespace(&buffer);
 8007a0e:	211c      	movs	r1, #28
 8007a10:	000c      	movs	r4, r1
 8007a12:	187b      	adds	r3, r7, r1
 8007a14:	0018      	movs	r0, r3
 8007a16:	f7ff ff50 	bl	80078ba <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8007a1a:	0021      	movs	r1, r4
 8007a1c:	187b      	adds	r3, r7, r1
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	187b      	adds	r3, r7, r1
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d21b      	bcs.n	8007a60 <JParseWithOpts+0xd8>
 8007a28:	211c      	movs	r1, #28
 8007a2a:	187b      	adds	r3, r7, r1
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	187b      	adds	r3, r7, r1
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	18d3      	adds	r3, r2, r3
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d112      	bne.n	8007a60 <JParseWithOpts+0xd8>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d007      	beq.n	8007a50 <JParseWithOpts+0xc8>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8007a40:	211c      	movs	r1, #28
 8007a42:	187b      	adds	r3, r7, r1
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	187b      	adds	r3, r7, r1
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	18d2      	adds	r2, r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	601a      	str	r2, [r3, #0]
    }

    return item;
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	e042      	b.n	8007ada <JParseWithOpts+0x152>
        goto fail;
 8007a54:	46c0      	nop			; (mov r8, r8)
 8007a56:	e004      	b.n	8007a62 <JParseWithOpts+0xda>
        goto fail;
 8007a58:	46c0      	nop			; (mov r8, r8)
 8007a5a:	e002      	b.n	8007a62 <JParseWithOpts+0xda>
        goto fail;
 8007a5c:	46c0      	nop			; (mov r8, r8)
 8007a5e:	e000      	b.n	8007a62 <JParseWithOpts+0xda>

fail:
 8007a60:	46c0      	nop			; (mov r8, r8)
    if (item != NULL)
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <JParseWithOpts+0xe8>
    {
        JDelete(item);
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f7ff f922 	bl	8006cb4 <JDelete>
    }

    if (value != NULL)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d030      	beq.n	8007ad8 <JParseWithOpts+0x150>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8007a76:	2114      	movs	r1, #20
 8007a78:	187b      	adds	r3, r7, r1
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	601a      	str	r2, [r3, #0]
        local_error.position = 0;
 8007a7e:	187b      	adds	r3, r7, r1
 8007a80:	2200      	movs	r2, #0
 8007a82:	605a      	str	r2, [r3, #4]

        if (buffer.offset < buffer.length)
 8007a84:	211c      	movs	r1, #28
 8007a86:	187b      	adds	r3, r7, r1
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	187b      	adds	r3, r7, r1
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d206      	bcs.n	8007aa0 <JParseWithOpts+0x118>
        {
            local_error.position = buffer.offset;
 8007a92:	231c      	movs	r3, #28
 8007a94:	18fb      	adds	r3, r7, r3
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	2314      	movs	r3, #20
 8007a9a:	18fb      	adds	r3, r7, r3
 8007a9c:	605a      	str	r2, [r3, #4]
 8007a9e:	e00b      	b.n	8007ab8 <JParseWithOpts+0x130>
        }
        else if (buffer.length > 0)
 8007aa0:	231c      	movs	r3, #28
 8007aa2:	18fb      	adds	r3, r7, r3
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d006      	beq.n	8007ab8 <JParseWithOpts+0x130>
        {
            local_error.position = buffer.length - 1;
 8007aaa:	231c      	movs	r3, #28
 8007aac:	18fb      	adds	r3, r7, r3
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	1e5a      	subs	r2, r3, #1
 8007ab2:	2314      	movs	r3, #20
 8007ab4:	18fb      	adds	r3, r7, r3
 8007ab6:	605a      	str	r2, [r3, #4]
        }

        if (return_parse_end != NULL)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <JParseWithOpts+0x146>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8007abe:	2114      	movs	r1, #20
 8007ac0:	187b      	adds	r3, r7, r1
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	187b      	adds	r3, r7, r1
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	18d2      	adds	r2, r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8007ace:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <JParseWithOpts+0x15c>)
 8007ad0:	2214      	movs	r2, #20
 8007ad2:	18ba      	adds	r2, r7, r2
 8007ad4:	ca03      	ldmia	r2!, {r0, r1}
 8007ad6:	c303      	stmia	r3!, {r0, r1}
    }

    return NULL;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	0018      	movs	r0, r3
 8007adc:	46bd      	mov	sp, r7
 8007ade:	b00d      	add	sp, #52	; 0x34
 8007ae0:	bd90      	pop	{r4, r7, pc}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	20000470 	.word	0x20000470

08007ae8 <JParse>:

/* Default options for JParse */
N_CJSON_PUBLIC(J *) JParse(const char *value)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
    return JParseWithOpts(value, 0, 0);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	2100      	movs	r1, #0
 8007af6:	0018      	movs	r0, r3
 8007af8:	f7ff ff46 	bl	8007988 <JParseWithOpts>
 8007afc:	0003      	movs	r3, r0
}
 8007afe:	0018      	movs	r0, r3
 8007b00:	46bd      	mov	sp, r7
 8007b02:	b002      	add	sp, #8
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <print>:

#define cjson_min(a, b) ((a < b) ? a : b)

static unsigned char *print(const J * const item, Jbool format)
{
 8007b08:	b590      	push	{r4, r7, lr}
 8007b0a:	b08b      	sub	sp, #44	; 0x2c
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24

    memset(buffer, 0, sizeof(buffer));
 8007b16:	240c      	movs	r4, #12
 8007b18:	193b      	adds	r3, r7, r4
 8007b1a:	2218      	movs	r2, #24
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f001 fe37 	bl	8009792 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) _Malloc(default_buffer_size);
 8007b24:	4b32      	ldr	r3, [pc, #200]	; (8007bf0 <print+0xe8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	0018      	movs	r0, r3
 8007b2a:	f001 fa15 	bl	8008f58 <NoteFnMalloc>
 8007b2e:	0002      	movs	r2, r0
 8007b30:	193b      	adds	r3, r7, r4
 8007b32:	601a      	str	r2, [r3, #0]
    buffer->length = default_buffer_size;
 8007b34:	4b2e      	ldr	r3, [pc, #184]	; (8007bf0 <print+0xe8>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	193b      	adds	r3, r7, r4
 8007b3a:	605a      	str	r2, [r3, #4]
    buffer->format = format;
 8007b3c:	193b      	adds	r3, r7, r4
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	615a      	str	r2, [r3, #20]
    if (buffer->buffer == NULL)
 8007b42:	193b      	adds	r3, r7, r4
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d035      	beq.n	8007bb6 <print+0xae>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8007b4a:	230c      	movs	r3, #12
 8007b4c:	18fa      	adds	r2, r7, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	0011      	movs	r1, r2
 8007b52:	0018      	movs	r0, r3
 8007b54:	f000 f94c 	bl	8007df0 <print_value>
 8007b58:	1e03      	subs	r3, r0, #0
 8007b5a:	d02e      	beq.n	8007bba <print+0xb2>
    {
        goto fail;
    }
    update_offset(buffer);
 8007b5c:	240c      	movs	r4, #12
 8007b5e:	193b      	adds	r3, r7, r4
 8007b60:	0018      	movs	r0, r3
 8007b62:	f7ff fa29 	bl	8006fb8 <update_offset>

    /* copy the JSON over to a new buffer */
    printed = (unsigned char*) _Malloc(buffer->offset + 1);
 8007b66:	193b      	adds	r3, r7, r4
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	f001 f9f3 	bl	8008f58 <NoteFnMalloc>
 8007b72:	0003      	movs	r3, r0
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24
    if (printed == NULL)
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d020      	beq.n	8007bbe <print+0xb6>
    {
        goto fail;
    }
    memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8007b7c:	200c      	movs	r0, #12
 8007b7e:	183b      	adds	r3, r7, r0
 8007b80:	6819      	ldr	r1, [r3, #0]
 8007b82:	183b      	adds	r3, r7, r0
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	183b      	adds	r3, r7, r0
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d900      	bls.n	8007b92 <print+0x8a>
 8007b90:	001a      	movs	r2, r3
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	0018      	movs	r0, r3
 8007b96:	f001 fdf3 	bl	8009780 <memcpy>
    printed[buffer->offset] = '\0'; /* just to be sure */
 8007b9a:	210c      	movs	r1, #12
 8007b9c:	187b      	adds	r3, r7, r1
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba2:	18d3      	adds	r3, r2, r3
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]

    /* free the buffer */
    _Free(buffer->buffer);
 8007ba8:	187b      	adds	r3, r7, r1
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	0018      	movs	r0, r3
 8007bae:	f001 f9e9 	bl	8008f84 <NoteFnFree>

    return printed;
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	e017      	b.n	8007be6 <print+0xde>
        goto fail;
 8007bb6:	46c0      	nop			; (mov r8, r8)
 8007bb8:	e002      	b.n	8007bc0 <print+0xb8>
        goto fail;
 8007bba:	46c0      	nop			; (mov r8, r8)
 8007bbc:	e000      	b.n	8007bc0 <print+0xb8>
        goto fail;
 8007bbe:	46c0      	nop			; (mov r8, r8)

fail:
    if (buffer->buffer != NULL)
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	18fb      	adds	r3, r7, r3
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d005      	beq.n	8007bd6 <print+0xce>
    {
        _Free(buffer->buffer);
 8007bca:	230c      	movs	r3, #12
 8007bcc:	18fb      	adds	r3, r7, r3
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f001 f9d7 	bl	8008f84 <NoteFnFree>
    }

    if (printed != NULL)
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <print+0xdc>
    {
        _Free(printed);
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	0018      	movs	r0, r3
 8007be0:	f001 f9d0 	bl	8008f84 <NoteFnFree>
    }

    return NULL;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	0018      	movs	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b00b      	add	sp, #44	; 0x2c
 8007bec:	bd90      	pop	{r4, r7, pc}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	08009fe4 	.word	0x08009fe4

08007bf4 <JPrintUnformatted>:
{
    return (char*)print(item, true);
}

N_CJSON_PUBLIC(char *) JPrintUnformatted(const J *item)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2100      	movs	r1, #0
 8007c00:	0018      	movs	r0, r3
 8007c02:	f7ff ff81 	bl	8007b08 <print>
 8007c06:	0003      	movs	r3, r0
}
 8007c08:	0018      	movs	r0, r3
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b002      	add	sp, #8
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static Jbool parse_value(J * const item, parse_buffer * const input_buffer)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <parse_value+0x18>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <parse_value+0x1c>
    {
        return false; /* no input */
 8007c28:	2300      	movs	r3, #0
 8007c2a:	e0d7      	b.n	8007ddc <parse_value+0x1cc>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d01c      	beq.n	8007c6c <parse_value+0x5c>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	1d1a      	adds	r2, r3, #4
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d815      	bhi.n	8007c6c <parse_value+0x5c>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	18d3      	adds	r3, r2, r3
 8007c4a:	4966      	ldr	r1, [pc, #408]	; (8007de4 <parse_value+0x1d4>)
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	0018      	movs	r0, r3
 8007c50:	f001 fe70 	bl	8009934 <strncmp>
 8007c54:	1e03      	subs	r3, r0, #0
 8007c56:	d109      	bne.n	8007c6c <parse_value+0x5c>
    {
        item->type = JNULL;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	1d1a      	adds	r2, r3, #4
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	609a      	str	r2, [r3, #8]
        return true;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e0b7      	b.n	8007ddc <parse_value+0x1cc>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d01c      	beq.n	8007cac <parse_value+0x9c>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	1d5a      	adds	r2, r3, #5
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d815      	bhi.n	8007cac <parse_value+0x9c>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	18d3      	adds	r3, r2, r3
 8007c8a:	4957      	ldr	r1, [pc, #348]	; (8007de8 <parse_value+0x1d8>)
 8007c8c:	2205      	movs	r2, #5
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f001 fe50 	bl	8009934 <strncmp>
 8007c94:	1e03      	subs	r3, r0, #0
 8007c96:	d109      	bne.n	8007cac <parse_value+0x9c>
    {
        item->type = JFalse;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	1d5a      	adds	r2, r3, #5
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	609a      	str	r2, [r3, #8]
        return true;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e097      	b.n	8007ddc <parse_value+0x1cc>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d01f      	beq.n	8007cf2 <parse_value+0xe2>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	1d1a      	adds	r2, r3, #4
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d818      	bhi.n	8007cf2 <parse_value+0xe2>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	18d3      	adds	r3, r2, r3
 8007cca:	4948      	ldr	r1, [pc, #288]	; (8007dec <parse_value+0x1dc>)
 8007ccc:	2204      	movs	r2, #4
 8007cce:	0018      	movs	r0, r3
 8007cd0:	f001 fe30 	bl	8009934 <strncmp>
 8007cd4:	1e03      	subs	r3, r0, #0
 8007cd6:	d10c      	bne.n	8007cf2 <parse_value+0xe2>
    {
        item->type = JTrue;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	1d1a      	adds	r2, r3, #4
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	609a      	str	r2, [r3, #8]
        return true;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e074      	b.n	8007ddc <parse_value+0x1cc>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d015      	beq.n	8007d24 <parse_value+0x114>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d20f      	bcs.n	8007d24 <parse_value+0x114>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	18d3      	adds	r3, r2, r3
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b22      	cmp	r3, #34	; 0x22
 8007d12:	d107      	bne.n	8007d24 <parse_value+0x114>
    {
        return parse_string(item, input_buffer);
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	0011      	movs	r1, r2
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	f7ff fb72 	bl	8007404 <parse_string>
 8007d20:	0003      	movs	r3, r0
 8007d22:	e05b      	b.n	8007ddc <parse_value+0x1cc>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d025      	beq.n	8007d76 <parse_value+0x166>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d21f      	bcs.n	8007d76 <parse_value+0x166>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	18d3      	adds	r3, r2, r3
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b2d      	cmp	r3, #45	; 0x2d
 8007d44:	d00f      	beq.n	8007d66 <parse_value+0x156>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	18d3      	adds	r3, r2, r3
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b2f      	cmp	r3, #47	; 0x2f
 8007d54:	d90f      	bls.n	8007d76 <parse_value+0x166>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	18d3      	adds	r3, r2, r3
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b39      	cmp	r3, #57	; 0x39
 8007d64:	d807      	bhi.n	8007d76 <parse_value+0x166>
    {
        return parse_number(item, input_buffer);
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	0011      	movs	r1, r2
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	f7fe ffeb 	bl	8006d48 <parse_number>
 8007d72:	0003      	movs	r3, r0
 8007d74:	e032      	b.n	8007ddc <parse_value+0x1cc>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d015      	beq.n	8007da8 <parse_value+0x198>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d20f      	bcs.n	8007da8 <parse_value+0x198>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	18d3      	adds	r3, r2, r3
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b5b      	cmp	r3, #91	; 0x5b
 8007d96:	d107      	bne.n	8007da8 <parse_value+0x198>
    {
        return parse_array(item, input_buffer);
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	0011      	movs	r1, r2
 8007d9e:	0018      	movs	r0, r3
 8007da0:	f000 f8e4 	bl	8007f6c <parse_array>
 8007da4:	0003      	movs	r3, r0
 8007da6:	e019      	b.n	8007ddc <parse_value+0x1cc>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d015      	beq.n	8007dda <parse_value+0x1ca>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	689a      	ldr	r2, [r3, #8]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d20f      	bcs.n	8007dda <parse_value+0x1ca>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	18d3      	adds	r3, r2, r3
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b7b      	cmp	r3, #123	; 0x7b
 8007dc8:	d107      	bne.n	8007dda <parse_value+0x1ca>
    {
        return parse_object(item, input_buffer);
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	0011      	movs	r1, r2
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f000 fa1d 	bl	8008210 <parse_object>
 8007dd6:	0003      	movs	r3, r0
 8007dd8:	e000      	b.n	8007ddc <parse_value+0x1cc>
    }

    return false;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	0018      	movs	r0, r3
 8007dde:	46bd      	mov	sp, r7
 8007de0:	b002      	add	sp, #8
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	08009a5c 	.word	0x08009a5c
 8007de8:	08009a6c 	.word	0x08009a6c
 8007dec:	08009a74 	.word	0x08009a74

08007df0 <print_value>:

/* Render a value to text. */
static Jbool print_value(const J * const item, printbuffer * const output_buffer)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <print_value+0x1a>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <print_value+0x1e>
    {
        return false;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e0a4      	b.n	8007f58 <print_value+0x168>
    }

    switch ((item->type) & 0xFF)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	22ff      	movs	r2, #255	; 0xff
 8007e14:	4013      	ands	r3, r2
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d057      	beq.n	8007eca <print_value+0xda>
 8007e1a:	dc06      	bgt.n	8007e2a <print_value+0x3a>
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d03e      	beq.n	8007e9e <print_value+0xae>
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d010      	beq.n	8007e46 <print_value+0x56>
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d024      	beq.n	8007e72 <print_value+0x82>
 8007e28:	e095      	b.n	8007f56 <print_value+0x166>
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	d100      	bne.n	8007e30 <print_value+0x40>
 8007e2e:	e082      	b.n	8007f36 <print_value+0x146>
 8007e30:	dc03      	bgt.n	8007e3a <print_value+0x4a>
 8007e32:	2b10      	cmp	r3, #16
 8007e34:	d100      	bne.n	8007e38 <print_value+0x48>
 8007e36:	e076      	b.n	8007f26 <print_value+0x136>
 8007e38:	e08d      	b.n	8007f56 <print_value+0x166>
 8007e3a:	2b40      	cmp	r3, #64	; 0x40
 8007e3c:	d100      	bne.n	8007e40 <print_value+0x50>
 8007e3e:	e082      	b.n	8007f46 <print_value+0x156>
 8007e40:	2b80      	cmp	r3, #128	; 0x80
 8007e42:	d04a      	beq.n	8007eda <print_value+0xea>
 8007e44:	e087      	b.n	8007f56 <print_value+0x166>
    {
        case JNULL:
            output = ensure(output_buffer, 5);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2105      	movs	r1, #5
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	f7ff f832 	bl	8006eb4 <ensure>
 8007e50:	0003      	movs	r3, r0
 8007e52:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <print_value+0x6e>
            {
                return false;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	e07c      	b.n	8007f58 <print_value+0x168>
            }
            strcpy((char*)output, "null");
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4b3f      	ldr	r3, [pc, #252]	; (8007f60 <print_value+0x170>)
 8007e62:	0010      	movs	r0, r2
 8007e64:	0019      	movs	r1, r3
 8007e66:	2305      	movs	r3, #5
 8007e68:	001a      	movs	r2, r3
 8007e6a:	f001 fc89 	bl	8009780 <memcpy>
            return true;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e072      	b.n	8007f58 <print_value+0x168>

        case JFalse:
            output = ensure(output_buffer, 6);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2106      	movs	r1, #6
 8007e76:	0018      	movs	r0, r3
 8007e78:	f7ff f81c 	bl	8006eb4 <ensure>
 8007e7c:	0003      	movs	r3, r0
 8007e7e:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <print_value+0x9a>
            {
                return false;
 8007e86:	2300      	movs	r3, #0
 8007e88:	e066      	b.n	8007f58 <print_value+0x168>
            }
            strcpy((char*)output, "false");
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4b35      	ldr	r3, [pc, #212]	; (8007f64 <print_value+0x174>)
 8007e8e:	0010      	movs	r0, r2
 8007e90:	0019      	movs	r1, r3
 8007e92:	2306      	movs	r3, #6
 8007e94:	001a      	movs	r2, r3
 8007e96:	f001 fc73 	bl	8009780 <memcpy>
            return true;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e05c      	b.n	8007f58 <print_value+0x168>

        case JTrue:
            output = ensure(output_buffer, 5);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2105      	movs	r1, #5
 8007ea2:	0018      	movs	r0, r3
 8007ea4:	f7ff f806 	bl	8006eb4 <ensure>
 8007ea8:	0003      	movs	r3, r0
 8007eaa:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <print_value+0xc6>
            {
                return false;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e050      	b.n	8007f58 <print_value+0x168>
            }
            strcpy((char*)output, "true");
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4b2b      	ldr	r3, [pc, #172]	; (8007f68 <print_value+0x178>)
 8007eba:	0010      	movs	r0, r2
 8007ebc:	0019      	movs	r1, r3
 8007ebe:	2305      	movs	r3, #5
 8007ec0:	001a      	movs	r2, r3
 8007ec2:	f001 fc5d 	bl	8009780 <memcpy>
            return true;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e046      	b.n	8007f58 <print_value+0x168>

        case JNumber:
            return print_number(item, output_buffer);
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	0011      	movs	r1, r2
 8007ed0:	0018      	movs	r0, r3
 8007ed2:	f7ff f893 	bl	8006ffc <print_number>
 8007ed6:	0003      	movs	r3, r0
 8007ed8:	e03e      	b.n	8007f58 <print_value+0x168>

        case JRaw:
        {
            size_t raw_length = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <print_value+0xfa>
            {
                return false;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e036      	b.n	8007f58 <print_value+0x168>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	0018      	movs	r0, r3
 8007ef0:	f7f8 f914 	bl	800011c <strlen>
 8007ef4:	0003      	movs	r3, r0
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	0011      	movs	r1, r2
 8007f00:	0018      	movs	r0, r3
 8007f02:	f7fe ffd7 	bl	8006eb4 <ensure>
 8007f06:	0003      	movs	r3, r0
 8007f08:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <print_value+0x124>
            {
                return false;
 8007f10:	2300      	movs	r3, #0
 8007f12:	e021      	b.n	8007f58 <print_value+0x168>
            }
            memcpy(output, item->valuestring, raw_length);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6919      	ldr	r1, [r3, #16]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	f001 fc2f 	bl	8009780 <memcpy>
            return true;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e018      	b.n	8007f58 <print_value+0x168>
        }

        case JString:
            return print_string(item, output_buffer);
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	0011      	movs	r1, r2
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	f7ff fcb3 	bl	8007898 <print_string>
 8007f32:	0003      	movs	r3, r0
 8007f34:	e010      	b.n	8007f58 <print_value+0x168>

        case JArray:
            return print_array(item, output_buffer);
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	0011      	movs	r1, r2
 8007f3c:	0018      	movs	r0, r3
 8007f3e:	f000 f8d9 	bl	80080f4 <print_array>
 8007f42:	0003      	movs	r3, r0
 8007f44:	e008      	b.n	8007f58 <print_value+0x168>

        case JObject:
            return print_object(item, output_buffer);
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	0011      	movs	r1, r2
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f000 fa5d 	bl	800840c <print_object>
 8007f52:	0003      	movs	r3, r0
 8007f54:	e000      	b.n	8007f58 <print_value+0x168>

        default:
            return false;
 8007f56:	2300      	movs	r3, #0
    }
}
 8007f58:	0018      	movs	r0, r3
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	b004      	add	sp, #16
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	08009a5c 	.word	0x08009a5c
 8007f64:	08009a6c 	.word	0x08009a6c
 8007f68:	08009a74 	.word	0x08009a74

08007f6c <parse_array>:

/* Build an array from input text. */
static Jbool parse_array(J * const item, parse_buffer * const input_buffer)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* head of the linked list */
 8007f76:	2300      	movs	r3, #0
 8007f78:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	4a5b      	ldr	r2, [pc, #364]	; (80080f0 <parse_array+0x184>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d901      	bls.n	8007f8c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8007f88:	2300      	movs	r3, #0
 8007f8a:	e0ac      	b.n	80080e6 <parse_array+0x17a>
    }
    input_buffer->depth++;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	18d3      	adds	r3, r2, r3
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b5b      	cmp	r3, #91	; 0x5b
 8007fa4:	d000      	beq.n	8007fa8 <parse_array+0x3c>
 8007fa6:	e08f      	b.n	80080c8 <parse_array+0x15c>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	0018      	movs	r0, r3
 8007fb6:	f7ff fc80 	bl	80078ba <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00d      	beq.n	8007fdc <parse_array+0x70>
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d207      	bcs.n	8007fdc <parse_array+0x70>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	18d3      	adds	r3, r2, r3
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b5d      	cmp	r3, #93	; 0x5d
 8007fda:	d062      	beq.n	80080a2 <parse_array+0x136>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d005      	beq.n	8007fee <parse_array+0x82>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	689a      	ldr	r2, [r3, #8]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d305      	bcc.n	8007ffa <parse_array+0x8e>
    {
        input_buffer->offset--;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	1e5a      	subs	r2, r3, #1
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	609a      	str	r2, [r3, #8]
        goto fail;
 8007ff8:	e06d      	b.n	80080d6 <parse_array+0x16a>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	1e5a      	subs	r2, r3, #1
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item();
 8008004:	f7fe fe40 	bl	8006c88 <JNew_Item>
 8008008:	0003      	movs	r3, r0
 800800a:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d05c      	beq.n	80080cc <parse_array+0x160>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d104      	bne.n	8008022 <parse_array+0xb6>
        {
            /* start the linked list */
            current_item = head = new_item;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	e007      	b.n	8008032 <parse_array+0xc6>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	0018      	movs	r0, r3
 8008040:	f7ff fc3b 	bl	80078ba <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	0011      	movs	r1, r2
 800804a:	0018      	movs	r0, r3
 800804c:	f7ff fde0 	bl	8007c10 <parse_value>
 8008050:	1e03      	subs	r3, r0, #0
 8008052:	d03d      	beq.n	80080d0 <parse_array+0x164>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	0018      	movs	r0, r3
 8008058:	f7ff fc2f 	bl	80078ba <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00d      	beq.n	800807e <parse_array+0x112>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	429a      	cmp	r2, r3
 800806c:	d207      	bcs.n	800807e <parse_array+0x112>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	18d3      	adds	r3, r2, r3
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b2c      	cmp	r3, #44	; 0x2c
 800807c:	d0c2      	beq.n	8008004 <parse_array+0x98>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d027      	beq.n	80080d4 <parse_array+0x168>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	429a      	cmp	r2, r3
 800808e:	d221      	bcs.n	80080d4 <parse_array+0x168>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	18d3      	adds	r3, r2, r3
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b5d      	cmp	r3, #93	; 0x5d
 800809e:	d119      	bne.n	80080d4 <parse_array+0x168>
    {
        goto fail; /* expected end of array */
    }

success:
 80080a0:	e000      	b.n	80080a4 <parse_array+0x138>
        goto success;
 80080a2:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	1e5a      	subs	r2, r3, #1
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	60da      	str	r2, [r3, #12]

    item->type = JArray;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2220      	movs	r2, #32
 80080b2:	60da      	str	r2, [r3, #12]
    item->child = head;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	609a      	str	r2, [r3, #8]

    return true;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e00e      	b.n	80080e6 <parse_array+0x17a>
        goto fail;
 80080c8:	46c0      	nop			; (mov r8, r8)
 80080ca:	e004      	b.n	80080d6 <parse_array+0x16a>
            goto fail; /* allocation failure */
 80080cc:	46c0      	nop			; (mov r8, r8)
 80080ce:	e002      	b.n	80080d6 <parse_array+0x16a>
            goto fail; /* failed to parse value */
 80080d0:	46c0      	nop			; (mov r8, r8)
 80080d2:	e000      	b.n	80080d6 <parse_array+0x16a>

fail:
 80080d4:	46c0      	nop			; (mov r8, r8)
    if (head != NULL)
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <parse_array+0x178>
    {
        JDelete(head);
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	0018      	movs	r0, r3
 80080e0:	f7fe fde8 	bl	8006cb4 <JDelete>
    }

    return false;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	0018      	movs	r0, r3
 80080e8:	46bd      	mov	sp, r7
 80080ea:	b006      	add	sp, #24
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	000003e7 	.word	0x000003e7

080080f4 <print_array>:

/* Render an array to text */
static Jbool print_array(const J * const item, printbuffer * const output_buffer)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
    J *current_element = item->child;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <print_array+0x22>
    {
        return false;
 8008112:	2300      	movs	r3, #0
 8008114:	e078      	b.n	8008208 <print_array+0x114>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2101      	movs	r1, #1
 800811a:	0018      	movs	r0, r3
 800811c:	f7fe feca 	bl	8006eb4 <ensure>
 8008120:	0003      	movs	r3, r0
 8008122:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <print_array+0x3a>
    {
        return false;
 800812a:	2300      	movs	r3, #0
 800812c:	e06c      	b.n	8008208 <print_array+0x114>
    }

    *output_pointer = '[';
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	225b      	movs	r2, #91	; 0x5b
 8008132:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8008148:	e041      	b.n	80081ce <print_array+0xda>
    {
        if (!print_value(current_element, output_buffer))
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	0011      	movs	r1, r2
 8008150:	0018      	movs	r0, r3
 8008152:	f7ff fe4d 	bl	8007df0 <print_value>
 8008156:	1e03      	subs	r3, r0, #0
 8008158:	d101      	bne.n	800815e <print_array+0x6a>
        {
            return false;
 800815a:	2300      	movs	r3, #0
 800815c:	e054      	b.n	8008208 <print_array+0x114>
        }
        update_offset(output_buffer);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	0018      	movs	r0, r3
 8008162:	f7fe ff29 	bl	8006fb8 <update_offset>
        if (current_element->next)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d02c      	beq.n	80081c8 <print_array+0xd4>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <print_array+0x86>
 8008176:	2302      	movs	r3, #2
 8008178:	e000      	b.n	800817c <print_array+0x88>
 800817a:	2301      	movs	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	0011      	movs	r1, r2
 8008186:	0018      	movs	r0, r3
 8008188:	f7fe fe94 	bl	8006eb4 <ensure>
 800818c:	0003      	movs	r3, r0
 800818e:	617b      	str	r3, [r7, #20]
            if (output_pointer == NULL)
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <print_array+0xa6>
            {
                return false;
 8008196:	2300      	movs	r3, #0
 8008198:	e036      	b.n	8008208 <print_array+0x114>
            }
            *output_pointer++ = ',';
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	617a      	str	r2, [r7, #20]
 80081a0:	222c      	movs	r2, #44	; 0x2c
 80081a2:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d004      	beq.n	80081b6 <print_array+0xc2>
            {
                *output_pointer++ = ' ';
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	617a      	str	r2, [r7, #20]
 80081b2:	2220      	movs	r2, #32
 80081b4:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2200      	movs	r2, #0
 80081ba:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	18d2      	adds	r2, r2, r3
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1ba      	bne.n	800814a <print_array+0x56>
    }

    output_pointer = ensure(output_buffer, 2);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2102      	movs	r1, #2
 80081d8:	0018      	movs	r0, r3
 80081da:	f7fe fe6b 	bl	8006eb4 <ensure>
 80081de:	0003      	movs	r3, r0
 80081e0:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <print_array+0xf8>
    {
        return false;
 80081e8:	2300      	movs	r3, #0
 80081ea:	e00d      	b.n	8008208 <print_array+0x114>
    }
    *output_pointer++ = ']';
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	617a      	str	r2, [r7, #20]
 80081f2:	225d      	movs	r2, #93	; 0x5d
 80081f4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2200      	movs	r2, #0
 80081fa:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	1e5a      	subs	r2, r3, #1
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	60da      	str	r2, [r3, #12]

    return true;
 8008206:	2301      	movs	r3, #1
}
 8008208:	0018      	movs	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	b006      	add	sp, #24
 800820e:	bd80      	pop	{r7, pc}

08008210 <parse_object>:

/* Build an object from the text. */
static Jbool parse_object(J * const item, parse_buffer * const input_buffer)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* linked list head */
 800821a:	2300      	movs	r3, #0
 800821c:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 800821e:	2300      	movs	r3, #0
 8008220:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	4a78      	ldr	r2, [pc, #480]	; (8008408 <parse_object+0x1f8>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d901      	bls.n	8008230 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800822c:	2300      	movs	r3, #0
 800822e:	e0e7      	b.n	8008400 <parse_object+0x1f0>
    }
    input_buffer->depth++;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d100      	bne.n	8008242 <parse_object+0x32>
 8008240:	e0cf      	b.n	80083e2 <parse_object+0x1d2>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d300      	bcc.n	8008250 <parse_object+0x40>
 800824e:	e0c8      	b.n	80083e2 <parse_object+0x1d2>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	18d3      	adds	r3, r2, r3
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b7b      	cmp	r3, #123	; 0x7b
 800825e:	d000      	beq.n	8008262 <parse_object+0x52>
 8008260:	e0bf      	b.n	80083e2 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	0018      	movs	r0, r3
 8008270:	f7ff fb23 	bl	80078ba <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <parse_object+0x88>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	689a      	ldr	r2, [r3, #8]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	429a      	cmp	r2, r3
 8008284:	d208      	bcs.n	8008298 <parse_object+0x88>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	18d3      	adds	r3, r2, r3
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b7d      	cmp	r3, #125	; 0x7d
 8008294:	d100      	bne.n	8008298 <parse_object+0x88>
 8008296:	e091      	b.n	80083bc <parse_object+0x1ac>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d005      	beq.n	80082aa <parse_object+0x9a>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	689a      	ldr	r2, [r3, #8]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d305      	bcc.n	80082b6 <parse_object+0xa6>
    {
        input_buffer->offset--;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	1e5a      	subs	r2, r3, #1
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	609a      	str	r2, [r3, #8]
        goto fail;
 80082b4:	e09c      	b.n	80083f0 <parse_object+0x1e0>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	1e5a      	subs	r2, r3, #1
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item();
 80082c0:	f7fe fce2 	bl	8006c88 <JNew_Item>
 80082c4:	0003      	movs	r3, r0
 80082c6:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d100      	bne.n	80082d0 <parse_object+0xc0>
 80082ce:	e08a      	b.n	80083e6 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <parse_object+0xd0>
        {
            /* start the linked list */
            current_item = head = new_item;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	e007      	b.n	80082f0 <parse_object+0xe0>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	0018      	movs	r0, r3
 80082fe:	f7ff fadc 	bl	80078ba <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	0011      	movs	r1, r2
 8008308:	0018      	movs	r0, r3
 800830a:	f7ff f87b 	bl	8007404 <parse_string>
 800830e:	1e03      	subs	r3, r0, #0
 8008310:	d100      	bne.n	8008314 <parse_object+0x104>
 8008312:	e06a      	b.n	80083ea <parse_object+0x1da>
        {
            goto fail; /* faile to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	0018      	movs	r0, r3
 8008318:	f7ff facf 	bl	80078ba <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2200      	movs	r2, #0
 8008328:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d058      	beq.n	80083e2 <parse_object+0x1d2>
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	429a      	cmp	r2, r3
 800833a:	d252      	bcs.n	80083e2 <parse_object+0x1d2>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	18d3      	adds	r3, r2, r3
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b3a      	cmp	r3, #58	; 0x3a
 800834a:	d14a      	bne.n	80083e2 <parse_object+0x1d2>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	0018      	movs	r0, r3
 800835a:	f7ff faae 	bl	80078ba <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	0011      	movs	r1, r2
 8008364:	0018      	movs	r0, r3
 8008366:	f7ff fc53 	bl	8007c10 <parse_value>
 800836a:	1e03      	subs	r3, r0, #0
 800836c:	d03f      	beq.n	80083ee <parse_object+0x1de>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	0018      	movs	r0, r3
 8008372:	f7ff faa2 	bl	80078ba <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00d      	beq.n	8008398 <parse_object+0x188>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	429a      	cmp	r2, r3
 8008386:	d207      	bcs.n	8008398 <parse_object+0x188>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	18d3      	adds	r3, r2, r3
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b2c      	cmp	r3, #44	; 0x2c
 8008396:	d093      	beq.n	80082c0 <parse_object+0xb0>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d021      	beq.n	80083e2 <parse_object+0x1d2>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d21b      	bcs.n	80083e2 <parse_object+0x1d2>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	18d3      	adds	r3, r2, r3
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2b7d      	cmp	r3, #125	; 0x7d
 80083b8:	d113      	bne.n	80083e2 <parse_object+0x1d2>
    {
        goto fail; /* expected end of object */
    }

success:
 80083ba:	e000      	b.n	80083be <parse_object+0x1ae>
        goto success; /* empty object */
 80083bc:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	1e5a      	subs	r2, r3, #1
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	60da      	str	r2, [r3, #12]

    item->type = JObject;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2240      	movs	r2, #64	; 0x40
 80083cc:	60da      	str	r2, [r3, #12]
    item->child = head;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	609a      	str	r2, [r3, #8]
    return true;
 80083de:	2301      	movs	r3, #1
 80083e0:	e00e      	b.n	8008400 <parse_object+0x1f0>

fail:
 80083e2:	46c0      	nop			; (mov r8, r8)
 80083e4:	e004      	b.n	80083f0 <parse_object+0x1e0>
            goto fail; /* allocation failure */
 80083e6:	46c0      	nop			; (mov r8, r8)
 80083e8:	e002      	b.n	80083f0 <parse_object+0x1e0>
            goto fail; /* faile to parse name */
 80083ea:	46c0      	nop			; (mov r8, r8)
 80083ec:	e000      	b.n	80083f0 <parse_object+0x1e0>
            goto fail; /* failed to parse value */
 80083ee:	46c0      	nop			; (mov r8, r8)
    if (head != NULL)
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <parse_object+0x1ee>
    {
        JDelete(head);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	0018      	movs	r0, r3
 80083fa:	f7fe fc5b 	bl	8006cb4 <JDelete>
    }

    return false;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	0018      	movs	r0, r3
 8008402:	46bd      	mov	sp, r7
 8008404:	b006      	add	sp, #24
 8008406:	bd80      	pop	{r7, pc}
 8008408:	000003e7 	.word	0x000003e7

0800840c <print_object>:

/* Render an object to text. */
static Jbool print_object(const J * const item, printbuffer * const output_buffer)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]
    J *current_item = item->child;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <print_object+0x22>
    {
        return false;
 800842a:	2300      	movs	r3, #0
 800842c:	e113      	b.n	8008656 <print_object+0x24a>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <print_object+0x2e>
 8008436:	2302      	movs	r3, #2
 8008438:	e000      	b.n	800843c <print_object+0x30>
 800843a:	2301      	movs	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	0011      	movs	r1, r2
 8008446:	0018      	movs	r0, r3
 8008448:	f7fe fd34 	bl	8006eb4 <ensure>
 800844c:	0003      	movs	r3, r0
 800844e:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <print_object+0x4e>
    {
        return false;
 8008456:	2300      	movs	r3, #0
 8008458:	e0fd      	b.n	8008656 <print_object+0x24a>
    }

    *output_pointer++ = '{';
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	61fa      	str	r2, [r7, #28]
 8008460:	227b      	movs	r2, #123	; 0x7b
 8008462:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <print_object+0x74>
    {
        *output_pointer++ = '\n';
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	61fa      	str	r2, [r7, #28]
 800847c:	220a      	movs	r2, #10
 800847e:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	18d2      	adds	r2, r2, r3
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	609a      	str	r2, [r3, #8]

    while (current_item)
 800848c:	e0a7      	b.n	80085de <print_object+0x1d2>
    {
        if (output_buffer->format)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d024      	beq.n	80084e0 <print_object+0xd4>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	0011      	movs	r1, r2
 800849e:	0018      	movs	r0, r3
 80084a0:	f7fe fd08 	bl	8006eb4 <ensure>
 80084a4:	0003      	movs	r3, r0
 80084a6:	61fb      	str	r3, [r7, #28]
            if (output_pointer == NULL)
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <print_object+0xa6>
            {
                return false;
 80084ae:	2300      	movs	r3, #0
 80084b0:	e0d1      	b.n	8008656 <print_object+0x24a>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
 80084b6:	e007      	b.n	80084c8 <print_object+0xbc>
            {
                *output_pointer++ = '\t';
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	61fa      	str	r2, [r7, #28]
 80084be:	2209      	movs	r2, #9
 80084c0:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	3301      	adds	r3, #1
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d3f2      	bcc.n	80084b8 <print_object+0xac>
            }
            output_buffer->offset += output_buffer->depth;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	689a      	ldr	r2, [r3, #8]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	18d2      	adds	r2, r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	0011      	movs	r1, r2
 80084e8:	0018      	movs	r0, r3
 80084ea:	f7ff f8d7 	bl	800769c <print_string_ptr>
 80084ee:	1e03      	subs	r3, r0, #0
 80084f0:	d101      	bne.n	80084f6 <print_object+0xea>
        {
            return false;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e0af      	b.n	8008656 <print_object+0x24a>
        }
        update_offset(output_buffer);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	0018      	movs	r0, r3
 80084fa:	f7fe fd5d 	bl	8006fb8 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <print_object+0xfe>
 8008506:	2302      	movs	r3, #2
 8008508:	e000      	b.n	800850c <print_object+0x100>
 800850a:	2301      	movs	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	0011      	movs	r1, r2
 8008514:	0018      	movs	r0, r3
 8008516:	f7fe fccd 	bl	8006eb4 <ensure>
 800851a:	0003      	movs	r3, r0
 800851c:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <print_object+0x11c>
        {
            return false;
 8008524:	2300      	movs	r3, #0
 8008526:	e096      	b.n	8008656 <print_object+0x24a>
        }
        *output_pointer++ = ':';
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	61fa      	str	r2, [r7, #28]
 800852e:	223a      	movs	r2, #58	; 0x3a
 8008530:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <print_object+0x138>
        {
            *output_pointer++ = '\t';
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	61fa      	str	r2, [r7, #28]
 8008540:	2209      	movs	r2, #9
 8008542:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	18d2      	adds	r2, r2, r3
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	0011      	movs	r1, r2
 8008556:	0018      	movs	r0, r3
 8008558:	f7ff fc4a 	bl	8007df0 <print_value>
 800855c:	1e03      	subs	r3, r0, #0
 800855e:	d101      	bne.n	8008564 <print_object+0x158>
        {
            return false;
 8008560:	2300      	movs	r3, #0
 8008562:	e078      	b.n	8008656 <print_object+0x24a>
        }
        update_offset(output_buffer);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	0018      	movs	r0, r3
 8008568:	f7fe fd26 	bl	8006fb8 <update_offset>

        /* print comma if not last */
        length = (size_t) ((output_buffer->format ? 1 : 0) + (current_item->next ? 1 : 0));
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	1e5a      	subs	r2, r3, #1
 8008572:	4193      	sbcs	r3, r2
 8008574:	b2db      	uxtb	r3, r3
 8008576:	001a      	movs	r2, r3
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	1e59      	subs	r1, r3, #1
 800857e:	418b      	sbcs	r3, r1
 8008580:	b2db      	uxtb	r3, r3
 8008582:	18d3      	adds	r3, r2, r3
 8008584:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	0011      	movs	r1, r2
 800858e:	0018      	movs	r0, r3
 8008590:	f7fe fc90 	bl	8006eb4 <ensure>
 8008594:	0003      	movs	r3, r0
 8008596:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <print_object+0x196>
        {
            return false;
 800859e:	2300      	movs	r3, #0
 80085a0:	e059      	b.n	8008656 <print_object+0x24a>
        }
        if (current_item->next)
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d004      	beq.n	80085b4 <print_object+0x1a8>
        {
            *output_pointer++ = ',';
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	61fa      	str	r2, [r7, #28]
 80085b0:	222c      	movs	r2, #44	; 0x2c
 80085b2:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d004      	beq.n	80085c6 <print_object+0x1ba>
        {
            *output_pointer++ = '\n';
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	61fa      	str	r2, [r7, #28]
 80085c2:	220a      	movs	r2, #10
 80085c4:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	2200      	movs	r2, #0
 80085ca:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	18d2      	adds	r2, r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d000      	beq.n	80085e6 <print_object+0x1da>
 80085e4:	e753      	b.n	800848e <print_object+0x82>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <print_object+0x1ea>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	e000      	b.n	80085f8 <print_object+0x1ec>
 80085f6:	2302      	movs	r3, #2
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	0019      	movs	r1, r3
 80085fc:	0010      	movs	r0, r2
 80085fe:	f7fe fc59 	bl	8006eb4 <ensure>
 8008602:	0003      	movs	r3, r0
 8008604:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <print_object+0x204>
    {
        return false;
 800860c:	2300      	movs	r3, #0
 800860e:	e022      	b.n	8008656 <print_object+0x24a>
    }
    if (output_buffer->format)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d010      	beq.n	800863a <print_object+0x22e>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8008618:	2300      	movs	r3, #0
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	e007      	b.n	800862e <print_object+0x222>
        {
            *output_pointer++ = '\t';
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	61fa      	str	r2, [r7, #28]
 8008624:	2209      	movs	r2, #9
 8008626:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	3301      	adds	r3, #1
 800862c:	613b      	str	r3, [r7, #16]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	3b01      	subs	r3, #1
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	429a      	cmp	r2, r3
 8008638:	d3f1      	bcc.n	800861e <print_object+0x212>
        }
    }
    *output_pointer++ = '}';
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	61fa      	str	r2, [r7, #28]
 8008640:	227d      	movs	r2, #125	; 0x7d
 8008642:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	2200      	movs	r2, #0
 8008648:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	1e5a      	subs	r2, r3, #1
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	60da      	str	r2, [r3, #12]

    return true;
 8008654:	2301      	movs	r3, #1
}
 8008656:	0018      	movs	r0, r3
 8008658:	46bd      	mov	sp, r7
 800865a:	b008      	add	sp, #32
 800865c:	bd80      	pop	{r7, pc}

0800865e <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static J *get_object_item(const J * const object, const char * const name, const Jbool case_sensitive)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b086      	sub	sp, #24
 8008662:	af00      	add	r7, sp, #0
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	607a      	str	r2, [r7, #4]
    J *current_element = NULL;
 800866a:	2300      	movs	r3, #0
 800866c:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <get_object_item+0x1c>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <get_object_item+0x20>
    {
        return NULL;
 800867a:	2300      	movs	r3, #0
 800867c:	e026      	b.n	80086cc <get_object_item+0x6e>
    }

    current_element = object->child;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d013      	beq.n	80086b2 <get_object_item+0x54>
    {
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 800868a:	e002      	b.n	8008692 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d018      	beq.n	80086ca <get_object_item+0x6c>
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	6a1a      	ldr	r2, [r3, #32]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	0011      	movs	r1, r2
 80086a0:	0018      	movs	r0, r3
 80086a2:	f7f7 fd31 	bl	8000108 <strcmp>
 80086a6:	1e03      	subs	r3, r0, #0
 80086a8:	d1f0      	bne.n	800868c <get_object_item+0x2e>
 80086aa:	e00e      	b.n	80086ca <get_object_item+0x6c>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d008      	beq.n	80086ca <get_object_item+0x6c>
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	6a1a      	ldr	r2, [r3, #32]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	0011      	movs	r1, r2
 80086c0:	0018      	movs	r0, r3
 80086c2:	f7fe fa1b 	bl	8006afc <case_insensitive_strcmp>
 80086c6:	1e03      	subs	r3, r0, #0
 80086c8:	d1f0      	bne.n	80086ac <get_object_item+0x4e>
        }
    }

    return current_element;
 80086ca:	697b      	ldr	r3, [r7, #20]
}
 80086cc:	0018      	movs	r0, r3
 80086ce:	46bd      	mov	sp, r7
 80086d0:	b006      	add	sp, #24
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <JGetObjectItem>:

N_CJSON_PUBLIC(J *) JGetObjectItem(const J * const object, const char * const string)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	0018      	movs	r0, r3
 80086e6:	f7ff ffba 	bl	800865e <get_object_item>
 80086ea:	0003      	movs	r3, r0
}
 80086ec:	0018      	movs	r0, r3
 80086ee:	46bd      	mov	sp, r7
 80086f0:	b002      	add	sp, #8
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <suffix_object>:
    return JGetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(J *prev, J *item)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	605a      	str	r2, [r3, #4]
}
 800870a:	46c0      	nop			; (mov r8, r8)
 800870c:	46bd      	mov	sp, r7
 800870e:	b002      	add	sp, #8
 8008710:	bd80      	pop	{r7, pc}

08008712 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static Jbool add_item_to_array(J *array, J *item)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
    J *child = NULL;
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL))
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d002      	beq.n	800872c <add_item_to_array+0x1a>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <add_item_to_array+0x1e>
    {
        return false;
 800872c:	2300      	movs	r3, #0
 800872e:	e017      	b.n	8008760 <add_item_to_array+0x4e>
    }

    child = array->child;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	60fb      	str	r3, [r7, #12]

    if (child == NULL)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d106      	bne.n	800874a <add_item_to_array+0x38>
    {
        /* list is empty, start new one */
        array->child = item;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	609a      	str	r2, [r3, #8]
 8008742:	e00c      	b.n	800875e <add_item_to_array+0x4c>
    else
    {
        /* append to the end */
        while (child->next)
        {
            child = child->next;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	60fb      	str	r3, [r7, #12]
        while (child->next)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1f8      	bne.n	8008744 <add_item_to_array+0x32>
        }
        suffix_object(child, item);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	0011      	movs	r1, r2
 8008758:	0018      	movs	r0, r3
 800875a:	f7ff ffcb 	bl	80086f4 <suffix_object>
    }

    return true;
 800875e:	2301      	movs	r3, #1
}
 8008760:	0018      	movs	r0, r3
 8008762:	46bd      	mov	sp, r7
 8008764:	b004      	add	sp, #16
 8008766:	bd80      	pop	{r7, pc}

08008768 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8008770:	687b      	ldr	r3, [r7, #4]
}
 8008772:	0018      	movs	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	b002      	add	sp, #8
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static Jbool add_item_to_object(J * const object, const char * const string, J * const item, const Jbool constant_key)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	617b      	str	r3, [r7, #20]
    int new_type = JInvalid;
 800878e:	2300      	movs	r3, #0
 8008790:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d005      	beq.n	80087a4 <add_item_to_object+0x28>
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d002      	beq.n	80087a4 <add_item_to_object+0x28>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <add_item_to_object+0x2c>
    {
        return false;
 80087a4:	2300      	movs	r3, #0
 80087a6:	e03b      	b.n	8008820 <add_item_to_object+0xa4>
    }

    if (constant_key)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00c      	beq.n	80087c8 <add_item_to_object+0x4c>
    {
        new_key = (char*)cast_away_const(string);
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	0018      	movs	r0, r3
 80087b2:	f7ff ffd9 	bl	8008768 <cast_away_const>
 80087b6:	0003      	movs	r3, r0
 80087b8:	617b      	str	r3, [r7, #20]
        new_type = item->type | JStringIsConst;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	2280      	movs	r2, #128	; 0x80
 80087c0:	0092      	lsls	r2, r2, #2
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]
 80087c6:	e00f      	b.n	80087e8 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)Jstrdup((const unsigned char*)string);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	0018      	movs	r0, r3
 80087cc:	f7fe fa26 	bl	8006c1c <Jstrdup>
 80087d0:	0003      	movs	r3, r0
 80087d2:	617b      	str	r3, [r7, #20]
        if (new_key == NULL)
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <add_item_to_object+0x62>
        {
            return false;
 80087da:	2300      	movs	r3, #0
 80087dc:	e020      	b.n	8008820 <add_item_to_object+0xa4>
        }

        new_type = item->type & ~JStringIsConst;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	4a11      	ldr	r2, [pc, #68]	; (8008828 <add_item_to_object+0xac>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & JStringIsConst) && (item->string != NULL))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	2380      	movs	r3, #128	; 0x80
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4013      	ands	r3, r2
 80087f2:	d108      	bne.n	8008806 <add_item_to_object+0x8a>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d004      	beq.n	8008806 <add_item_to_object+0x8a>
    {
        _Free(item->string);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	0018      	movs	r0, r3
 8008802:	f000 fbbf 	bl	8008f84 <NoteFnFree>
    }

    item->string = new_key;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	0011      	movs	r1, r2
 8008818:	0018      	movs	r0, r3
 800881a:	f7ff ff7a 	bl	8008712 <add_item_to_array>
 800881e:	0003      	movs	r3, r0
}
 8008820:	0018      	movs	r0, r3
 8008822:	46bd      	mov	sp, r7
 8008824:	b006      	add	sp, #24
 8008826:	bd80      	pop	{r7, pc}
 8008828:	fffffdff 	.word	0xfffffdff

0800882c <JAddItemToObject>:

N_CJSON_PUBLIC(void) JAddItemToObject(J *object, const char *string, J *item)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
    add_item_to_object(object, string, item, false);
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	68b9      	ldr	r1, [r7, #8]
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	2300      	movs	r3, #0
 8008840:	f7ff ff9c 	bl	800877c <add_item_to_object>
}
 8008844:	46c0      	nop			; (mov r8, r8)
 8008846:	46bd      	mov	sp, r7
 8008848:	b004      	add	sp, #16
 800884a:	bd80      	pop	{r7, pc}

0800884c <JAddBoolToObject>:
    JDelete(false_item);
    return NULL;
}

N_CJSON_PUBLIC(J*) JAddBoolToObject(J * const object, const char * const name, const Jbool boolean)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
    J *bool_item = JCreateBool(boolean);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	0018      	movs	r0, r3
 800885c:	f000 f856 	bl	800890c <JCreateBool>
 8008860:	0003      	movs	r3, r0
 8008862:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, bool_item, false))
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	2300      	movs	r3, #0
 800886c:	f7ff ff86 	bl	800877c <add_item_to_object>
 8008870:	1e03      	subs	r3, r0, #0
 8008872:	d001      	beq.n	8008878 <JAddBoolToObject+0x2c>
    {
        return bool_item;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	e004      	b.n	8008882 <JAddBoolToObject+0x36>
    }

    JDelete(bool_item);
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	0018      	movs	r0, r3
 800887c:	f7fe fa1a 	bl	8006cb4 <JDelete>
    return NULL;
 8008880:	2300      	movs	r3, #0
}
 8008882:	0018      	movs	r0, r3
 8008884:	46bd      	mov	sp, r7
 8008886:	b006      	add	sp, #24
 8008888:	bd80      	pop	{r7, pc}

0800888a <JAddNumberToObject>:

N_CJSON_PUBLIC(J*) JAddNumberToObject(J * const object, const char * const name, const JNUMBER number)
{
 800888a:	b590      	push	{r4, r7, lr}
 800888c:	b087      	sub	sp, #28
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	603a      	str	r2, [r7, #0]
 8008896:	607b      	str	r3, [r7, #4]
    J *number_item = JCreateNumber(number);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	687c      	ldr	r4, [r7, #4]
 800889c:	0018      	movs	r0, r3
 800889e:	0021      	movs	r1, r4
 80088a0:	f000 f84c 	bl	800893c <JCreateNumber>
 80088a4:	0003      	movs	r3, r0
 80088a6:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, number_item, false))
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	2300      	movs	r3, #0
 80088b0:	f7ff ff64 	bl	800877c <add_item_to_object>
 80088b4:	1e03      	subs	r3, r0, #0
 80088b6:	d001      	beq.n	80088bc <JAddNumberToObject+0x32>
    {
        return number_item;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	e004      	b.n	80088c6 <JAddNumberToObject+0x3c>
    }

    JDelete(number_item);
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	0018      	movs	r0, r3
 80088c0:	f7fe f9f8 	bl	8006cb4 <JDelete>
    return NULL;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	0018      	movs	r0, r3
 80088c8:	46bd      	mov	sp, r7
 80088ca:	b007      	add	sp, #28
 80088cc:	bd90      	pop	{r4, r7, pc}

080088ce <JAddStringToObject>:

N_CJSON_PUBLIC(J*) JAddStringToObject(J * const object, const char * const name, const char * const string)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b086      	sub	sp, #24
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	607a      	str	r2, [r7, #4]
    J *string_item = JCreateString(string);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	0018      	movs	r0, r3
 80088de:	f000 f86f 	bl	80089c0 <JCreateString>
 80088e2:	0003      	movs	r3, r0
 80088e4:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, string_item, false))
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	68b9      	ldr	r1, [r7, #8]
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	2300      	movs	r3, #0
 80088ee:	f7ff ff45 	bl	800877c <add_item_to_object>
 80088f2:	1e03      	subs	r3, r0, #0
 80088f4:	d001      	beq.n	80088fa <JAddStringToObject+0x2c>
    {
        return string_item;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	e004      	b.n	8008904 <JAddStringToObject+0x36>
    }

    JDelete(string_item);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	0018      	movs	r0, r3
 80088fe:	f7fe f9d9 	bl	8006cb4 <JDelete>
    return NULL;
 8008902:	2300      	movs	r3, #0
}
 8008904:	0018      	movs	r0, r3
 8008906:	46bd      	mov	sp, r7
 8008908:	b006      	add	sp, #24
 800890a:	bd80      	pop	{r7, pc}

0800890c <JCreateBool>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateBool(Jbool b)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item();
 8008914:	f7fe f9b8 	bl	8006c88 <JNew_Item>
 8008918:	0003      	movs	r3, r0
 800891a:	60fb      	str	r3, [r7, #12]
    if(item)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d007      	beq.n	8008932 <JCreateBool+0x26>
    {
        item->type = b ? JTrue : JFalse;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <JCreateBool+0x20>
 8008928:	2202      	movs	r2, #2
 800892a:	e000      	b.n	800892e <JCreateBool+0x22>
 800892c:	2201      	movs	r2, #1
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	60da      	str	r2, [r3, #12]
    }

    return item;
 8008932:	68fb      	ldr	r3, [r7, #12]
}
 8008934:	0018      	movs	r0, r3
 8008936:	46bd      	mov	sp, r7
 8008938:	b004      	add	sp, #16
 800893a:	bd80      	pop	{r7, pc}

0800893c <JCreateNumber>:

N_CJSON_PUBLIC(J *) JCreateNumber(JNUMBER num)
{
 800893c:	b590      	push	{r4, r7, lr}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6038      	str	r0, [r7, #0]
 8008944:	6079      	str	r1, [r7, #4]
    J *item = JNew_Item();
 8008946:	f7fe f99f 	bl	8006c88 <JNew_Item>
 800894a:	0003      	movs	r3, r0
 800894c:	60fb      	str	r3, [r7, #12]
    if(item)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d027      	beq.n	80089a4 <JCreateNumber+0x68>
    {
        item->type = JNumber;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2208      	movs	r2, #8
 8008958:	60da      	str	r2, [r3, #12]
        item->valuenumber = num;
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	687c      	ldr	r4, [r7, #4]
 8008960:	6193      	str	r3, [r2, #24]
 8008962:	61d4      	str	r4, [r2, #28]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8008964:	4a12      	ldr	r2, [pc, #72]	; (80089b0 <JCreateNumber+0x74>)
 8008966:	4b13      	ldr	r3, [pc, #76]	; (80089b4 <JCreateNumber+0x78>)
 8008968:	6838      	ldr	r0, [r7, #0]
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	f7f7 fd88 	bl	8000480 <__aeabi_dcmpge>
 8008970:	1e03      	subs	r3, r0, #0
 8008972:	d003      	beq.n	800897c <JCreateNumber+0x40>
        {
            item->valueint = INT_MAX;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4a10      	ldr	r2, [pc, #64]	; (80089b8 <JCreateNumber+0x7c>)
 8008978:	615a      	str	r2, [r3, #20]
 800897a:	e013      	b.n	80089a4 <JCreateNumber+0x68>
        }
        else if (num <= INT_MIN)
 800897c:	2200      	movs	r2, #0
 800897e:	4b0f      	ldr	r3, [pc, #60]	; (80089bc <JCreateNumber+0x80>)
 8008980:	6838      	ldr	r0, [r7, #0]
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	f7f7 fd68 	bl	8000458 <__aeabi_dcmple>
 8008988:	1e03      	subs	r3, r0, #0
 800898a:	d004      	beq.n	8008996 <JCreateNumber+0x5a>
        {
            item->valueint = INT_MIN;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2280      	movs	r2, #128	; 0x80
 8008990:	0612      	lsls	r2, r2, #24
 8008992:	615a      	str	r2, [r3, #20]
 8008994:	e006      	b.n	80089a4 <JCreateNumber+0x68>
        }
        else
        {
            item->valueint = (int)num;
 8008996:	6838      	ldr	r0, [r7, #0]
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	f7f9 fb5b 	bl	8002054 <__aeabi_d2iz>
 800899e:	0002      	movs	r2, r0
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 80089a4:	68fb      	ldr	r3, [r7, #12]
}
 80089a6:	0018      	movs	r0, r3
 80089a8:	46bd      	mov	sp, r7
 80089aa:	b005      	add	sp, #20
 80089ac:	bd90      	pop	{r4, r7, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	ffc00000 	.word	0xffc00000
 80089b4:	41dfffff 	.word	0x41dfffff
 80089b8:	7fffffff 	.word	0x7fffffff
 80089bc:	c1e00000 	.word	0xc1e00000

080089c0 <JCreateString>:

N_CJSON_PUBLIC(J *) JCreateString(const char *string)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item();
 80089c8:	f7fe f95e 	bl	8006c88 <JNew_Item>
 80089cc:	0003      	movs	r3, r0
 80089ce:	60fb      	str	r3, [r7, #12]
    if(item)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d013      	beq.n	80089fe <JCreateString+0x3e>
    {
        item->type = JString;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2210      	movs	r2, #16
 80089da:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)Jstrdup((const unsigned char*)string);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	0018      	movs	r0, r3
 80089e0:	f7fe f91c 	bl	8006c1c <Jstrdup>
 80089e4:	0002      	movs	r2, r0
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d105      	bne.n	80089fe <JCreateString+0x3e>
        {
            JDelete(item);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	0018      	movs	r0, r3
 80089f6:	f7fe f95d 	bl	8006cb4 <JDelete>
            return NULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e000      	b.n	8008a00 <JCreateString+0x40>
        }
    }

    return item;
 80089fe:	68fb      	ldr	r3, [r7, #12]
}
 8008a00:	0018      	movs	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	b004      	add	sp, #16
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <JCreateObject>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateObject(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
    J *item = JNew_Item();
 8008a0e:	f7fe f93b 	bl	8006c88 <JNew_Item>
 8008a12:	0003      	movs	r3, r0
 8008a14:	607b      	str	r3, [r7, #4]
    if (item)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <JCreateObject+0x1a>
    {
        item->type = JObject;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2240      	movs	r2, #64	; 0x40
 8008a20:	60da      	str	r2, [r3, #12]
    }

    return item;
 8008a22:	687b      	ldr	r3, [r7, #4]
}
 8008a24:	0018      	movs	r0, r3
 8008a26:	46bd      	mov	sp, r7
 8008a28:	b002      	add	sp, #8
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <JIsNumber>:

    return (item->type & 0xFF) == JNULL;
}

N_CJSON_PUBLIC(Jbool) JIsNumber(const J * const item)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <JIsNumber+0x12>
    {
        return false;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e007      	b.n	8008a4e <JIsNumber+0x22>
    }

    return (item->type & 0xFF) == JNumber;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	22ff      	movs	r2, #255	; 0xff
 8008a44:	4013      	ands	r3, r2
 8008a46:	3b08      	subs	r3, #8
 8008a48:	425a      	negs	r2, r3
 8008a4a:	4153      	adcs	r3, r2
 8008a4c:	b2db      	uxtb	r3, r3
}
 8008a4e:	0018      	movs	r0, r3
 8008a50:	46bd      	mov	sp, r7
 8008a52:	b002      	add	sp, #8
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <JIsString>:

N_CJSON_PUBLIC(Jbool) JIsString(const J * const item)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b082      	sub	sp, #8
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <JIsString+0x12>
    {
        return false;
 8008a64:	2300      	movs	r3, #0
 8008a66:	e007      	b.n	8008a78 <JIsString+0x22>
    }

    return (item->type & 0xFF) == JString;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	22ff      	movs	r2, #255	; 0xff
 8008a6e:	4013      	ands	r3, r2
 8008a70:	3b10      	subs	r3, #16
 8008a72:	425a      	negs	r2, r3
 8008a74:	4153      	adcs	r3, r2
 8008a76:	b2db      	uxtb	r3, r3
}
 8008a78:	0018      	movs	r0, r3
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	b002      	add	sp, #8
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <JGetNumber>:
        return NULL;
    return item;
}

// Return a number from the specified JSON object, or 0 if it's not present
JNUMBER JGetNumber(J *rsp, const char *field) {
 8008a80:	b590      	push	{r4, r7, lr}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d102      	bne.n	8008a96 <JGetNumber+0x16>
        return 0.0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	2400      	movs	r4, #0
 8008a94:	e019      	b.n	8008aca <JGetNumber+0x4a>
    J *item = JGetObjectItem(rsp, field);
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	0011      	movs	r1, r2
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7ff fe19 	bl	80086d4 <JGetObjectItem>
 8008aa2:	0003      	movs	r3, r0
 8008aa4:	60fb      	str	r3, [r7, #12]
    if (item == NULL)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d102      	bne.n	8008ab2 <JGetNumber+0x32>
        return 0.0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	2400      	movs	r4, #0
 8008ab0:	e00b      	b.n	8008aca <JGetNumber+0x4a>
    if (!JIsNumber(item))
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f7ff ffb9 	bl	8008a2c <JIsNumber>
 8008aba:	1e03      	subs	r3, r0, #0
 8008abc:	d102      	bne.n	8008ac4 <JGetNumber+0x44>
        return 0.0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2400      	movs	r4, #0
 8008ac2:	e002      	b.n	8008aca <JGetNumber+0x4a>
    return item->valuenumber;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	69dc      	ldr	r4, [r3, #28]
 8008ac8:	699b      	ldr	r3, [r3, #24]
}
 8008aca:	0018      	movs	r0, r3
 8008acc:	0021      	movs	r1, r4
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	b005      	add	sp, #20
 8008ad2:	bd90      	pop	{r4, r7, pc}

08008ad4 <JIsNullString>:
        return 0.0;
    return JIsTrue(item);
}

// Return true if the object is valid and if the field is not present or if it's null
bool JIsNullString(J *rsp, const char *field) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <JIsNullString+0x14>
        return false;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	e022      	b.n	8008b2e <JIsNullString+0x5a>
    J *item = JGetObjectItem(rsp, field);
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	0011      	movs	r1, r2
 8008aee:	0018      	movs	r0, r3
 8008af0:	f7ff fdf0 	bl	80086d4 <JGetObjectItem>
 8008af4:	0003      	movs	r3, r0
 8008af6:	60fb      	str	r3, [r7, #12]
    if (item == NULL)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <JIsNullString+0x2e>
        return true;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e015      	b.n	8008b2e <JIsNullString+0x5a>
    if (!JIsString(item))
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	0018      	movs	r0, r3
 8008b06:	f7ff ffa6 	bl	8008a56 <JIsString>
 8008b0a:	1e03      	subs	r3, r0, #0
 8008b0c:	d101      	bne.n	8008b12 <JIsNullString+0x3e>
        return false;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e00d      	b.n	8008b2e <JIsNullString+0x5a>
    if (item->valuestring == NULL)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <JIsNullString+0x4a>
        return true;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e007      	b.n	8008b2e <JIsNullString+0x5a>
    if (item->valuestring[0] == '\0')
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <JIsNullString+0x58>
        return true;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e000      	b.n	8008b2e <JIsNullString+0x5a>
    return false;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	0018      	movs	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	b004      	add	sp, #16
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <JNtoA>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * JNtoA(JNUMBER f, char * buf, int original_precision)
{
 8008b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b3a:	b08f      	sub	sp, #60	; 0x3c
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60b8      	str	r0, [r7, #8]
 8008b40:	60f9      	str	r1, [r7, #12]
 8008b42:	607a      	str	r2, [r7, #4]
 8008b44:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	637b      	str	r3, [r7, #52]	; 0x34
	char * p = ptr;
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4c:	633b      	str	r3, [r7, #48]	; 0x30
	char c;
	long intPart;

	// Check specifically for uncommon but bad floating point numbers that can't be converted
	uint8_t fbytes[8];
	memcpy(&fbytes, &f, sizeof(fbytes));
 8008b4e:	2310      	movs	r3, #16
 8008b50:	18fa      	adds	r2, r7, r3
 8008b52:	2308      	movs	r3, #8
 8008b54:	18fb      	adds	r3, r7, r3
 8008b56:	0010      	movs	r0, r2
 8008b58:	0019      	movs	r1, r3
 8008b5a:	2308      	movs	r3, #8
 8008b5c:	001a      	movs	r2, r3
 8008b5e:	f000 fe0f 	bl	8009780 <memcpy>
	bool wasFF = true;
 8008b62:	2327      	movs	r3, #39	; 0x27
 8008b64:	18fb      	adds	r3, r7, r3
 8008b66:	2201      	movs	r2, #1
 8008b68:	701a      	strb	r2, [r3, #0]
	int i;
	for (i=0; i<(int)sizeof(fbytes); i++)
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	623b      	str	r3, [r7, #32]
 8008b6e:	e00d      	b.n	8008b8c <JNtoA+0x54>
		if (fbytes[i] != 0xff) wasFF = false;
 8008b70:	2310      	movs	r3, #16
 8008b72:	18fa      	adds	r2, r7, r3
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	18d3      	adds	r3, r2, r3
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2bff      	cmp	r3, #255	; 0xff
 8008b7c:	d003      	beq.n	8008b86 <JNtoA+0x4e>
 8008b7e:	2327      	movs	r3, #39	; 0x27
 8008b80:	18fb      	adds	r3, r7, r3
 8008b82:	2200      	movs	r2, #0
 8008b84:	701a      	strb	r2, [r3, #0]
	for (i=0; i<(int)sizeof(fbytes); i++)
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	623b      	str	r3, [r7, #32]
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	2b07      	cmp	r3, #7
 8008b90:	ddee      	ble.n	8008b70 <JNtoA+0x38>
	if (wasFF)
 8008b92:	2327      	movs	r3, #39	; 0x27
 8008b94:	18fb      	adds	r3, r7, r3
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <JNtoA+0x6c>
		f = 0.0;
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60ba      	str	r2, [r7, #8]
 8008ba2:	60fb      	str	r3, [r7, #12]

	// check precision bounds
	int precision = original_precision;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	61fb      	str	r3, [r7, #28]
	if (precision < 0 || precision > JNTOA_PRECISION)
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	db02      	blt.n	8008bb4 <JNtoA+0x7c>
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	2b0a      	cmp	r3, #10
 8008bb2:	dd01      	ble.n	8008bb8 <JNtoA+0x80>
		precision = JNTOA_PRECISION;
 8008bb4:	230a      	movs	r3, #10
 8008bb6:	61fb      	str	r3, [r7, #28]

	// sign stuff
	if (f < 0)
 8008bb8:	68b8      	ldr	r0, [r7, #8]
 8008bba:	68f9      	ldr	r1, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f7f7 fc40 	bl	8000444 <__aeabi_dcmplt>
 8008bc4:	1e03      	subs	r3, r0, #0
 8008bc6:	d00e      	beq.n	8008be6 <JNtoA+0xae>
	{
		f = -f;
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	0011      	movs	r1, r2
 8008bce:	000c      	movs	r4, r1
 8008bd0:	2180      	movs	r1, #128	; 0x80
 8008bd2:	0609      	lsls	r1, r1, #24
 8008bd4:	4059      	eors	r1, r3
 8008bd6:	000d      	movs	r5, r1
 8008bd8:	60bc      	str	r4, [r7, #8]
 8008bda:	60fd      	str	r5, [r7, #12]
		*ptr++ = '-';
 8008bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	637a      	str	r2, [r7, #52]	; 0x34
 8008be2:	222d      	movs	r2, #45	; 0x2d
 8008be4:	701a      	strb	r2, [r3, #0]
	}

	if (original_precision < 0)	 // negative precision == automatic precision guess
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da43      	bge.n	8008c74 <JNtoA+0x13c>
	{
		if (f < 1.0) precision = 6;
 8008bec:	68b8      	ldr	r0, [r7, #8]
 8008bee:	68f9      	ldr	r1, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4b8c      	ldr	r3, [pc, #560]	; (8008e24 <JNtoA+0x2ec>)
 8008bf4:	f7f7 fc26 	bl	8000444 <__aeabi_dcmplt>
 8008bf8:	1e03      	subs	r3, r0, #0
 8008bfa:	d002      	beq.n	8008c02 <JNtoA+0xca>
 8008bfc:	2306      	movs	r3, #6
 8008bfe:	61fb      	str	r3, [r7, #28]
 8008c00:	e038      	b.n	8008c74 <JNtoA+0x13c>
		else if (f < 10.0) precision = 5;
 8008c02:	68b8      	ldr	r0, [r7, #8]
 8008c04:	68f9      	ldr	r1, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	4b87      	ldr	r3, [pc, #540]	; (8008e28 <JNtoA+0x2f0>)
 8008c0a:	f7f7 fc1b 	bl	8000444 <__aeabi_dcmplt>
 8008c0e:	1e03      	subs	r3, r0, #0
 8008c10:	d002      	beq.n	8008c18 <JNtoA+0xe0>
 8008c12:	2305      	movs	r3, #5
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	e02d      	b.n	8008c74 <JNtoA+0x13c>
		else if (f < 100.0) precision = 4;
 8008c18:	68b8      	ldr	r0, [r7, #8]
 8008c1a:	68f9      	ldr	r1, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	4b83      	ldr	r3, [pc, #524]	; (8008e2c <JNtoA+0x2f4>)
 8008c20:	f7f7 fc10 	bl	8000444 <__aeabi_dcmplt>
 8008c24:	1e03      	subs	r3, r0, #0
 8008c26:	d002      	beq.n	8008c2e <JNtoA+0xf6>
 8008c28:	2304      	movs	r3, #4
 8008c2a:	61fb      	str	r3, [r7, #28]
 8008c2c:	e022      	b.n	8008c74 <JNtoA+0x13c>
		else if (f < 1000.0) precision = 3;
 8008c2e:	68b8      	ldr	r0, [r7, #8]
 8008c30:	68f9      	ldr	r1, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	4b7e      	ldr	r3, [pc, #504]	; (8008e30 <JNtoA+0x2f8>)
 8008c36:	f7f7 fc05 	bl	8000444 <__aeabi_dcmplt>
 8008c3a:	1e03      	subs	r3, r0, #0
 8008c3c:	d002      	beq.n	8008c44 <JNtoA+0x10c>
 8008c3e:	2303      	movs	r3, #3
 8008c40:	61fb      	str	r3, [r7, #28]
 8008c42:	e017      	b.n	8008c74 <JNtoA+0x13c>
		else if (f < 10000.0) precision = 2;
 8008c44:	68b8      	ldr	r0, [r7, #8]
 8008c46:	68f9      	ldr	r1, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4b7a      	ldr	r3, [pc, #488]	; (8008e34 <JNtoA+0x2fc>)
 8008c4c:	f7f7 fbfa 	bl	8000444 <__aeabi_dcmplt>
 8008c50:	1e03      	subs	r3, r0, #0
 8008c52:	d002      	beq.n	8008c5a <JNtoA+0x122>
 8008c54:	2302      	movs	r3, #2
 8008c56:	61fb      	str	r3, [r7, #28]
 8008c58:	e00c      	b.n	8008c74 <JNtoA+0x13c>
		else if (f < 100000.0) precision = 1;
 8008c5a:	68b8      	ldr	r0, [r7, #8]
 8008c5c:	68f9      	ldr	r1, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	4b75      	ldr	r3, [pc, #468]	; (8008e38 <JNtoA+0x300>)
 8008c62:	f7f7 fbef 	bl	8000444 <__aeabi_dcmplt>
 8008c66:	1e03      	subs	r3, r0, #0
 8008c68:	d002      	beq.n	8008c70 <JNtoA+0x138>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	61fb      	str	r3, [r7, #28]
 8008c6e:	e001      	b.n	8008c74 <JNtoA+0x13c>
		else precision = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61fb      	str	r3, [r7, #28]
	}

	// round value according the precision
	if (precision)
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00f      	beq.n	8008c9a <JNtoA+0x162>
		f += rounders[precision];
 8008c7a:	4a70      	ldr	r2, [pc, #448]	; (8008e3c <JNtoA+0x304>)
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	18d3      	adds	r3, r2, r3
 8008c82:	6818      	ldr	r0, [r3, #0]
 8008c84:	6859      	ldr	r1, [r3, #4]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	68fc      	ldr	r4, [r7, #12]
 8008c8a:	001a      	movs	r2, r3
 8008c8c:	0023      	movs	r3, r4
 8008c8e:	f7f7 fd01 	bl	8000694 <__aeabi_dadd>
 8008c92:	0003      	movs	r3, r0
 8008c94:	000c      	movs	r4, r1
 8008c96:	60bb      	str	r3, [r7, #8]
 8008c98:	60fc      	str	r4, [r7, #12]

	// integer part...
	intPart = f;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	68fc      	ldr	r4, [r7, #12]
 8008c9e:	0018      	movs	r0, r3
 8008ca0:	0021      	movs	r1, r4
 8008ca2:	f7f9 f9d7 	bl	8002054 <__aeabi_d2iz>
 8008ca6:	0003      	movs	r3, r0
 8008ca8:	62bb      	str	r3, [r7, #40]	; 0x28
	f -= intPart;
 8008caa:	68bc      	ldr	r4, [r7, #8]
 8008cac:	68fd      	ldr	r5, [r7, #12]
 8008cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cb0:	f7f9 fa06 	bl	80020c0 <__aeabi_i2d>
 8008cb4:	0002      	movs	r2, r0
 8008cb6:	000b      	movs	r3, r1
 8008cb8:	0020      	movs	r0, r4
 8008cba:	0029      	movs	r1, r5
 8008cbc:	f7f8 fe82 	bl	80019c4 <__aeabi_dsub>
 8008cc0:	0003      	movs	r3, r0
 8008cc2:	000c      	movs	r4, r1
 8008cc4:	60bb      	str	r3, [r7, #8]
 8008cc6:	60fc      	str	r4, [r7, #12]

	if (!intPart)
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d105      	bne.n	8008cda <JNtoA+0x1a2>
		*ptr++ = '0';
 8008cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	637a      	str	r2, [r7, #52]	; 0x34
 8008cd4:	2230      	movs	r2, #48	; 0x30
 8008cd6:	701a      	strb	r2, [r3, #0]
 8008cd8:	e034      	b.n	8008d44 <JNtoA+0x20c>
	else
	{
		// save start pointer
		p = ptr;
 8008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cdc:	633b      	str	r3, [r7, #48]	; 0x30

		// convert (reverse order)
		while (intPart)
 8008cde:	e013      	b.n	8008d08 <JNtoA+0x1d0>
		{
			*p++ = '0' + intPart % 10;
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	210a      	movs	r1, #10
 8008ce4:	0018      	movs	r0, r3
 8008ce6:	f7f7 fb91 	bl	800040c <__aeabi_idivmod>
 8008cea:	000b      	movs	r3, r1
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	1c59      	adds	r1, r3, #1
 8008cf2:	6339      	str	r1, [r7, #48]	; 0x30
 8008cf4:	3230      	adds	r2, #48	; 0x30
 8008cf6:	b2d2      	uxtb	r2, r2
 8008cf8:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	210a      	movs	r1, #10
 8008cfe:	0018      	movs	r0, r3
 8008d00:	f7f7 fa9e 	bl	8000240 <__divsi3>
 8008d04:	0003      	movs	r3, r0
 8008d06:	62bb      	str	r3, [r7, #40]	; 0x28
		while (intPart)
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e8      	bne.n	8008ce0 <JNtoA+0x1a8>
		}

		// save end pos
		p1 = p;
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8008d12:	e011      	b.n	8008d38 <JNtoA+0x200>
		{
			c = *--p;
 8008d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d16:	3b01      	subs	r3, #1
 8008d18:	633b      	str	r3, [r7, #48]	; 0x30
 8008d1a:	212f      	movs	r1, #47	; 0x2f
 8008d1c:	187b      	adds	r3, r7, r1
 8008d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d20:	7812      	ldrb	r2, [r2, #0]
 8008d22:	701a      	strb	r2, [r3, #0]
			*p = *ptr;
 8008d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d26:	781a      	ldrb	r2, [r3, #0]
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8008d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	637a      	str	r2, [r7, #52]	; 0x34
 8008d32:	187a      	adds	r2, r7, r1
 8008d34:	7812      	ldrb	r2, [r2, #0]
 8008d36:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8008d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d8e9      	bhi.n	8008d14 <JNtoA+0x1dc>
		}

		// restore end pos
		ptr = p1;
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
	}

	// decimal part
	if (precision)
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d040      	beq.n	8008dcc <JNtoA+0x294>
	{

		// place decimal point
		*ptr++ = '.';
 8008d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	637a      	str	r2, [r7, #52]	; 0x34
 8008d50:	222e      	movs	r2, #46	; 0x2e
 8008d52:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8008d54:	e035      	b.n	8008dc2 <JNtoA+0x28a>
		{
			f *= 10.0;
 8008d56:	68b8      	ldr	r0, [r7, #8]
 8008d58:	68f9      	ldr	r1, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	4b32      	ldr	r3, [pc, #200]	; (8008e28 <JNtoA+0x2f0>)
 8008d5e:	f7f8 fbbf 	bl	80014e0 <__aeabi_dmul>
 8008d62:	0003      	movs	r3, r0
 8008d64:	000c      	movs	r4, r1
 8008d66:	60bb      	str	r3, [r7, #8]
 8008d68:	60fc      	str	r4, [r7, #12]
			c = f;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	68fc      	ldr	r4, [r7, #12]
 8008d6e:	262f      	movs	r6, #47	; 0x2f
 8008d70:	19bd      	adds	r5, r7, r6
 8008d72:	0018      	movs	r0, r3
 8008d74:	0021      	movs	r1, r4
 8008d76:	f7f7 fbad 	bl	80004d4 <__aeabi_d2uiz>
 8008d7a:	0003      	movs	r3, r0
 8008d7c:	702b      	strb	r3, [r5, #0]

			// Invalid floating point numbers (specifically 0xffffff) end up at this point
			// with a c == 255 after the coercion
			if (c > 9) c = 0;
 8008d7e:	19bb      	adds	r3, r7, r6
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b09      	cmp	r3, #9
 8008d84:	d903      	bls.n	8008d8e <JNtoA+0x256>
 8008d86:	232f      	movs	r3, #47	; 0x2f
 8008d88:	18fb      	adds	r3, r7, r3
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	701a      	strb	r2, [r3, #0]

			*ptr++ = '0' + c;
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	637a      	str	r2, [r7, #52]	; 0x34
 8008d94:	212f      	movs	r1, #47	; 0x2f
 8008d96:	187a      	adds	r2, r7, r1
 8008d98:	7812      	ldrb	r2, [r2, #0]
 8008d9a:	3230      	adds	r2, #48	; 0x30
 8008d9c:	b2d2      	uxtb	r2, r2
 8008d9e:	701a      	strb	r2, [r3, #0]
			f -= c;
 8008da0:	68bc      	ldr	r4, [r7, #8]
 8008da2:	68fd      	ldr	r5, [r7, #12]
 8008da4:	187b      	adds	r3, r7, r1
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	0018      	movs	r0, r3
 8008daa:	f7f9 f989 	bl	80020c0 <__aeabi_i2d>
 8008dae:	0002      	movs	r2, r0
 8008db0:	000b      	movs	r3, r1
 8008db2:	0020      	movs	r0, r4
 8008db4:	0029      	movs	r1, r5
 8008db6:	f7f8 fe05 	bl	80019c4 <__aeabi_dsub>
 8008dba:	0003      	movs	r3, r0
 8008dbc:	000c      	movs	r4, r1
 8008dbe:	60bb      	str	r3, [r7, #8]
 8008dc0:	60fc      	str	r4, [r7, #12]
		while (precision--)
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	1e5a      	subs	r2, r3, #1
 8008dc6:	61fa      	str	r2, [r7, #28]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1c4      	bne.n	8008d56 <JNtoA+0x21e>
		}
	}

	// terminating zero
	*ptr = 0;
 8008dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dce:	2200      	movs	r2, #0
 8008dd0:	701a      	strb	r2, [r3, #0]

	// Remove trailing zero's if automatic precision
	if (NULL != strchr(buf, '.')) {
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	212e      	movs	r1, #46	; 0x2e
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	f000 fd9e 	bl	8009918 <strchr>
 8008ddc:	1e03      	subs	r3, r0, #0
 8008dde:	d01b      	beq.n	8008e18 <JNtoA+0x2e0>
		if (original_precision < 0) {
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	da18      	bge.n	8008e18 <JNtoA+0x2e0>
			--ptr;
 8008de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de8:	3b01      	subs	r3, #1
 8008dea:	637b      	str	r3, [r7, #52]	; 0x34
			while (ptr > (buf+1) && *ptr == '0')
 8008dec:	e004      	b.n	8008df8 <JNtoA+0x2c0>
				*ptr-- = 0;
 8008dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df0:	1e5a      	subs	r2, r3, #1
 8008df2:	637a      	str	r2, [r7, #52]	; 0x34
 8008df4:	2200      	movs	r2, #0
 8008df6:	701a      	strb	r2, [r3, #0]
			while (ptr > (buf+1) && *ptr == '0')
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d903      	bls.n	8008e0a <JNtoA+0x2d2>
 8008e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b30      	cmp	r3, #48	; 0x30
 8008e08:	d0f1      	beq.n	8008dee <JNtoA+0x2b6>
			if (*ptr == '.')
 8008e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e10:	d102      	bne.n	8008e18 <JNtoA+0x2e0>
				*ptr = 0;
 8008e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e14:	2200      	movs	r2, #0
 8008e16:	701a      	strb	r2, [r3, #0]
		}
	}

	return buf;
 8008e18:	687b      	ldr	r3, [r7, #4]
}
 8008e1a:	0018      	movs	r0, r3
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	b00f      	add	sp, #60	; 0x3c
 8008e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e22:	46c0      	nop			; (mov r8, r8)
 8008e24:	3ff00000 	.word	0x3ff00000
 8008e28:	40240000 	.word	0x40240000
 8008e2c:	40590000 	.word	0x40590000
 8008e30:	408f4000 	.word	0x408f4000
 8008e34:	40c38800 	.word	0x40c38800
 8008e38:	40f86a00 	.word	0x40f86a00
 8008e3c:	08009fe8 	.word	0x08009fe8

08008e40 <NoteSetFn>:
        hookDelayMs = delayfn;
    if (hookGetMs == NULL)
        hookGetMs = millisfn;
}
// Set the debug output hook
void NoteSetFn(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
    hookMalloc = mallocfn;
 8008e4e:	4b08      	ldr	r3, [pc, #32]	; (8008e70 <NoteSetFn+0x30>)
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	601a      	str	r2, [r3, #0]
    hookFree = freefn;
 8008e54:	4b07      	ldr	r3, [pc, #28]	; (8008e74 <NoteSetFn+0x34>)
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	601a      	str	r2, [r3, #0]
    hookDelayMs = delayfn;
 8008e5a:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <NoteSetFn+0x38>)
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	601a      	str	r2, [r3, #0]
    hookGetMs = millisfn;
 8008e60:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <NoteSetFn+0x3c>)
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	601a      	str	r2, [r3, #0]
}
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	b004      	add	sp, #16
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	46c0      	nop			; (mov r8, r8)
 8008e70:	20000484 	.word	0x20000484
 8008e74:	20000488 	.word	0x20000488
 8008e78:	2000048c 	.word	0x2000048c
 8008e7c:	20000490 	.word	0x20000490

08008e80 <NoteSetFnSerial>:
    hookLockI2C = lockI2Cfn;
    hookUnlockI2C = unlockI2Cfn;
    hookLockNote = lockNotefn;
    hookUnlockNote = unlockNotefn;
}
void NoteSetFnSerial(serialResetFn resetfn, serialTransmitFn transmitfn, serialAvailableFn availfn, serialReceiveFn receivefn) {
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]
    hookActiveInterface = interfaceSerial;
 8008e8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ec0 <NoteSetFnSerial+0x40>)
 8008e90:	2201      	movs	r2, #1
 8008e92:	601a      	str	r2, [r3, #0]

    hookSerialReset = resetfn;
 8008e94:	4b0b      	ldr	r3, [pc, #44]	; (8008ec4 <NoteSetFnSerial+0x44>)
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	601a      	str	r2, [r3, #0]
    hookSerialTransmit = transmitfn;
 8008e9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ec8 <NoteSetFnSerial+0x48>)
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	601a      	str	r2, [r3, #0]
    hookSerialAvailable = availfn;
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <NoteSetFnSerial+0x4c>)
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
    hookSerialReceive = receivefn;
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <NoteSetFnSerial+0x50>)
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	601a      	str	r2, [r3, #0]

    notecardReset = serialNoteReset;
 8008eac:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <NoteSetFnSerial+0x54>)
 8008eae:	4a0a      	ldr	r2, [pc, #40]	; (8008ed8 <NoteSetFnSerial+0x58>)
 8008eb0:	601a      	str	r2, [r3, #0]
    notecardTransaction = serialNoteTransaction;
 8008eb2:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <NoteSetFnSerial+0x5c>)
 8008eb4:	4a0a      	ldr	r2, [pc, #40]	; (8008ee0 <NoteSetFnSerial+0x60>)
 8008eb6:	601a      	str	r2, [r3, #0]
}
 8008eb8:	46c0      	nop			; (mov r8, r8)
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	b004      	add	sp, #16
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	20000494 	.word	0x20000494
 8008ec4:	20000498 	.word	0x20000498
 8008ec8:	2000049c 	.word	0x2000049c
 8008ecc:	200004a0 	.word	0x200004a0
 8008ed0:	200004a4 	.word	0x200004a4
 8008ed4:	200004a8 	.word	0x200004a8
 8008ed8:	080095d1 	.word	0x080095d1
 8008edc:	200004ac 	.word	0x200004ac
 8008ee0:	08009399 	.word	0x08009399

08008ee4 <NoteFnDebugMsg>:
    notecardReset = i2cNoteReset;
    notecardTransaction = i2cNoteTransaction;
}

// Runtime hook wrappers
void NoteFnDebugMsg(const char *line) {
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
#ifndef NOTE_NODEBUG
    if (hookDebugOutput != NULL)
 8008eec:	4b06      	ldr	r3, [pc, #24]	; (8008f08 <NoteFnDebugMsg+0x24>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d004      	beq.n	8008efe <NoteFnDebugMsg+0x1a>
        hookDebugOutput(line);
 8008ef4:	4b04      	ldr	r3, [pc, #16]	; (8008f08 <NoteFnDebugMsg+0x24>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	0010      	movs	r0, r2
 8008efc:	4798      	blx	r3
#endif
}
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	46bd      	mov	sp, r7
 8008f02:	b002      	add	sp, #8
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	46c0      	nop			; (mov r8, r8)
 8008f08:	20000478 	.word	0x20000478

08008f0c <NoteFnGetMs>:
        va_end(args);
        hookDebugOutput(line);
    }
#endif
}
long unsigned int NoteFnGetMs() {
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	af00      	add	r7, sp, #0
    if (hookGetMs == NULL)
 8008f10:	4b06      	ldr	r3, [pc, #24]	; (8008f2c <NoteFnGetMs+0x20>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <NoteFnGetMs+0x10>
        return 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e003      	b.n	8008f24 <NoteFnGetMs+0x18>
    return hookGetMs();
 8008f1c:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <NoteFnGetMs+0x20>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4798      	blx	r3
 8008f22:	0003      	movs	r3, r0
}
 8008f24:	0018      	movs	r0, r3
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	20000490 	.word	0x20000490

08008f30 <NoteFnDelayMs>:
void NoteFnDelayMs(uint32_t ms) {
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
    if (hookDelayMs != NULL)
 8008f38:	4b06      	ldr	r3, [pc, #24]	; (8008f54 <NoteFnDelayMs+0x24>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d004      	beq.n	8008f4a <NoteFnDelayMs+0x1a>
        hookDelayMs(ms);
 8008f40:	4b04      	ldr	r3, [pc, #16]	; (8008f54 <NoteFnDelayMs+0x24>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	0010      	movs	r0, r2
 8008f48:	4798      	blx	r3
}
 8008f4a:	46c0      	nop			; (mov r8, r8)
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	b002      	add	sp, #8
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	2000048c 	.word	0x2000048c

08008f58 <NoteFnMalloc>:
void *NoteFnMalloc(size_t size) {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
    if (hookMalloc == NULL)
 8008f60:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <NoteFnMalloc+0x28>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <NoteFnMalloc+0x14>
        return NULL;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	e005      	b.n	8008f78 <NoteFnMalloc+0x20>
    return hookMalloc(size);
 8008f6c:	4b04      	ldr	r3, [pc, #16]	; (8008f80 <NoteFnMalloc+0x28>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	0010      	movs	r0, r2
 8008f74:	4798      	blx	r3
 8008f76:	0003      	movs	r3, r0
}
 8008f78:	0018      	movs	r0, r3
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	b002      	add	sp, #8
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	20000484 	.word	0x20000484

08008f84 <NoteFnFree>:
void NoteFnFree(void *p) {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
    if (hookFree != NULL)
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <NoteFnFree+0x24>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d004      	beq.n	8008f9e <NoteFnFree+0x1a>
        hookFree(p);
 8008f94:	4b04      	ldr	r3, [pc, #16]	; (8008fa8 <NoteFnFree+0x24>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	0010      	movs	r0, r2
 8008f9c:	4798      	blx	r3
}
 8008f9e:	46c0      	nop			; (mov r8, r8)
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	b002      	add	sp, #8
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	20000488 	.word	0x20000488

08008fac <NoteFnLockNote>:
}
void NoteFnUnlockI2C() {
    if (hookUnlockI2C != NULL)
        hookUnlockI2C();
}
void NoteFnLockNote() {
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
    if (hookLockNote != NULL)
 8008fb0:	4b04      	ldr	r3, [pc, #16]	; (8008fc4 <NoteFnLockNote+0x18>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <NoteFnLockNote+0x12>
        hookLockNote();
 8008fb8:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <NoteFnLockNote+0x18>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4798      	blx	r3
}
 8008fbe:	46c0      	nop			; (mov r8, r8)
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	2000047c 	.word	0x2000047c

08008fc8 <NoteFnUnlockNote>:
void NoteFnUnlockNote() {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0
    if (hookUnlockNote != NULL)
 8008fcc:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <NoteFnUnlockNote+0x18>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <NoteFnUnlockNote+0x12>
        hookUnlockNote();
 8008fd4:	4b02      	ldr	r3, [pc, #8]	; (8008fe0 <NoteFnUnlockNote+0x18>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4798      	blx	r3
}
 8008fda:	46c0      	nop			; (mov r8, r8)
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	20000480 	.word	0x20000480

08008fe4 <NoteFnSerialReset>:
void NoteFnSerialReset() {
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReset != NULL)
 8008fe8:	4b06      	ldr	r3, [pc, #24]	; (8009004 <NoteFnSerialReset+0x20>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d106      	bne.n	8008ffe <NoteFnSerialReset+0x1a>
 8008ff0:	4b05      	ldr	r3, [pc, #20]	; (8009008 <NoteFnSerialReset+0x24>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <NoteFnSerialReset+0x1a>
        hookSerialReset();
 8008ff8:	4b03      	ldr	r3, [pc, #12]	; (8009008 <NoteFnSerialReset+0x24>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4798      	blx	r3
}
 8008ffe:	46c0      	nop			; (mov r8, r8)
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	20000494 	.word	0x20000494
 8009008:	20000498 	.word	0x20000498

0800900c <NoteFnSerialTransmit>:
void NoteFnSerialTransmit(uint8_t *text, size_t len, bool flush) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	1dfb      	adds	r3, r7, #7
 8009018:	701a      	strb	r2, [r3, #0]
    if (hookActiveInterface == interfaceSerial && hookSerialTransmit != NULL)
 800901a:	4b09      	ldr	r3, [pc, #36]	; (8009040 <NoteFnSerialTransmit+0x34>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d10a      	bne.n	8009038 <NoteFnSerialTransmit+0x2c>
 8009022:	4b08      	ldr	r3, [pc, #32]	; (8009044 <NoteFnSerialTransmit+0x38>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d006      	beq.n	8009038 <NoteFnSerialTransmit+0x2c>
        hookSerialTransmit(text, len, flush);
 800902a:	4b06      	ldr	r3, [pc, #24]	; (8009044 <NoteFnSerialTransmit+0x38>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	1dfa      	adds	r2, r7, #7
 8009030:	7812      	ldrb	r2, [r2, #0]
 8009032:	68b9      	ldr	r1, [r7, #8]
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	4798      	blx	r3
}
 8009038:	46c0      	nop			; (mov r8, r8)
 800903a:	46bd      	mov	sp, r7
 800903c:	b004      	add	sp, #16
 800903e:	bd80      	pop	{r7, pc}
 8009040:	20000494 	.word	0x20000494
 8009044:	2000049c 	.word	0x2000049c

08009048 <NoteFnSerialAvailable>:
bool NoteFnSerialAvailable() {
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialAvailable != NULL)
 800904c:	4b08      	ldr	r3, [pc, #32]	; (8009070 <NoteFnSerialAvailable+0x28>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d108      	bne.n	8009066 <NoteFnSerialAvailable+0x1e>
 8009054:	4b07      	ldr	r3, [pc, #28]	; (8009074 <NoteFnSerialAvailable+0x2c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d004      	beq.n	8009066 <NoteFnSerialAvailable+0x1e>
        return hookSerialAvailable();
 800905c:	4b05      	ldr	r3, [pc, #20]	; (8009074 <NoteFnSerialAvailable+0x2c>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4798      	blx	r3
 8009062:	0003      	movs	r3, r0
 8009064:	e000      	b.n	8009068 <NoteFnSerialAvailable+0x20>
    return false;
 8009066:	2300      	movs	r3, #0
}
 8009068:	0018      	movs	r0, r3
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	46c0      	nop			; (mov r8, r8)
 8009070:	20000494 	.word	0x20000494
 8009074:	200004a0 	.word	0x200004a0

08009078 <NoteFnSerialReceive>:
char NoteFnSerialReceive() {
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReceive != NULL)
 800907c:	4b08      	ldr	r3, [pc, #32]	; (80090a0 <NoteFnSerialReceive+0x28>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d108      	bne.n	8009096 <NoteFnSerialReceive+0x1e>
 8009084:	4b07      	ldr	r3, [pc, #28]	; (80090a4 <NoteFnSerialReceive+0x2c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d004      	beq.n	8009096 <NoteFnSerialReceive+0x1e>
        return hookSerialReceive();
 800908c:	4b05      	ldr	r3, [pc, #20]	; (80090a4 <NoteFnSerialReceive+0x2c>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4798      	blx	r3
 8009092:	0003      	movs	r3, r0
 8009094:	e000      	b.n	8009098 <NoteFnSerialReceive+0x20>
    return 0;
 8009096:	2300      	movs	r3, #0
}
 8009098:	0018      	movs	r0, r3
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	46c0      	nop			; (mov r8, r8)
 80090a0:	20000494 	.word	0x20000494
 80090a4:	200004a4 	.word	0x200004a4

080090a8 <NoteFnNoteReset>:
    if (i2cMax > 127)
        i2cMax = 127;
    return i2cMax;
}

bool NoteFnNoteReset() {
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0
    if (notecardReset == NULL)
 80090ac:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <NoteFnNoteReset+0x20>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d101      	bne.n	80090b8 <NoteFnNoteReset+0x10>
        return "notecard not initialized";
 80090b4:	2301      	movs	r3, #1
 80090b6:	e003      	b.n	80090c0 <NoteFnNoteReset+0x18>
    return notecardReset();
 80090b8:	4b03      	ldr	r3, [pc, #12]	; (80090c8 <NoteFnNoteReset+0x20>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4798      	blx	r3
 80090be:	0003      	movs	r3, r0
}
 80090c0:	0018      	movs	r0, r3
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	200004a8 	.word	0x200004a8

080090cc <NoteFnTransaction>:
const char *NoteFnTransaction(char *json, char **jsonResponse) {
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
    if (notecardTransaction == NULL)
 80090d6:	4b08      	ldr	r3, [pc, #32]	; (80090f8 <NoteFnTransaction+0x2c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <NoteFnTransaction+0x16>
        return "notecard not initialized";
 80090de:	4b07      	ldr	r3, [pc, #28]	; (80090fc <NoteFnTransaction+0x30>)
 80090e0:	e006      	b.n	80090f0 <NoteFnTransaction+0x24>
    return notecardTransaction(json, jsonResponse);
 80090e2:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <NoteFnTransaction+0x2c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	0010      	movs	r0, r2
 80090ec:	4798      	blx	r3
 80090ee:	0003      	movs	r3, r0
}
 80090f0:	0018      	movs	r0, r3
 80090f2:	46bd      	mov	sp, r7
 80090f4:	b002      	add	sp, #8
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	200004ac 	.word	0x200004ac
 80090fc:	08009a8c 	.word	0x08009a8c

08009100 <errDoc>:

// Flag that gets set whenever an error occurs that should force a reset
static bool resetRequired = true;

// Create an error response document
static J *errDoc(const char *errmsg) {
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
    J *rspdoc = JCreateObject();
 8009108:	f7ff fc7e 	bl	8008a08 <JCreateObject>
 800910c:	0003      	movs	r3, r0
 800910e:	60fb      	str	r3, [r7, #12]
    if (rspdoc != NULL)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d005      	beq.n	8009122 <errDoc+0x22>
        JAddStringToObject(rspdoc, "err", errmsg);
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	490a      	ldr	r1, [pc, #40]	; (8009144 <errDoc+0x44>)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	0018      	movs	r0, r3
 800911e:	f7ff fbd6 	bl	80088ce <JAddStringToObject>
#ifdef SHOW_TRANSACTIONS
    _Debug("{\"err\":\"");
 8009122:	4b09      	ldr	r3, [pc, #36]	; (8009148 <errDoc+0x48>)
 8009124:	0018      	movs	r0, r3
 8009126:	f7ff fedd 	bl	8008ee4 <NoteFnDebugMsg>
	_Debug(errmsg);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	0018      	movs	r0, r3
 800912e:	f7ff fed9 	bl	8008ee4 <NoteFnDebugMsg>
	_Debug("\"}\n");
 8009132:	4b06      	ldr	r3, [pc, #24]	; (800914c <errDoc+0x4c>)
 8009134:	0018      	movs	r0, r3
 8009136:	f7ff fed5 	bl	8008ee4 <NoteFnDebugMsg>
#endif
    return rspdoc;
 800913a:	68fb      	ldr	r3, [r7, #12]
}
 800913c:	0018      	movs	r0, r3
 800913e:	46bd      	mov	sp, r7
 8009140:	b004      	add	sp, #16
 8009142:	bd80      	pop	{r7, pc}
 8009144:	08009aa8 	.word	0x08009aa8
 8009148:	08009aac 	.word	0x08009aac
 800914c:	08009ab8 	.word	0x08009ab8

08009150 <NoteNewRequest>:

// Lock for mutual exclusion, not only because access to the card must be serialized, but also because
// both C++ and ArduinoJSON call malloc() which is not a thread-safe operation.
J *NoteNewRequest(const char *request) {
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
    J *reqdoc = JCreateObject();
 8009158:	f7ff fc56 	bl	8008a08 <JCreateObject>
 800915c:	0003      	movs	r3, r0
 800915e:	60fb      	str	r3, [r7, #12]
    if (reqdoc != NULL)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d005      	beq.n	8009172 <NoteNewRequest+0x22>
        JAddStringToObject(reqdoc, "req", request);
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	4904      	ldr	r1, [pc, #16]	; (800917c <NoteNewRequest+0x2c>)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	0018      	movs	r0, r3
 800916e:	f7ff fbae 	bl	80088ce <JAddStringToObject>
    return reqdoc;
 8009172:	68fb      	ldr	r3, [r7, #12]
}
 8009174:	0018      	movs	r0, r3
 8009176:	46bd      	mov	sp, r7
 8009178:	b004      	add	sp, #16
 800917a:	bd80      	pop	{r7, pc}
 800917c:	08009abc 	.word	0x08009abc

08009180 <NoteRequest>:

// Perform a request, FREEING THE REQUEST STRUCTURE, then returning true if success and
// false if either we ran into an error such as out-of-memory or if an error was returned
// from the transaction in the "err" field.
bool NoteRequest(J *req) {
 8009180:	b5b0      	push	{r4, r5, r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequest(NoteNewRequest("xxx"))
    if (req == NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <NoteRequest+0x12>
        return false;
 800918e:	2300      	movs	r3, #0
 8009190:	e022      	b.n	80091d8 <NoteRequest+0x58>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	0018      	movs	r0, r3
 8009196:	f000 f847 	bl	8009228 <NoteTransaction>
 800919a:	0003      	movs	r3, r0
 800919c:	60fb      	str	r3, [r7, #12]
    if (rsp == NULL) {
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d105      	bne.n	80091b0 <NoteRequest+0x30>
        JDelete(req);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	0018      	movs	r0, r3
 80091a8:	f7fd fd84 	bl	8006cb4 <JDelete>
        return false;
 80091ac:	2300      	movs	r3, #0
 80091ae:	e013      	b.n	80091d8 <NoteRequest+0x58>
    }
    // Check for a transaction error, and exit
    bool success = JIsNullString(rsp, "err");
 80091b0:	250b      	movs	r5, #11
 80091b2:	197c      	adds	r4, r7, r5
 80091b4:	4a0a      	ldr	r2, [pc, #40]	; (80091e0 <NoteRequest+0x60>)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	0011      	movs	r1, r2
 80091ba:	0018      	movs	r0, r3
 80091bc:	f7ff fc8a 	bl	8008ad4 <JIsNullString>
 80091c0:	0003      	movs	r3, r0
 80091c2:	7023      	strb	r3, [r4, #0]
    JDelete(req);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	0018      	movs	r0, r3
 80091c8:	f7fd fd74 	bl	8006cb4 <JDelete>
    JDelete(rsp);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	0018      	movs	r0, r3
 80091d0:	f7fd fd70 	bl	8006cb4 <JDelete>
    return success;
 80091d4:	197b      	adds	r3, r7, r5
 80091d6:	781b      	ldrb	r3, [r3, #0]
}
 80091d8:	0018      	movs	r0, r3
 80091da:	46bd      	mov	sp, r7
 80091dc:	b004      	add	sp, #16
 80091de:	bdb0      	pop	{r4, r5, r7, pc}
 80091e0:	08009aa8 	.word	0x08009aa8

080091e4 <NoteRequestResponse>:

// Perform a request, FREEING THE REQUEST STRUCTURE, and returning a reply structure or
// NULL if there's insufficient memory.
J *NoteRequestResponse(J *req) {
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequestResponse(NoteNewRequest("xxx"))
    if (req == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <NoteRequestResponse+0x12>
        return NULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	e013      	b.n	800921e <NoteRequestResponse+0x3a>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	0018      	movs	r0, r3
 80091fa:	f000 f815 	bl	8009228 <NoteTransaction>
 80091fe:	0003      	movs	r3, r0
 8009200:	60fb      	str	r3, [r7, #12]
    if (rsp == NULL) {
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d105      	bne.n	8009214 <NoteRequestResponse+0x30>
        JDelete(req);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	0018      	movs	r0, r3
 800920c:	f7fd fd52 	bl	8006cb4 <JDelete>
        return NULL;
 8009210:	2300      	movs	r3, #0
 8009212:	e004      	b.n	800921e <NoteRequestResponse+0x3a>
    }
    // Free the request and exit
    JDelete(req);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	0018      	movs	r0, r3
 8009218:	f7fd fd4c 	bl	8006cb4 <JDelete>
    return rsp;
 800921c:	68fb      	ldr	r3, [r7, #12]
}
 800921e:	0018      	movs	r0, r3
 8009220:	46bd      	mov	sp, r7
 8009222:	b004      	add	sp, #16
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <NoteTransaction>:

// Initiate a transaction to the card using reqdoc, and return the result in rspdoc.  This does
// NOT free the request structure.
J *NoteTransaction(J *req) {
 8009228:	b580      	push	{r7, lr}
 800922a:	b08a      	sub	sp, #40	; 0x28
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]

    // If a reset of the module is required for any reason, do it now.
    // We must do this before acquiring lock.
    if (resetRequired) {
 8009230:	4b3c      	ldr	r3, [pc, #240]	; (8009324 <NoteTransaction+0xfc>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <NoteTransaction+0x26>
        if (!NoteReset())
 8009238:	f000 f888 	bl	800934c <NoteReset>
 800923c:	0003      	movs	r3, r0
 800923e:	001a      	movs	r2, r3
 8009240:	2301      	movs	r3, #1
 8009242:	4053      	eors	r3, r2
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <NoteTransaction+0x26>
            return NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	e066      	b.n	800931c <NoteTransaction+0xf4>
    }

    // Lock
    _LockNote();
 800924e:	f7ff fead 	bl	8008fac <NoteFnLockNote>

    // Serialize the JSON requet
    char *json = JPrintUnformatted(req);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	0018      	movs	r0, r3
 8009256:	f7fe fccd 	bl	8007bf4 <JPrintUnformatted>
 800925a:	0003      	movs	r3, r0
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
    if (json == NULL) {
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	2b00      	cmp	r3, #0
 8009262:	d109      	bne.n	8009278 <NoteTransaction+0x50>
        J *rsp = errDoc("can't convert to JSON");
 8009264:	4b30      	ldr	r3, [pc, #192]	; (8009328 <NoteTransaction+0x100>)
 8009266:	0018      	movs	r0, r3
 8009268:	f7ff ff4a 	bl	8009100 <errDoc>
 800926c:	0003      	movs	r3, r0
 800926e:	613b      	str	r3, [r7, #16]
        _UnlockNote();
 8009270:	f7ff feaa 	bl	8008fc8 <NoteFnUnlockNote>
        return rsp;
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	e051      	b.n	800931c <NoteTransaction+0xf4>
    }
    
#ifdef SHOW_TRANSACTIONS
    _Debug(json);
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	0018      	movs	r0, r3
 800927c:	f7ff fe32 	bl	8008ee4 <NoteFnDebugMsg>
	_Debug("\n");
 8009280:	4b2a      	ldr	r3, [pc, #168]	; (800932c <NoteTransaction+0x104>)
 8009282:	0018      	movs	r0, r3
 8009284:	f7ff fe2e 	bl	8008ee4 <NoteFnDebugMsg>
#endif

    // Pertform the transaction
    char *responseJSON;
    const char *errStr = _Transaction(json, &responseJSON);
 8009288:	230c      	movs	r3, #12
 800928a:	18fa      	adds	r2, r7, r3
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	0011      	movs	r1, r2
 8009290:	0018      	movs	r0, r3
 8009292:	f7ff ff1b 	bl	80090cc <NoteFnTransaction>
 8009296:	0003      	movs	r3, r0
 8009298:	623b      	str	r3, [r7, #32]

    // Free the json
    JFree(json);
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	0018      	movs	r0, r3
 800929e:	f7fd fce7 	bl	8006c70 <JFree>

    // If error, queue up a reset
    if (errStr != NULL) {
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <NoteTransaction+0x98>
		NoteResetRequired();
 80092a8:	f000 f846 	bl	8009338 <NoteResetRequired>
        J *rsp = errDoc(errStr);
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	0018      	movs	r0, r3
 80092b0:	f7ff ff26 	bl	8009100 <errDoc>
 80092b4:	0003      	movs	r3, r0
 80092b6:	617b      	str	r3, [r7, #20]
        _UnlockNote();
 80092b8:	f7ff fe86 	bl	8008fc8 <NoteFnUnlockNote>
        return rsp;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	e02d      	b.n	800931c <NoteTransaction+0xf4>
    }

    // Parse the reply from the card on the input stream
    J *rspdoc = JParse(responseJSON);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	0018      	movs	r0, r3
 80092c4:	f7fe fc10 	bl	8007ae8 <JParse>
 80092c8:	0003      	movs	r3, r0
 80092ca:	61fb      	str	r3, [r7, #28]
    if (rspdoc == NULL) {
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d115      	bne.n	80092fe <NoteTransaction+0xd6>
        _Free(responseJSON);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	0018      	movs	r0, r3
 80092d6:	f7ff fe55 	bl	8008f84 <NoteFnFree>
        _Debug("unable to parse response JSON:\n");
 80092da:	4b15      	ldr	r3, [pc, #84]	; (8009330 <NoteTransaction+0x108>)
 80092dc:	0018      	movs	r0, r3
 80092de:	f7ff fe01 	bl	8008ee4 <NoteFnDebugMsg>
		_Debug(responseJSON);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	0018      	movs	r0, r3
 80092e6:	f7ff fdfd 	bl	8008ee4 <NoteFnDebugMsg>
        J *rsp = errDoc("unrecognized response from card");
 80092ea:	4b12      	ldr	r3, [pc, #72]	; (8009334 <NoteTransaction+0x10c>)
 80092ec:	0018      	movs	r0, r3
 80092ee:	f7ff ff07 	bl	8009100 <errDoc>
 80092f2:	0003      	movs	r3, r0
 80092f4:	61bb      	str	r3, [r7, #24]
        _UnlockNote();
 80092f6:	f7ff fe67 	bl	8008fc8 <NoteFnUnlockNote>
        return rsp;
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	e00e      	b.n	800931c <NoteTransaction+0xf4>
    }

    // Debug
#ifdef SHOW_TRANSACTIONS
    _Debug(responseJSON);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	0018      	movs	r0, r3
 8009302:	f7ff fdef 	bl	8008ee4 <NoteFnDebugMsg>
	_Debug("\n");
 8009306:	4b09      	ldr	r3, [pc, #36]	; (800932c <NoteTransaction+0x104>)
 8009308:	0018      	movs	r0, r3
 800930a:	f7ff fdeb 	bl	8008ee4 <NoteFnDebugMsg>
#endif

    // Discard the buffer now that it's parsed
    _Free(responseJSON);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	0018      	movs	r0, r3
 8009312:	f7ff fe37 	bl	8008f84 <NoteFnFree>

    // Unlock
    _UnlockNote();
 8009316:	f7ff fe57 	bl	8008fc8 <NoteFnUnlockNote>

    // Done
    return rspdoc;
 800931a:	69fb      	ldr	r3, [r7, #28]
    
}
 800931c:	0018      	movs	r0, r3
 800931e:	46bd      	mov	sp, r7
 8009320:	b00a      	add	sp, #40	; 0x28
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20000058 	.word	0x20000058
 8009328:	08009ac0 	.word	0x08009ac0
 800932c:	08009ad8 	.word	0x08009ad8
 8009330:	08009adc 	.word	0x08009adc
 8009334:	08009afc 	.word	0x08009afc

08009338 <NoteResetRequired>:

// Mark that a reset will be required before doing further I/O on a given port
void NoteResetRequired() {
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
    resetRequired = true;
 800933c:	4b02      	ldr	r3, [pc, #8]	; (8009348 <NoteResetRequired+0x10>)
 800933e:	2201      	movs	r2, #1
 8009340:	701a      	strb	r2, [r3, #0]
}
 8009342:	46c0      	nop			; (mov r8, r8)
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20000058 	.word	0x20000058

0800934c <NoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool NoteReset() {
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
    _LockNote();
 8009350:	f7ff fe2c 	bl	8008fac <NoteFnLockNote>
    resetRequired = !_NoteReset();
 8009354:	f7ff fea8 	bl	80090a8 <NoteFnNoteReset>
 8009358:	0003      	movs	r3, r0
 800935a:	1e5a      	subs	r2, r3, #1
 800935c:	4193      	sbcs	r3, r2
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2201      	movs	r2, #1
 8009362:	4053      	eors	r3, r2
 8009364:	b2db      	uxtb	r3, r3
 8009366:	1c1a      	adds	r2, r3, #0
 8009368:	2301      	movs	r3, #1
 800936a:	4013      	ands	r3, r2
 800936c:	b2da      	uxtb	r2, r3
 800936e:	4b09      	ldr	r3, [pc, #36]	; (8009394 <NoteReset+0x48>)
 8009370:	701a      	strb	r2, [r3, #0]
    _UnlockNote();
 8009372:	f7ff fe29 	bl	8008fc8 <NoteFnUnlockNote>
    return !resetRequired;
 8009376:	4b07      	ldr	r3, [pc, #28]	; (8009394 <NoteReset+0x48>)
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	1e5a      	subs	r2, r3, #1
 800937c:	4193      	sbcs	r3, r2
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2201      	movs	r2, #1
 8009382:	4053      	eors	r3, r2
 8009384:	b2db      	uxtb	r3, r3
 8009386:	1c1a      	adds	r2, r3, #0
 8009388:	2301      	movs	r3, #1
 800938a:	4013      	ands	r3, r2
 800938c:	b2db      	uxtb	r3, r3
}
 800938e:	0018      	movs	r0, r3
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20000058 	.word	0x20000058

08009398 <serialNoteTransaction>:
// copyright holder including that found in the LICENSE file.

#include "n_lib.h"

// Process a transaction over the serial port, returning NULL and a buffer if success, or an error string
const char *serialNoteTransaction(char *json, char **jsonResponse) {
 8009398:	b5b0      	push	{r4, r5, r7, lr}
 800939a:	b08c      	sub	sp, #48	; 0x30
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]

	// Transmit the request in segments so as not to overwhelm the notecard's interrupt buffers
	uint32_t segOff = 0;
 80093a2:	2300      	movs	r3, #0
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t segLeft = strlen(json);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	0018      	movs	r0, r3
 80093aa:	f7f6 feb7 	bl	800011c <strlen>
 80093ae:	0003      	movs	r3, r0
 80093b0:	62bb      	str	r3, [r7, #40]	; 0x28
	while (true) {
		size_t segLen = segLeft;
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (segLen > CARD_REQUEST_SEGMENT_MAX_LEN)
 80093b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b8:	23fa      	movs	r3, #250	; 0xfa
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	429a      	cmp	r2, r3
 80093be:	d902      	bls.n	80093c6 <serialNoteTransaction+0x2e>
			segLen = CARD_REQUEST_SEGMENT_MAX_LEN;
 80093c0:	23fa      	movs	r3, #250	; 0xfa
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	627b      	str	r3, [r7, #36]	; 0x24
		segLeft -= segLen;
 80093c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	62bb      	str	r3, [r7, #40]	; 0x28
		_SerialTransmit((uint8_t *)&json[segOff], segLen, false);
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d2:	18d3      	adds	r3, r2, r3
 80093d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093d6:	2200      	movs	r2, #0
 80093d8:	0018      	movs	r0, r3
 80093da:	f7ff fe17 	bl	800900c <NoteFnSerialTransmit>
		if (segLeft == 0) {
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10b      	bne.n	80093fc <serialNoteTransaction+0x64>
			_SerialTransmit((uint8_t *)"\n", 1, true);
 80093e4:	4b6f      	ldr	r3, [pc, #444]	; (80095a4 <serialNoteTransaction+0x20c>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	2101      	movs	r1, #1
 80093ea:	0018      	movs	r0, r3
 80093ec:	f7ff fe0e 	bl	800900c <NoteFnSerialTransmit>
			break;
 80093f0:	46c0      	nop			; (mov r8, r8)
	// Wait for something to become available, processing timeout errors up-front
	// because the json parse operation immediately following is subject to the
	// serial port timeout. We'd like more flexibility in max timeout and ultimately
	// in our error handling.
	uint32_t start;
	for (start = _GetMs(); !_SerialAvailable(); ) {
 80093f2:	f7ff fd8b 	bl	8008f0c <NoteFnGetMs>
 80093f6:	0003      	movs	r3, r0
 80093f8:	613b      	str	r3, [r7, #16]
 80093fa:	e019      	b.n	8009430 <serialNoteTransaction+0x98>
		segOff += segLen;
 80093fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	18d3      	adds	r3, r2, r3
 8009402:	62fb      	str	r3, [r7, #44]	; 0x2c
		_DelayMs(CARD_REQUEST_SEGMENT_DELAY_MS);
 8009404:	20fa      	movs	r0, #250	; 0xfa
 8009406:	f7ff fd93 	bl	8008f30 <NoteFnDelayMs>
	while (true) {
 800940a:	e7d2      	b.n	80093b2 <serialNoteTransaction+0x1a>
		if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 800940c:	f7ff fd7e 	bl	8008f0c <NoteFnGetMs>
 8009410:	0002      	movs	r2, r0
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	4964      	ldr	r1, [pc, #400]	; (80095a8 <serialNoteTransaction+0x210>)
 8009416:	468c      	mov	ip, r1
 8009418:	4463      	add	r3, ip
 800941a:	429a      	cmp	r2, r3
 800941c:	d305      	bcc.n	800942a <serialNoteTransaction+0x92>
			_Debug("reply to request didn't arrive from module in time\n");
 800941e:	4b63      	ldr	r3, [pc, #396]	; (80095ac <serialNoteTransaction+0x214>)
 8009420:	0018      	movs	r0, r3
 8009422:	f7ff fd5f 	bl	8008ee4 <NoteFnDebugMsg>
			return "transaction timeout";
 8009426:	4b62      	ldr	r3, [pc, #392]	; (80095b0 <serialNoteTransaction+0x218>)
 8009428:	e0b7      	b.n	800959a <serialNoteTransaction+0x202>
		}
		_DelayMs(10);
 800942a:	200a      	movs	r0, #10
 800942c:	f7ff fd80 	bl	8008f30 <NoteFnDelayMs>
	for (start = _GetMs(); !_SerialAvailable(); ) {
 8009430:	f7ff fe0a 	bl	8009048 <NoteFnSerialAvailable>
 8009434:	0003      	movs	r3, r0
 8009436:	001a      	movs	r2, r3
 8009438:	2301      	movs	r3, #1
 800943a:	4053      	eors	r3, r2
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e4      	bne.n	800940c <serialNoteTransaction+0x74>
	}

	// Allocate a buffer for input, noting that we always put the +1 in the alloc so we can be assured
	// that it can be null-terminated.	This must be the case because json parsing requires a
	// null-terminated string.
	int jsonbufAllocLen = 1024;
 8009442:	2380      	movs	r3, #128	; 0x80
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	623b      	str	r3, [r7, #32]
	char *jsonbuf = (char *) _Malloc(jsonbufAllocLen+1);
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	3301      	adds	r3, #1
 800944c:	0018      	movs	r0, r3
 800944e:	f7ff fd83 	bl	8008f58 <NoteFnMalloc>
 8009452:	0003      	movs	r3, r0
 8009454:	61fb      	str	r3, [r7, #28]
	if (jsonbuf == NULL) {
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d105      	bne.n	8009468 <serialNoteTransaction+0xd0>
		_Debug("transaction: jsonbuf malloc failed\n");
 800945c:	4b55      	ldr	r3, [pc, #340]	; (80095b4 <serialNoteTransaction+0x21c>)
 800945e:	0018      	movs	r0, r3
 8009460:	f7ff fd40 	bl	8008ee4 <NoteFnDebugMsg>
		return "insufficient memory";
 8009464:	4b54      	ldr	r3, [pc, #336]	; (80095b8 <serialNoteTransaction+0x220>)
 8009466:	e098      	b.n	800959a <serialNoteTransaction+0x202>
	}
	int jsonbufLen = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	61bb      	str	r3, [r7, #24]
	char ch = 0;
 800946c:	2317      	movs	r3, #23
 800946e:	18fb      	adds	r3, r7, r3
 8009470:	2200      	movs	r2, #0
 8009472:	701a      	strb	r2, [r3, #0]
	start = _GetMs();
 8009474:	f7ff fd4a 	bl	8008f0c <NoteFnGetMs>
 8009478:	0003      	movs	r3, r0
 800947a:	613b      	str	r3, [r7, #16]
	while (ch != '\n') {
 800947c:	e07e      	b.n	800957c <serialNoteTransaction+0x1e4>
		if (!_SerialAvailable()) {
 800947e:	f7ff fde3 	bl	8009048 <NoteFnSerialAvailable>
 8009482:	0003      	movs	r3, r0
 8009484:	001a      	movs	r2, r3
 8009486:	2301      	movs	r3, #1
 8009488:	4053      	eors	r3, r2
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	d027      	beq.n	80094e0 <serialNoteTransaction+0x148>
			ch = 0;
 8009490:	2317      	movs	r3, #23
 8009492:	18fb      	adds	r3, r7, r3
 8009494:	2200      	movs	r2, #0
 8009496:	701a      	strb	r2, [r3, #0]
			if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 8009498:	f7ff fd38 	bl	8008f0c <NoteFnGetMs>
 800949c:	0002      	movs	r2, r0
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	4941      	ldr	r1, [pc, #260]	; (80095a8 <serialNoteTransaction+0x210>)
 80094a2:	468c      	mov	ip, r1
 80094a4:	4463      	add	r3, ip
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d316      	bcc.n	80094d8 <serialNoteTransaction+0x140>
				jsonbuf[jsonbufLen] = '\0';
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	18d3      	adds	r3, r2, r3
 80094b0:	2200      	movs	r2, #0
 80094b2:	701a      	strb	r2, [r3, #0]
				_Debug("received only partial reply after timeout:\n");
 80094b4:	4b41      	ldr	r3, [pc, #260]	; (80095bc <serialNoteTransaction+0x224>)
 80094b6:	0018      	movs	r0, r3
 80094b8:	f7ff fd14 	bl	8008ee4 <NoteFnDebugMsg>
				_Debug(jsonbuf);
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	0018      	movs	r0, r3
 80094c0:	f7ff fd10 	bl	8008ee4 <NoteFnDebugMsg>
				_Debug("\n");
 80094c4:	4b37      	ldr	r3, [pc, #220]	; (80095a4 <serialNoteTransaction+0x20c>)
 80094c6:	0018      	movs	r0, r3
 80094c8:	f7ff fd0c 	bl	8008ee4 <NoteFnDebugMsg>
				_Free(jsonbuf);
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	0018      	movs	r0, r3
 80094d0:	f7ff fd58 	bl	8008f84 <NoteFnFree>
				return "transaction incomplete";
 80094d4:	4b3a      	ldr	r3, [pc, #232]	; (80095c0 <serialNoteTransaction+0x228>)
 80094d6:	e060      	b.n	800959a <serialNoteTransaction+0x202>
			}
			_DelayMs(1);
 80094d8:	2001      	movs	r0, #1
 80094da:	f7ff fd29 	bl	8008f30 <NoteFnDelayMs>
			continue;
 80094de:	e04d      	b.n	800957c <serialNoteTransaction+0x1e4>
		}
		ch = _SerialReceive();
 80094e0:	2517      	movs	r5, #23
 80094e2:	197c      	adds	r4, r7, r5
 80094e4:	f7ff fdc8 	bl	8009078 <NoteFnSerialReceive>
 80094e8:	0003      	movs	r3, r0
 80094ea:	7023      	strb	r3, [r4, #0]

		// Because serial I/O can be error-prone, catch common bad data early, knowing that we only accept ASCII
		if (ch == 0 || (ch & 0x80) != 0) {
 80094ec:	197b      	adds	r3, r7, r5
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d005      	beq.n	8009500 <serialNoteTransaction+0x168>
 80094f4:	2317      	movs	r3, #23
 80094f6:	18fb      	adds	r3, r7, r3
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	b25b      	sxtb	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	da09      	bge.n	8009514 <serialNoteTransaction+0x17c>
			_Debug("invalid data received on serial port from notecard\n");
 8009500:	4b30      	ldr	r3, [pc, #192]	; (80095c4 <serialNoteTransaction+0x22c>)
 8009502:	0018      	movs	r0, r3
 8009504:	f7ff fcee 	bl	8008ee4 <NoteFnDebugMsg>
			_Free(jsonbuf);
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	0018      	movs	r0, r3
 800950c:	f7ff fd3a 	bl	8008f84 <NoteFnFree>
			return "serial communications error";
 8009510:	4b2d      	ldr	r3, [pc, #180]	; (80095c8 <serialNoteTransaction+0x230>)
 8009512:	e042      	b.n	800959a <serialNoteTransaction+0x202>
		}

		// Append into the json buffer
		jsonbuf[jsonbufLen++] = ch;
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	1c5a      	adds	r2, r3, #1
 8009518:	61ba      	str	r2, [r7, #24]
 800951a:	001a      	movs	r2, r3
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	189b      	adds	r3, r3, r2
 8009520:	2217      	movs	r2, #23
 8009522:	18ba      	adds	r2, r7, r2
 8009524:	7812      	ldrb	r2, [r2, #0]
 8009526:	701a      	strb	r2, [r3, #0]
		if (jsonbufLen >= jsonbufAllocLen) {
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	429a      	cmp	r2, r3
 800952e:	db25      	blt.n	800957c <serialNoteTransaction+0x1e4>
			jsonbufAllocLen += 512;
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	2280      	movs	r2, #128	; 0x80
 8009534:	0092      	lsls	r2, r2, #2
 8009536:	4694      	mov	ip, r2
 8009538:	4463      	add	r3, ip
 800953a:	623b      	str	r3, [r7, #32]
			char *jsonbufNew = (char *) _Malloc(jsonbufAllocLen+1);
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	3301      	adds	r3, #1
 8009540:	0018      	movs	r0, r3
 8009542:	f7ff fd09 	bl	8008f58 <NoteFnMalloc>
 8009546:	0003      	movs	r3, r0
 8009548:	60fb      	str	r3, [r7, #12]
			if (jsonbufNew == NULL) {
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d109      	bne.n	8009564 <serialNoteTransaction+0x1cc>
				_Debug("transaction: jsonbuf malloc grow failed\n");
 8009550:	4b1e      	ldr	r3, [pc, #120]	; (80095cc <serialNoteTransaction+0x234>)
 8009552:	0018      	movs	r0, r3
 8009554:	f7ff fcc6 	bl	8008ee4 <NoteFnDebugMsg>
				_Free(jsonbuf);
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	0018      	movs	r0, r3
 800955c:	f7ff fd12 	bl	8008f84 <NoteFnFree>
				return "insufficient memory";
 8009560:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <serialNoteTransaction+0x220>)
 8009562:	e01a      	b.n	800959a <serialNoteTransaction+0x202>
			}
			memcpy(jsonbufNew, jsonbuf, jsonbufLen);
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	69f9      	ldr	r1, [r7, #28]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	0018      	movs	r0, r3
 800956c:	f000 f908 	bl	8009780 <memcpy>
			_Free(jsonbuf);
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	0018      	movs	r0, r3
 8009574:	f7ff fd06 	bl	8008f84 <NoteFnFree>
			jsonbuf = jsonbufNew;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	61fb      	str	r3, [r7, #28]
	while (ch != '\n') {
 800957c:	2317      	movs	r3, #23
 800957e:	18fb      	adds	r3, r7, r3
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b0a      	cmp	r3, #10
 8009584:	d000      	beq.n	8009588 <serialNoteTransaction+0x1f0>
 8009586:	e77a      	b.n	800947e <serialNoteTransaction+0xe6>
		}
	}

	// Null-terminate it, using the +1 space that we'd allocated in the buffer
	jsonbuf[jsonbufLen] = '\0';
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	18d3      	adds	r3, r2, r3
 800958e:	2200      	movs	r2, #0
 8009590:	701a      	strb	r2, [r3, #0]

	// Return it
	*jsonResponse = jsonbuf;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	69fa      	ldr	r2, [r7, #28]
 8009596:	601a      	str	r2, [r3, #0]
	return NULL;
 8009598:	2300      	movs	r3, #0

}
 800959a:	0018      	movs	r0, r3
 800959c:	46bd      	mov	sp, r7
 800959e:	b00c      	add	sp, #48	; 0x30
 80095a0:	bdb0      	pop	{r4, r5, r7, pc}
 80095a2:	46c0      	nop			; (mov r8, r8)
 80095a4:	08009b1c 	.word	0x08009b1c
 80095a8:	00002710 	.word	0x00002710
 80095ac:	08009b20 	.word	0x08009b20
 80095b0:	08009b54 	.word	0x08009b54
 80095b4:	08009b68 	.word	0x08009b68
 80095b8:	08009b8c 	.word	0x08009b8c
 80095bc:	08009ba0 	.word	0x08009ba0
 80095c0:	08009bcc 	.word	0x08009bcc
 80095c4:	08009be4 	.word	0x08009be4
 80095c8:	08009c18 	.word	0x08009c18
 80095cc:	08009c34 	.word	0x08009c34

080095d0 <serialNoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool serialNoteReset() {
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0

	// Initialize, or re-initialize.  Because we've observed Arduino serial driver flakiness,
	_DelayMs(250);
 80095d6:	20fa      	movs	r0, #250	; 0xfa
 80095d8:	f7ff fcaa 	bl	8008f30 <NoteFnDelayMs>
	_SerialReset();
 80095dc:	f7ff fd02 	bl	8008fe4 <NoteFnSerialReset>

	// The guaranteed behavior for robust resyncing is to send two newlines
	// and	wait for two echoed blank lines in return.
	bool notecardReady = false;
 80095e0:	230f      	movs	r3, #15
 80095e2:	18fb      	adds	r3, r7, r3
 80095e4:	2200      	movs	r2, #0
 80095e6:	701a      	strb	r2, [r3, #0]
	int retries;
	for (retries=0; retries<10; retries++) {
 80095e8:	2300      	movs	r3, #0
 80095ea:	60bb      	str	r3, [r7, #8]
 80095ec:	e057      	b.n	800969e <serialNoteReset+0xce>

		_Debug("notecard serial reset\n");
 80095ee:	4b31      	ldr	r3, [pc, #196]	; (80096b4 <serialNoteReset+0xe4>)
 80095f0:	0018      	movs	r0, r3
 80095f2:	f7ff fc77 	bl	8008ee4 <NoteFnDebugMsg>

		// Send a few newlines to the module to clean out request/response processing
		_SerialTransmit((uint8_t *)"\n\n", 2, true);
 80095f6:	4b30      	ldr	r3, [pc, #192]	; (80096b8 <serialNoteReset+0xe8>)
 80095f8:	2201      	movs	r2, #1
 80095fa:	2102      	movs	r1, #2
 80095fc:	0018      	movs	r0, r3
 80095fe:	f7ff fd05 	bl	800900c <NoteFnSerialTransmit>

		// Drain all serial for 500ms
		bool somethingFound = false;
 8009602:	1dfb      	adds	r3, r7, #7
 8009604:	2200      	movs	r2, #0
 8009606:	701a      	strb	r2, [r3, #0]
		bool nonControlCharFound = false;
 8009608:	1dbb      	adds	r3, r7, #6
 800960a:	2200      	movs	r2, #0
 800960c:	701a      	strb	r2, [r3, #0]
		uint32_t start = _GetMs();
 800960e:	f7ff fc7d 	bl	8008f0c <NoteFnGetMs>
 8009612:	0003      	movs	r3, r0
 8009614:	603b      	str	r3, [r7, #0]
		while (_GetMs() < start+500) {
 8009616:	e016      	b.n	8009646 <serialNoteReset+0x76>
			while (_SerialAvailable()) {
				somethingFound = true;
 8009618:	1dfb      	adds	r3, r7, #7
 800961a:	2201      	movs	r2, #1
 800961c:	701a      	strb	r2, [r3, #0]
				if (_SerialReceive() >= ' ')
 800961e:	f7ff fd2b 	bl	8009078 <NoteFnSerialReceive>
 8009622:	0003      	movs	r3, r0
 8009624:	0019      	movs	r1, r3
 8009626:	1dbb      	adds	r3, r7, #6
 8009628:	1dba      	adds	r2, r7, #6
 800962a:	7812      	ldrb	r2, [r2, #0]
 800962c:	701a      	strb	r2, [r3, #0]
 800962e:	291f      	cmp	r1, #31
 8009630:	d902      	bls.n	8009638 <serialNoteReset+0x68>
					nonControlCharFound = true;
 8009632:	1dbb      	adds	r3, r7, #6
 8009634:	2201      	movs	r2, #1
 8009636:	701a      	strb	r2, [r3, #0]
			while (_SerialAvailable()) {
 8009638:	f7ff fd06 	bl	8009048 <NoteFnSerialAvailable>
 800963c:	1e03      	subs	r3, r0, #0
 800963e:	d1eb      	bne.n	8009618 <serialNoteReset+0x48>
			}
			_DelayMs(1);
 8009640:	2001      	movs	r0, #1
 8009642:	f7ff fc75 	bl	8008f30 <NoteFnDelayMs>
		while (_GetMs() < start+500) {
 8009646:	f7ff fc61 	bl	8008f0c <NoteFnGetMs>
 800964a:	0002      	movs	r2, r0
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	33f5      	adds	r3, #245	; 0xf5
 8009650:	33ff      	adds	r3, #255	; 0xff
 8009652:	429a      	cmp	r2, r3
 8009654:	d3f0      	bcc.n	8009638 <serialNoteReset+0x68>
		}

		// If all we got back is newlines, we're ready
		if (somethingFound && !nonControlCharFound) {
 8009656:	1dfb      	adds	r3, r7, #7
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <serialNoteReset+0xa6>
 800965e:	1dbb      	adds	r3, r7, #6
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	2201      	movs	r2, #1
 8009664:	4053      	eors	r3, r2
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b00      	cmp	r3, #0
 800966a:	d004      	beq.n	8009676 <serialNoteReset+0xa6>
			notecardReady = true;
 800966c:	230f      	movs	r3, #15
 800966e:	18fb      	adds	r3, r7, r3
 8009670:	2201      	movs	r2, #1
 8009672:	701a      	strb	r2, [r3, #0]
			break;
 8009674:	e016      	b.n	80096a4 <serialNoteReset+0xd4>
		}

		_Debug(somethingFound ? "unrecognized data from notecard\n" : "notecard not responding\n");
 8009676:	1dfb      	adds	r3, r7, #7
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <serialNoteReset+0xb2>
 800967e:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <serialNoteReset+0xec>)
 8009680:	e000      	b.n	8009684 <serialNoteReset+0xb4>
 8009682:	4b0f      	ldr	r3, [pc, #60]	; (80096c0 <serialNoteReset+0xf0>)
 8009684:	0018      	movs	r0, r3
 8009686:	f7ff fc2d 	bl	8008ee4 <NoteFnDebugMsg>
		_DelayMs(500);
 800968a:	23fa      	movs	r3, #250	; 0xfa
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	0018      	movs	r0, r3
 8009690:	f7ff fc4e 	bl	8008f30 <NoteFnDelayMs>
		_SerialReset();
 8009694:	f7ff fca6 	bl	8008fe4 <NoteFnSerialReset>
	for (retries=0; retries<10; retries++) {
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	3301      	adds	r3, #1
 800969c:	60bb      	str	r3, [r7, #8]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b09      	cmp	r3, #9
 80096a2:	dda4      	ble.n	80095ee <serialNoteReset+0x1e>

	}

	// Done
	return notecardReady;
 80096a4:	230f      	movs	r3, #15
 80096a6:	18fb      	adds	r3, r7, r3
 80096a8:	781b      	ldrb	r3, [r3, #0]
}
 80096aa:	0018      	movs	r0, r3
 80096ac:	46bd      	mov	sp, r7
 80096ae:	b004      	add	sp, #16
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	46c0      	nop			; (mov r8, r8)
 80096b4:	08009c60 	.word	0x08009c60
 80096b8:	08009c78 	.word	0x08009c78
 80096bc:	08009c7c 	.word	0x08009c7c
 80096c0:	08009ca0 	.word	0x08009ca0

080096c4 <__errno>:
 80096c4:	4b01      	ldr	r3, [pc, #4]	; (80096cc <__errno+0x8>)
 80096c6:	6818      	ldr	r0, [r3, #0]
 80096c8:	4770      	bx	lr
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	2000005c 	.word	0x2000005c

080096d0 <__libc_init_array>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	2600      	movs	r6, #0
 80096d4:	4d0c      	ldr	r5, [pc, #48]	; (8009708 <__libc_init_array+0x38>)
 80096d6:	4c0d      	ldr	r4, [pc, #52]	; (800970c <__libc_init_array+0x3c>)
 80096d8:	1b64      	subs	r4, r4, r5
 80096da:	10a4      	asrs	r4, r4, #2
 80096dc:	42a6      	cmp	r6, r4
 80096de:	d109      	bne.n	80096f4 <__libc_init_array+0x24>
 80096e0:	2600      	movs	r6, #0
 80096e2:	f000 f947 	bl	8009974 <_init>
 80096e6:	4d0a      	ldr	r5, [pc, #40]	; (8009710 <__libc_init_array+0x40>)
 80096e8:	4c0a      	ldr	r4, [pc, #40]	; (8009714 <__libc_init_array+0x44>)
 80096ea:	1b64      	subs	r4, r4, r5
 80096ec:	10a4      	asrs	r4, r4, #2
 80096ee:	42a6      	cmp	r6, r4
 80096f0:	d105      	bne.n	80096fe <__libc_init_array+0x2e>
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
 80096f4:	00b3      	lsls	r3, r6, #2
 80096f6:	58eb      	ldr	r3, [r5, r3]
 80096f8:	4798      	blx	r3
 80096fa:	3601      	adds	r6, #1
 80096fc:	e7ee      	b.n	80096dc <__libc_init_array+0xc>
 80096fe:	00b3      	lsls	r3, r6, #2
 8009700:	58eb      	ldr	r3, [r5, r3]
 8009702:	4798      	blx	r3
 8009704:	3601      	adds	r6, #1
 8009706:	e7f2      	b.n	80096ee <__libc_init_array+0x1e>
 8009708:	0800a154 	.word	0x0800a154
 800970c:	0800a154 	.word	0x0800a154
 8009710:	0800a154 	.word	0x0800a154
 8009714:	0800a158 	.word	0x0800a158

08009718 <__locale_ctype_ptr>:
 8009718:	4b04      	ldr	r3, [pc, #16]	; (800972c <__locale_ctype_ptr+0x14>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d100      	bne.n	8009724 <__locale_ctype_ptr+0xc>
 8009722:	4b03      	ldr	r3, [pc, #12]	; (8009730 <__locale_ctype_ptr+0x18>)
 8009724:	33ec      	adds	r3, #236	; 0xec
 8009726:	6818      	ldr	r0, [r3, #0]
 8009728:	4770      	bx	lr
 800972a:	46c0      	nop			; (mov r8, r8)
 800972c:	2000005c 	.word	0x2000005c
 8009730:	200000c0 	.word	0x200000c0

08009734 <malloc>:
 8009734:	b510      	push	{r4, lr}
 8009736:	4b03      	ldr	r3, [pc, #12]	; (8009744 <malloc+0x10>)
 8009738:	0001      	movs	r1, r0
 800973a:	6818      	ldr	r0, [r3, #0]
 800973c:	f000 f87c 	bl	8009838 <_malloc_r>
 8009740:	bd10      	pop	{r4, pc}
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	2000005c 	.word	0x2000005c

08009748 <free>:
 8009748:	b510      	push	{r4, lr}
 800974a:	4b03      	ldr	r3, [pc, #12]	; (8009758 <free+0x10>)
 800974c:	0001      	movs	r1, r0
 800974e:	6818      	ldr	r0, [r3, #0]
 8009750:	f000 f828 	bl	80097a4 <_free_r>
 8009754:	bd10      	pop	{r4, pc}
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	2000005c 	.word	0x2000005c

0800975c <__ascii_mbtowc>:
 800975c:	b082      	sub	sp, #8
 800975e:	2900      	cmp	r1, #0
 8009760:	d100      	bne.n	8009764 <__ascii_mbtowc+0x8>
 8009762:	a901      	add	r1, sp, #4
 8009764:	1e10      	subs	r0, r2, #0
 8009766:	d006      	beq.n	8009776 <__ascii_mbtowc+0x1a>
 8009768:	2b00      	cmp	r3, #0
 800976a:	d006      	beq.n	800977a <__ascii_mbtowc+0x1e>
 800976c:	7813      	ldrb	r3, [r2, #0]
 800976e:	600b      	str	r3, [r1, #0]
 8009770:	7810      	ldrb	r0, [r2, #0]
 8009772:	1e43      	subs	r3, r0, #1
 8009774:	4198      	sbcs	r0, r3
 8009776:	b002      	add	sp, #8
 8009778:	4770      	bx	lr
 800977a:	2002      	movs	r0, #2
 800977c:	4240      	negs	r0, r0
 800977e:	e7fa      	b.n	8009776 <__ascii_mbtowc+0x1a>

08009780 <memcpy>:
 8009780:	2300      	movs	r3, #0
 8009782:	b510      	push	{r4, lr}
 8009784:	429a      	cmp	r2, r3
 8009786:	d100      	bne.n	800978a <memcpy+0xa>
 8009788:	bd10      	pop	{r4, pc}
 800978a:	5ccc      	ldrb	r4, [r1, r3]
 800978c:	54c4      	strb	r4, [r0, r3]
 800978e:	3301      	adds	r3, #1
 8009790:	e7f8      	b.n	8009784 <memcpy+0x4>

08009792 <memset>:
 8009792:	0003      	movs	r3, r0
 8009794:	1812      	adds	r2, r2, r0
 8009796:	4293      	cmp	r3, r2
 8009798:	d100      	bne.n	800979c <memset+0xa>
 800979a:	4770      	bx	lr
 800979c:	7019      	strb	r1, [r3, #0]
 800979e:	3301      	adds	r3, #1
 80097a0:	e7f9      	b.n	8009796 <memset+0x4>
	...

080097a4 <_free_r>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	0005      	movs	r5, r0
 80097a8:	2900      	cmp	r1, #0
 80097aa:	d010      	beq.n	80097ce <_free_r+0x2a>
 80097ac:	1f0c      	subs	r4, r1, #4
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	da00      	bge.n	80097b6 <_free_r+0x12>
 80097b4:	18e4      	adds	r4, r4, r3
 80097b6:	0028      	movs	r0, r5
 80097b8:	f000 f8d9 	bl	800996e <__malloc_lock>
 80097bc:	4a1d      	ldr	r2, [pc, #116]	; (8009834 <_free_r+0x90>)
 80097be:	6813      	ldr	r3, [r2, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d105      	bne.n	80097d0 <_free_r+0x2c>
 80097c4:	6063      	str	r3, [r4, #4]
 80097c6:	6014      	str	r4, [r2, #0]
 80097c8:	0028      	movs	r0, r5
 80097ca:	f000 f8d1 	bl	8009970 <__malloc_unlock>
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	42a3      	cmp	r3, r4
 80097d2:	d909      	bls.n	80097e8 <_free_r+0x44>
 80097d4:	6821      	ldr	r1, [r4, #0]
 80097d6:	1860      	adds	r0, r4, r1
 80097d8:	4283      	cmp	r3, r0
 80097da:	d1f3      	bne.n	80097c4 <_free_r+0x20>
 80097dc:	6818      	ldr	r0, [r3, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	1841      	adds	r1, r0, r1
 80097e2:	6021      	str	r1, [r4, #0]
 80097e4:	e7ee      	b.n	80097c4 <_free_r+0x20>
 80097e6:	0013      	movs	r3, r2
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	d001      	beq.n	80097f2 <_free_r+0x4e>
 80097ee:	42a2      	cmp	r2, r4
 80097f0:	d9f9      	bls.n	80097e6 <_free_r+0x42>
 80097f2:	6819      	ldr	r1, [r3, #0]
 80097f4:	1858      	adds	r0, r3, r1
 80097f6:	42a0      	cmp	r0, r4
 80097f8:	d10b      	bne.n	8009812 <_free_r+0x6e>
 80097fa:	6820      	ldr	r0, [r4, #0]
 80097fc:	1809      	adds	r1, r1, r0
 80097fe:	1858      	adds	r0, r3, r1
 8009800:	6019      	str	r1, [r3, #0]
 8009802:	4282      	cmp	r2, r0
 8009804:	d1e0      	bne.n	80097c8 <_free_r+0x24>
 8009806:	6810      	ldr	r0, [r2, #0]
 8009808:	6852      	ldr	r2, [r2, #4]
 800980a:	1841      	adds	r1, r0, r1
 800980c:	6019      	str	r1, [r3, #0]
 800980e:	605a      	str	r2, [r3, #4]
 8009810:	e7da      	b.n	80097c8 <_free_r+0x24>
 8009812:	42a0      	cmp	r0, r4
 8009814:	d902      	bls.n	800981c <_free_r+0x78>
 8009816:	230c      	movs	r3, #12
 8009818:	602b      	str	r3, [r5, #0]
 800981a:	e7d5      	b.n	80097c8 <_free_r+0x24>
 800981c:	6821      	ldr	r1, [r4, #0]
 800981e:	1860      	adds	r0, r4, r1
 8009820:	4282      	cmp	r2, r0
 8009822:	d103      	bne.n	800982c <_free_r+0x88>
 8009824:	6810      	ldr	r0, [r2, #0]
 8009826:	6852      	ldr	r2, [r2, #4]
 8009828:	1841      	adds	r1, r0, r1
 800982a:	6021      	str	r1, [r4, #0]
 800982c:	6062      	str	r2, [r4, #4]
 800982e:	605c      	str	r4, [r3, #4]
 8009830:	e7ca      	b.n	80097c8 <_free_r+0x24>
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	200004b0 	.word	0x200004b0

08009838 <_malloc_r>:
 8009838:	2303      	movs	r3, #3
 800983a:	b570      	push	{r4, r5, r6, lr}
 800983c:	1ccd      	adds	r5, r1, #3
 800983e:	439d      	bics	r5, r3
 8009840:	3508      	adds	r5, #8
 8009842:	0006      	movs	r6, r0
 8009844:	2d0c      	cmp	r5, #12
 8009846:	d21e      	bcs.n	8009886 <_malloc_r+0x4e>
 8009848:	250c      	movs	r5, #12
 800984a:	42a9      	cmp	r1, r5
 800984c:	d81d      	bhi.n	800988a <_malloc_r+0x52>
 800984e:	0030      	movs	r0, r6
 8009850:	f000 f88d 	bl	800996e <__malloc_lock>
 8009854:	4a25      	ldr	r2, [pc, #148]	; (80098ec <_malloc_r+0xb4>)
 8009856:	6814      	ldr	r4, [r2, #0]
 8009858:	0021      	movs	r1, r4
 800985a:	2900      	cmp	r1, #0
 800985c:	d119      	bne.n	8009892 <_malloc_r+0x5a>
 800985e:	4c24      	ldr	r4, [pc, #144]	; (80098f0 <_malloc_r+0xb8>)
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d103      	bne.n	800986e <_malloc_r+0x36>
 8009866:	0030      	movs	r0, r6
 8009868:	f000 f844 	bl	80098f4 <_sbrk_r>
 800986c:	6020      	str	r0, [r4, #0]
 800986e:	0029      	movs	r1, r5
 8009870:	0030      	movs	r0, r6
 8009872:	f000 f83f 	bl	80098f4 <_sbrk_r>
 8009876:	1c43      	adds	r3, r0, #1
 8009878:	d12b      	bne.n	80098d2 <_malloc_r+0x9a>
 800987a:	230c      	movs	r3, #12
 800987c:	0030      	movs	r0, r6
 800987e:	6033      	str	r3, [r6, #0]
 8009880:	f000 f876 	bl	8009970 <__malloc_unlock>
 8009884:	e003      	b.n	800988e <_malloc_r+0x56>
 8009886:	2d00      	cmp	r5, #0
 8009888:	dadf      	bge.n	800984a <_malloc_r+0x12>
 800988a:	230c      	movs	r3, #12
 800988c:	6033      	str	r3, [r6, #0]
 800988e:	2000      	movs	r0, #0
 8009890:	bd70      	pop	{r4, r5, r6, pc}
 8009892:	680b      	ldr	r3, [r1, #0]
 8009894:	1b5b      	subs	r3, r3, r5
 8009896:	d419      	bmi.n	80098cc <_malloc_r+0x94>
 8009898:	2b0b      	cmp	r3, #11
 800989a:	d903      	bls.n	80098a4 <_malloc_r+0x6c>
 800989c:	600b      	str	r3, [r1, #0]
 800989e:	18cc      	adds	r4, r1, r3
 80098a0:	6025      	str	r5, [r4, #0]
 80098a2:	e003      	b.n	80098ac <_malloc_r+0x74>
 80098a4:	684b      	ldr	r3, [r1, #4]
 80098a6:	428c      	cmp	r4, r1
 80098a8:	d10d      	bne.n	80098c6 <_malloc_r+0x8e>
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	0030      	movs	r0, r6
 80098ae:	f000 f85f 	bl	8009970 <__malloc_unlock>
 80098b2:	0020      	movs	r0, r4
 80098b4:	2207      	movs	r2, #7
 80098b6:	300b      	adds	r0, #11
 80098b8:	1d23      	adds	r3, r4, #4
 80098ba:	4390      	bics	r0, r2
 80098bc:	1ac3      	subs	r3, r0, r3
 80098be:	d0e7      	beq.n	8009890 <_malloc_r+0x58>
 80098c0:	425a      	negs	r2, r3
 80098c2:	50e2      	str	r2, [r4, r3]
 80098c4:	e7e4      	b.n	8009890 <_malloc_r+0x58>
 80098c6:	6063      	str	r3, [r4, #4]
 80098c8:	000c      	movs	r4, r1
 80098ca:	e7ef      	b.n	80098ac <_malloc_r+0x74>
 80098cc:	000c      	movs	r4, r1
 80098ce:	6849      	ldr	r1, [r1, #4]
 80098d0:	e7c3      	b.n	800985a <_malloc_r+0x22>
 80098d2:	2303      	movs	r3, #3
 80098d4:	1cc4      	adds	r4, r0, #3
 80098d6:	439c      	bics	r4, r3
 80098d8:	42a0      	cmp	r0, r4
 80098da:	d0e1      	beq.n	80098a0 <_malloc_r+0x68>
 80098dc:	1a21      	subs	r1, r4, r0
 80098de:	0030      	movs	r0, r6
 80098e0:	f000 f808 	bl	80098f4 <_sbrk_r>
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	d1db      	bne.n	80098a0 <_malloc_r+0x68>
 80098e8:	e7c7      	b.n	800987a <_malloc_r+0x42>
 80098ea:	46c0      	nop			; (mov r8, r8)
 80098ec:	200004b0 	.word	0x200004b0
 80098f0:	200004b4 	.word	0x200004b4

080098f4 <_sbrk_r>:
 80098f4:	2300      	movs	r3, #0
 80098f6:	b570      	push	{r4, r5, r6, lr}
 80098f8:	4c06      	ldr	r4, [pc, #24]	; (8009914 <_sbrk_r+0x20>)
 80098fa:	0005      	movs	r5, r0
 80098fc:	0008      	movs	r0, r1
 80098fe:	6023      	str	r3, [r4, #0]
 8009900:	f7fc fe66 	bl	80065d0 <_sbrk>
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	d103      	bne.n	8009910 <_sbrk_r+0x1c>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d000      	beq.n	8009910 <_sbrk_r+0x1c>
 800990e:	602b      	str	r3, [r5, #0]
 8009910:	bd70      	pop	{r4, r5, r6, pc}
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	200005b8 	.word	0x200005b8

08009918 <strchr>:
 8009918:	b2c9      	uxtb	r1, r1
 800991a:	7803      	ldrb	r3, [r0, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <strchr+0x12>
 8009920:	428b      	cmp	r3, r1
 8009922:	d100      	bne.n	8009926 <strchr+0xe>
 8009924:	4770      	bx	lr
 8009926:	3001      	adds	r0, #1
 8009928:	e7f7      	b.n	800991a <strchr+0x2>
 800992a:	424b      	negs	r3, r1
 800992c:	4159      	adcs	r1, r3
 800992e:	4249      	negs	r1, r1
 8009930:	4008      	ands	r0, r1
 8009932:	e7f7      	b.n	8009924 <strchr+0xc>

08009934 <strncmp>:
 8009934:	2300      	movs	r3, #0
 8009936:	b530      	push	{r4, r5, lr}
 8009938:	429a      	cmp	r2, r3
 800993a:	d00a      	beq.n	8009952 <strncmp+0x1e>
 800993c:	3a01      	subs	r2, #1
 800993e:	5cc4      	ldrb	r4, [r0, r3]
 8009940:	5ccd      	ldrb	r5, [r1, r3]
 8009942:	42ac      	cmp	r4, r5
 8009944:	d104      	bne.n	8009950 <strncmp+0x1c>
 8009946:	4293      	cmp	r3, r2
 8009948:	d002      	beq.n	8009950 <strncmp+0x1c>
 800994a:	3301      	adds	r3, #1
 800994c:	2c00      	cmp	r4, #0
 800994e:	d1f6      	bne.n	800993e <strncmp+0xa>
 8009950:	1b63      	subs	r3, r4, r5
 8009952:	0018      	movs	r0, r3
 8009954:	bd30      	pop	{r4, r5, pc}

08009956 <__ascii_wctomb>:
 8009956:	1e0b      	subs	r3, r1, #0
 8009958:	d004      	beq.n	8009964 <__ascii_wctomb+0xe>
 800995a:	2aff      	cmp	r2, #255	; 0xff
 800995c:	d904      	bls.n	8009968 <__ascii_wctomb+0x12>
 800995e:	238a      	movs	r3, #138	; 0x8a
 8009960:	6003      	str	r3, [r0, #0]
 8009962:	3b8b      	subs	r3, #139	; 0x8b
 8009964:	0018      	movs	r0, r3
 8009966:	4770      	bx	lr
 8009968:	700a      	strb	r2, [r1, #0]
 800996a:	2301      	movs	r3, #1
 800996c:	e7fa      	b.n	8009964 <__ascii_wctomb+0xe>

0800996e <__malloc_lock>:
 800996e:	4770      	bx	lr

08009970 <__malloc_unlock>:
 8009970:	4770      	bx	lr
	...

08009974 <_init>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	46c0      	nop			; (mov r8, r8)
 8009978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997a:	bc08      	pop	{r3}
 800997c:	469e      	mov	lr, r3
 800997e:	4770      	bx	lr

08009980 <_fini>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr
